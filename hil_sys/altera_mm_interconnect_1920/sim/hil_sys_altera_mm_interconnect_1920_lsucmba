// hil_sys_altera_mm_interconnect_1920_lsucmba.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 23.2 94

`timescale 1 ps / 1 ps
module hil_sys_altera_mm_interconnect_1920_lsucmba (
		input  wire [31:0]  mm_master_bfm_0_m0_address,                                      //                                        mm_master_bfm_0_m0.address
		output wire         mm_master_bfm_0_m0_waitrequest,                                  //                                                          .waitrequest
		input  wire [2:0]   mm_master_bfm_0_m0_burstcount,                                   //                                                          .burstcount
		input  wire [3:0]   mm_master_bfm_0_m0_byteenable,                                   //                                                          .byteenable
		input  wire         mm_master_bfm_0_m0_read,                                         //                                                          .read
		output wire [31:0]  mm_master_bfm_0_m0_readdata,                                     //                                                          .readdata
		output wire         mm_master_bfm_0_m0_readdatavalid,                                //                                                          .readdatavalid
		input  wire         mm_master_bfm_0_m0_write,                                        //                                                          .write
		input  wire [31:0]  mm_master_bfm_0_m0_writedata,                                    //                                                          .writedata
		input  wire [31:0]  jtag_master_master_address,                                      //                                        jtag_master_master.address
		output wire         jtag_master_master_waitrequest,                                  //                                                          .waitrequest
		input  wire [3:0]   jtag_master_master_byteenable,                                   //                                                          .byteenable
		input  wire         jtag_master_master_read,                                         //                                                          .read
		output wire [31:0]  jtag_master_master_readdata,                                     //                                                          .readdata
		output wire         jtag_master_master_readdatavalid,                                //                                                          .readdatavalid
		input  wire         jtag_master_master_write,                                        //                                                          .write
		input  wire [31:0]  jtag_master_master_writedata,                                    //                                                          .writedata
		input  wire [31:0]  sink_dma_mm_write_address,                                       //                                         sink_dma_mm_write.address
		output wire         sink_dma_mm_write_waitrequest,                                   //                                                          .waitrequest
		input  wire [3:0]   sink_dma_mm_write_byteenable,                                    //                                                          .byteenable
		input  wire         sink_dma_mm_write_write,                                         //                                                          .write
		input  wire [31:0]  sink_dma_mm_write_writedata,                                     //                                                          .writedata
		input  wire [31:0]  source_dma_mm_read_address,                                      //                                        source_dma_mm_read.address
		output wire         source_dma_mm_read_waitrequest,                                  //                                                          .waitrequest
		input  wire [3:0]   source_dma_mm_read_byteenable,                                   //                                                          .byteenable
		input  wire         source_dma_mm_read_read,                                         //                                                          .read
		output wire [31:0]  source_dma_mm_read_readdata,                                     //                                                          .readdata
		output wire         source_dma_mm_read_readdatavalid,                                //                                                          .readdatavalid
		output wire [2:0]   source_dma_csr_address,                                          //                                            source_dma_csr.address
		output wire         source_dma_csr_write,                                            //                                                          .write
		output wire         source_dma_csr_read,                                             //                                                          .read
		input  wire [31:0]  source_dma_csr_readdata,                                         //                                                          .readdata
		output wire [31:0]  source_dma_csr_writedata,                                        //                                                          .writedata
		output wire [3:0]   source_dma_csr_byteenable,                                       //                                                          .byteenable
		output wire [2:0]   sink_dma_csr_address,                                            //                                              sink_dma_csr.address
		output wire         sink_dma_csr_write,                                              //                                                          .write
		output wire         sink_dma_csr_read,                                               //                                                          .read
		input  wire [31:0]  sink_dma_csr_readdata,                                           //                                                          .readdata
		output wire [31:0]  sink_dma_csr_writedata,                                          //                                                          .writedata
		output wire [3:0]   sink_dma_csr_byteenable,                                         //                                                          .byteenable
		output wire         source_dma_descriptor_slave_write,                               //                               source_dma_descriptor_slave.write
		output wire [127:0] source_dma_descriptor_slave_writedata,                           //                                                          .writedata
		output wire [15:0]  source_dma_descriptor_slave_byteenable,                          //                                                          .byteenable
		input  wire         source_dma_descriptor_slave_waitrequest,                         //                                                          .waitrequest
		output wire         sink_dma_descriptor_slave_write,                                 //                                 sink_dma_descriptor_slave.write
		output wire [127:0] sink_dma_descriptor_slave_writedata,                             //                                                          .writedata
		output wire [15:0]  sink_dma_descriptor_slave_byteenable,                            //                                                          .byteenable
		input  wire         sink_dma_descriptor_slave_waitrequest,                           //                                                          .waitrequest
		output wire [9:0]   test_source_ram_s1_address,                                      //                                        test_source_ram_s1.address
		output wire         test_source_ram_s1_write,                                        //                                                          .write
		input  wire [31:0]  test_source_ram_s1_readdata,                                     //                                                          .readdata
		output wire [31:0]  test_source_ram_s1_writedata,                                    //                                                          .writedata
		output wire [3:0]   test_source_ram_s1_byteenable,                                   //                                                          .byteenable
		output wire         test_source_ram_s1_chipselect,                                   //                                                          .chipselect
		output wire         test_source_ram_s1_clken,                                        //                                                          .clken
		output wire [9:0]   test_sink_ram_s1_address,                                        //                                          test_sink_ram_s1.address
		output wire         test_sink_ram_s1_write,                                          //                                                          .write
		input  wire [31:0]  test_sink_ram_s1_readdata,                                       //                                                          .readdata
		output wire [31:0]  test_sink_ram_s1_writedata,                                      //                                                          .writedata
		output wire [3:0]   test_sink_ram_s1_byteenable,                                     //                                                          .byteenable
		output wire         test_sink_ram_s1_chipselect,                                     //                                                          .chipselect
		output wire         test_sink_ram_s1_clken,                                          //                                                          .clken
		input  wire         sink_dma_reset_n_reset_bridge_in_reset_reset,                    //                    sink_dma_reset_n_reset_bridge_in_reset.reset
		input  wire         test_source_ram_reset1_reset_bridge_in_reset_reset,              //              test_source_ram_reset1_reset_bridge_in_reset.reset
		input  wire         mm_master_bfm_0_m0_translator_reset_reset_bridge_in_reset_reset, // mm_master_bfm_0_m0_translator_reset_reset_bridge_in_reset.reset
		input  wire         jtag_master_master_translator_reset_reset_bridge_in_reset_reset, // jtag_master_master_translator_reset_reset_bridge_in_reset.reset
		input  wire         clock_in_out_clk_clk                                             //                                          clock_in_out_clk.clk
	);

	wire          mm_master_bfm_0_m0_translator_avalon_universal_master_0_waitrequest;   // mm_master_bfm_0_m0_agent:av_waitrequest -> mm_master_bfm_0_m0_translator:uav_waitrequest
	wire   [31:0] mm_master_bfm_0_m0_translator_avalon_universal_master_0_readdata;      // mm_master_bfm_0_m0_agent:av_readdata -> mm_master_bfm_0_m0_translator:uav_readdata
	wire          mm_master_bfm_0_m0_translator_avalon_universal_master_0_debugaccess;   // mm_master_bfm_0_m0_translator:uav_debugaccess -> mm_master_bfm_0_m0_agent:av_debugaccess
	wire   [31:0] mm_master_bfm_0_m0_translator_avalon_universal_master_0_address;       // mm_master_bfm_0_m0_translator:uav_address -> mm_master_bfm_0_m0_agent:av_address
	wire          mm_master_bfm_0_m0_translator_avalon_universal_master_0_read;          // mm_master_bfm_0_m0_translator:uav_read -> mm_master_bfm_0_m0_agent:av_read
	wire    [3:0] mm_master_bfm_0_m0_translator_avalon_universal_master_0_byteenable;    // mm_master_bfm_0_m0_translator:uav_byteenable -> mm_master_bfm_0_m0_agent:av_byteenable
	wire          mm_master_bfm_0_m0_translator_avalon_universal_master_0_readdatavalid; // mm_master_bfm_0_m0_agent:av_readdatavalid -> mm_master_bfm_0_m0_translator:uav_readdatavalid
	wire          mm_master_bfm_0_m0_translator_avalon_universal_master_0_lock;          // mm_master_bfm_0_m0_translator:uav_lock -> mm_master_bfm_0_m0_agent:av_lock
	wire          mm_master_bfm_0_m0_translator_avalon_universal_master_0_write;         // mm_master_bfm_0_m0_translator:uav_write -> mm_master_bfm_0_m0_agent:av_write
	wire   [31:0] mm_master_bfm_0_m0_translator_avalon_universal_master_0_writedata;     // mm_master_bfm_0_m0_translator:uav_writedata -> mm_master_bfm_0_m0_agent:av_writedata
	wire    [4:0] mm_master_bfm_0_m0_translator_avalon_universal_master_0_burstcount;    // mm_master_bfm_0_m0_translator:uav_burstcount -> mm_master_bfm_0_m0_agent:av_burstcount
	wire          jtag_master_master_translator_avalon_universal_master_0_waitrequest;   // jtag_master_master_agent:av_waitrequest -> jtag_master_master_translator:uav_waitrequest
	wire   [31:0] jtag_master_master_translator_avalon_universal_master_0_readdata;      // jtag_master_master_agent:av_readdata -> jtag_master_master_translator:uav_readdata
	wire          jtag_master_master_translator_avalon_universal_master_0_debugaccess;   // jtag_master_master_translator:uav_debugaccess -> jtag_master_master_agent:av_debugaccess
	wire   [31:0] jtag_master_master_translator_avalon_universal_master_0_address;       // jtag_master_master_translator:uav_address -> jtag_master_master_agent:av_address
	wire          jtag_master_master_translator_avalon_universal_master_0_read;          // jtag_master_master_translator:uav_read -> jtag_master_master_agent:av_read
	wire    [3:0] jtag_master_master_translator_avalon_universal_master_0_byteenable;    // jtag_master_master_translator:uav_byteenable -> jtag_master_master_agent:av_byteenable
	wire          jtag_master_master_translator_avalon_universal_master_0_readdatavalid; // jtag_master_master_agent:av_readdatavalid -> jtag_master_master_translator:uav_readdatavalid
	wire          jtag_master_master_translator_avalon_universal_master_0_lock;          // jtag_master_master_translator:uav_lock -> jtag_master_master_agent:av_lock
	wire          jtag_master_master_translator_avalon_universal_master_0_write;         // jtag_master_master_translator:uav_write -> jtag_master_master_agent:av_write
	wire   [31:0] jtag_master_master_translator_avalon_universal_master_0_writedata;     // jtag_master_master_translator:uav_writedata -> jtag_master_master_agent:av_writedata
	wire    [2:0] jtag_master_master_translator_avalon_universal_master_0_burstcount;    // jtag_master_master_translator:uav_burstcount -> jtag_master_master_agent:av_burstcount
	wire          sink_dma_mm_write_translator_avalon_universal_master_0_waitrequest;    // sink_dma_mm_write_agent:av_waitrequest -> sink_dma_mm_write_translator:uav_waitrequest
	wire   [31:0] sink_dma_mm_write_translator_avalon_universal_master_0_readdata;       // sink_dma_mm_write_agent:av_readdata -> sink_dma_mm_write_translator:uav_readdata
	wire          sink_dma_mm_write_translator_avalon_universal_master_0_debugaccess;    // sink_dma_mm_write_translator:uav_debugaccess -> sink_dma_mm_write_agent:av_debugaccess
	wire   [31:0] sink_dma_mm_write_translator_avalon_universal_master_0_address;        // sink_dma_mm_write_translator:uav_address -> sink_dma_mm_write_agent:av_address
	wire          sink_dma_mm_write_translator_avalon_universal_master_0_read;           // sink_dma_mm_write_translator:uav_read -> sink_dma_mm_write_agent:av_read
	wire    [3:0] sink_dma_mm_write_translator_avalon_universal_master_0_byteenable;     // sink_dma_mm_write_translator:uav_byteenable -> sink_dma_mm_write_agent:av_byteenable
	wire          sink_dma_mm_write_translator_avalon_universal_master_0_readdatavalid;  // sink_dma_mm_write_agent:av_readdatavalid -> sink_dma_mm_write_translator:uav_readdatavalid
	wire          sink_dma_mm_write_translator_avalon_universal_master_0_lock;           // sink_dma_mm_write_translator:uav_lock -> sink_dma_mm_write_agent:av_lock
	wire          sink_dma_mm_write_translator_avalon_universal_master_0_write;          // sink_dma_mm_write_translator:uav_write -> sink_dma_mm_write_agent:av_write
	wire   [31:0] sink_dma_mm_write_translator_avalon_universal_master_0_writedata;      // sink_dma_mm_write_translator:uav_writedata -> sink_dma_mm_write_agent:av_writedata
	wire    [2:0] sink_dma_mm_write_translator_avalon_universal_master_0_burstcount;     // sink_dma_mm_write_translator:uav_burstcount -> sink_dma_mm_write_agent:av_burstcount
	wire          rsp_mux_002_src_valid;                                                 // rsp_mux_002:src_valid -> sink_dma_mm_write_agent:rp_valid
	wire  [121:0] rsp_mux_002_src_data;                                                  // rsp_mux_002:src_data -> sink_dma_mm_write_agent:rp_data
	wire          rsp_mux_002_src_ready;                                                 // sink_dma_mm_write_agent:rp_ready -> rsp_mux_002:src_ready
	wire    [5:0] rsp_mux_002_src_channel;                                               // rsp_mux_002:src_channel -> sink_dma_mm_write_agent:rp_channel
	wire          rsp_mux_002_src_startofpacket;                                         // rsp_mux_002:src_startofpacket -> sink_dma_mm_write_agent:rp_startofpacket
	wire          rsp_mux_002_src_endofpacket;                                           // rsp_mux_002:src_endofpacket -> sink_dma_mm_write_agent:rp_endofpacket
	wire          source_dma_mm_read_translator_avalon_universal_master_0_waitrequest;   // source_dma_mm_read_agent:av_waitrequest -> source_dma_mm_read_translator:uav_waitrequest
	wire   [31:0] source_dma_mm_read_translator_avalon_universal_master_0_readdata;      // source_dma_mm_read_agent:av_readdata -> source_dma_mm_read_translator:uav_readdata
	wire          source_dma_mm_read_translator_avalon_universal_master_0_debugaccess;   // source_dma_mm_read_translator:uav_debugaccess -> source_dma_mm_read_agent:av_debugaccess
	wire   [31:0] source_dma_mm_read_translator_avalon_universal_master_0_address;       // source_dma_mm_read_translator:uav_address -> source_dma_mm_read_agent:av_address
	wire          source_dma_mm_read_translator_avalon_universal_master_0_read;          // source_dma_mm_read_translator:uav_read -> source_dma_mm_read_agent:av_read
	wire    [3:0] source_dma_mm_read_translator_avalon_universal_master_0_byteenable;    // source_dma_mm_read_translator:uav_byteenable -> source_dma_mm_read_agent:av_byteenable
	wire          source_dma_mm_read_translator_avalon_universal_master_0_readdatavalid; // source_dma_mm_read_agent:av_readdatavalid -> source_dma_mm_read_translator:uav_readdatavalid
	wire          source_dma_mm_read_translator_avalon_universal_master_0_lock;          // source_dma_mm_read_translator:uav_lock -> source_dma_mm_read_agent:av_lock
	wire          source_dma_mm_read_translator_avalon_universal_master_0_write;         // source_dma_mm_read_translator:uav_write -> source_dma_mm_read_agent:av_write
	wire   [31:0] source_dma_mm_read_translator_avalon_universal_master_0_writedata;     // source_dma_mm_read_translator:uav_writedata -> source_dma_mm_read_agent:av_writedata
	wire    [2:0] source_dma_mm_read_translator_avalon_universal_master_0_burstcount;    // source_dma_mm_read_translator:uav_burstcount -> source_dma_mm_read_agent:av_burstcount
	wire          rsp_mux_003_src_valid;                                                 // rsp_mux_003:src_valid -> source_dma_mm_read_agent:rp_valid
	wire  [121:0] rsp_mux_003_src_data;                                                  // rsp_mux_003:src_data -> source_dma_mm_read_agent:rp_data
	wire          rsp_mux_003_src_ready;                                                 // source_dma_mm_read_agent:rp_ready -> rsp_mux_003:src_ready
	wire    [5:0] rsp_mux_003_src_channel;                                               // rsp_mux_003:src_channel -> source_dma_mm_read_agent:rp_channel
	wire          rsp_mux_003_src_startofpacket;                                         // rsp_mux_003:src_startofpacket -> source_dma_mm_read_agent:rp_startofpacket
	wire          rsp_mux_003_src_endofpacket;                                           // rsp_mux_003:src_endofpacket -> source_dma_mm_read_agent:rp_endofpacket
	wire   [31:0] source_dma_csr_agent_m0_readdata;                                      // source_dma_csr_translator:uav_readdata -> source_dma_csr_agent:m0_readdata
	wire          source_dma_csr_agent_m0_waitrequest;                                   // source_dma_csr_translator:uav_waitrequest -> source_dma_csr_agent:m0_waitrequest
	wire          source_dma_csr_agent_m0_debugaccess;                                   // source_dma_csr_agent:m0_debugaccess -> source_dma_csr_translator:uav_debugaccess
	wire   [31:0] source_dma_csr_agent_m0_address;                                       // source_dma_csr_agent:m0_address -> source_dma_csr_translator:uav_address
	wire    [3:0] source_dma_csr_agent_m0_byteenable;                                    // source_dma_csr_agent:m0_byteenable -> source_dma_csr_translator:uav_byteenable
	wire          source_dma_csr_agent_m0_read;                                          // source_dma_csr_agent:m0_read -> source_dma_csr_translator:uav_read
	wire          source_dma_csr_agent_m0_readdatavalid;                                 // source_dma_csr_translator:uav_readdatavalid -> source_dma_csr_agent:m0_readdatavalid
	wire          source_dma_csr_agent_m0_lock;                                          // source_dma_csr_agent:m0_lock -> source_dma_csr_translator:uav_lock
	wire   [31:0] source_dma_csr_agent_m0_writedata;                                     // source_dma_csr_agent:m0_writedata -> source_dma_csr_translator:uav_writedata
	wire          source_dma_csr_agent_m0_write;                                         // source_dma_csr_agent:m0_write -> source_dma_csr_translator:uav_write
	wire    [2:0] source_dma_csr_agent_m0_burstcount;                                    // source_dma_csr_agent:m0_burstcount -> source_dma_csr_translator:uav_burstcount
	wire          source_dma_csr_agent_rf_source_valid;                                  // source_dma_csr_agent:rf_source_valid -> source_dma_csr_agent_rsp_fifo:in_valid
	wire  [122:0] source_dma_csr_agent_rf_source_data;                                   // source_dma_csr_agent:rf_source_data -> source_dma_csr_agent_rsp_fifo:in_data
	wire          source_dma_csr_agent_rf_source_ready;                                  // source_dma_csr_agent_rsp_fifo:in_ready -> source_dma_csr_agent:rf_source_ready
	wire          source_dma_csr_agent_rf_source_startofpacket;                          // source_dma_csr_agent:rf_source_startofpacket -> source_dma_csr_agent_rsp_fifo:in_startofpacket
	wire          source_dma_csr_agent_rf_source_endofpacket;                            // source_dma_csr_agent:rf_source_endofpacket -> source_dma_csr_agent_rsp_fifo:in_endofpacket
	wire          source_dma_csr_agent_rsp_fifo_out_valid;                               // source_dma_csr_agent_rsp_fifo:out_valid -> source_dma_csr_agent:rf_sink_valid
	wire  [122:0] source_dma_csr_agent_rsp_fifo_out_data;                                // source_dma_csr_agent_rsp_fifo:out_data -> source_dma_csr_agent:rf_sink_data
	wire          source_dma_csr_agent_rsp_fifo_out_ready;                               // source_dma_csr_agent:rf_sink_ready -> source_dma_csr_agent_rsp_fifo:out_ready
	wire          source_dma_csr_agent_rsp_fifo_out_startofpacket;                       // source_dma_csr_agent_rsp_fifo:out_startofpacket -> source_dma_csr_agent:rf_sink_startofpacket
	wire          source_dma_csr_agent_rsp_fifo_out_endofpacket;                         // source_dma_csr_agent_rsp_fifo:out_endofpacket -> source_dma_csr_agent:rf_sink_endofpacket
	wire          source_dma_csr_agent_rdata_fifo_src_valid;                             // source_dma_csr_agent:rdata_fifo_src_valid -> source_dma_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] source_dma_csr_agent_rdata_fifo_src_data;                              // source_dma_csr_agent:rdata_fifo_src_data -> source_dma_csr_agent:rdata_fifo_sink_data
	wire          source_dma_csr_agent_rdata_fifo_src_ready;                             // source_dma_csr_agent:rdata_fifo_sink_ready -> source_dma_csr_agent:rdata_fifo_src_ready
	wire   [31:0] sink_dma_csr_agent_m0_readdata;                                        // sink_dma_csr_translator:uav_readdata -> sink_dma_csr_agent:m0_readdata
	wire          sink_dma_csr_agent_m0_waitrequest;                                     // sink_dma_csr_translator:uav_waitrequest -> sink_dma_csr_agent:m0_waitrequest
	wire          sink_dma_csr_agent_m0_debugaccess;                                     // sink_dma_csr_agent:m0_debugaccess -> sink_dma_csr_translator:uav_debugaccess
	wire   [31:0] sink_dma_csr_agent_m0_address;                                         // sink_dma_csr_agent:m0_address -> sink_dma_csr_translator:uav_address
	wire    [3:0] sink_dma_csr_agent_m0_byteenable;                                      // sink_dma_csr_agent:m0_byteenable -> sink_dma_csr_translator:uav_byteenable
	wire          sink_dma_csr_agent_m0_read;                                            // sink_dma_csr_agent:m0_read -> sink_dma_csr_translator:uav_read
	wire          sink_dma_csr_agent_m0_readdatavalid;                                   // sink_dma_csr_translator:uav_readdatavalid -> sink_dma_csr_agent:m0_readdatavalid
	wire          sink_dma_csr_agent_m0_lock;                                            // sink_dma_csr_agent:m0_lock -> sink_dma_csr_translator:uav_lock
	wire   [31:0] sink_dma_csr_agent_m0_writedata;                                       // sink_dma_csr_agent:m0_writedata -> sink_dma_csr_translator:uav_writedata
	wire          sink_dma_csr_agent_m0_write;                                           // sink_dma_csr_agent:m0_write -> sink_dma_csr_translator:uav_write
	wire    [2:0] sink_dma_csr_agent_m0_burstcount;                                      // sink_dma_csr_agent:m0_burstcount -> sink_dma_csr_translator:uav_burstcount
	wire          sink_dma_csr_agent_rf_source_valid;                                    // sink_dma_csr_agent:rf_source_valid -> sink_dma_csr_agent_rsp_fifo:in_valid
	wire  [122:0] sink_dma_csr_agent_rf_source_data;                                     // sink_dma_csr_agent:rf_source_data -> sink_dma_csr_agent_rsp_fifo:in_data
	wire          sink_dma_csr_agent_rf_source_ready;                                    // sink_dma_csr_agent_rsp_fifo:in_ready -> sink_dma_csr_agent:rf_source_ready
	wire          sink_dma_csr_agent_rf_source_startofpacket;                            // sink_dma_csr_agent:rf_source_startofpacket -> sink_dma_csr_agent_rsp_fifo:in_startofpacket
	wire          sink_dma_csr_agent_rf_source_endofpacket;                              // sink_dma_csr_agent:rf_source_endofpacket -> sink_dma_csr_agent_rsp_fifo:in_endofpacket
	wire          sink_dma_csr_agent_rsp_fifo_out_valid;                                 // sink_dma_csr_agent_rsp_fifo:out_valid -> sink_dma_csr_agent:rf_sink_valid
	wire  [122:0] sink_dma_csr_agent_rsp_fifo_out_data;                                  // sink_dma_csr_agent_rsp_fifo:out_data -> sink_dma_csr_agent:rf_sink_data
	wire          sink_dma_csr_agent_rsp_fifo_out_ready;                                 // sink_dma_csr_agent:rf_sink_ready -> sink_dma_csr_agent_rsp_fifo:out_ready
	wire          sink_dma_csr_agent_rsp_fifo_out_startofpacket;                         // sink_dma_csr_agent_rsp_fifo:out_startofpacket -> sink_dma_csr_agent:rf_sink_startofpacket
	wire          sink_dma_csr_agent_rsp_fifo_out_endofpacket;                           // sink_dma_csr_agent_rsp_fifo:out_endofpacket -> sink_dma_csr_agent:rf_sink_endofpacket
	wire          sink_dma_csr_agent_rdata_fifo_src_valid;                               // sink_dma_csr_agent:rdata_fifo_src_valid -> sink_dma_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] sink_dma_csr_agent_rdata_fifo_src_data;                                // sink_dma_csr_agent:rdata_fifo_src_data -> sink_dma_csr_agent:rdata_fifo_sink_data
	wire          sink_dma_csr_agent_rdata_fifo_src_ready;                               // sink_dma_csr_agent:rdata_fifo_sink_ready -> sink_dma_csr_agent:rdata_fifo_src_ready
	wire  [127:0] source_dma_descriptor_slave_agent_m0_readdata;                         // source_dma_descriptor_slave_translator:uav_readdata -> source_dma_descriptor_slave_agent:m0_readdata
	wire          source_dma_descriptor_slave_agent_m0_waitrequest;                      // source_dma_descriptor_slave_translator:uav_waitrequest -> source_dma_descriptor_slave_agent:m0_waitrequest
	wire          source_dma_descriptor_slave_agent_m0_debugaccess;                      // source_dma_descriptor_slave_agent:m0_debugaccess -> source_dma_descriptor_slave_translator:uav_debugaccess
	wire   [31:0] source_dma_descriptor_slave_agent_m0_address;                          // source_dma_descriptor_slave_agent:m0_address -> source_dma_descriptor_slave_translator:uav_address
	wire   [15:0] source_dma_descriptor_slave_agent_m0_byteenable;                       // source_dma_descriptor_slave_agent:m0_byteenable -> source_dma_descriptor_slave_translator:uav_byteenable
	wire          source_dma_descriptor_slave_agent_m0_read;                             // source_dma_descriptor_slave_agent:m0_read -> source_dma_descriptor_slave_translator:uav_read
	wire          source_dma_descriptor_slave_agent_m0_readdatavalid;                    // source_dma_descriptor_slave_translator:uav_readdatavalid -> source_dma_descriptor_slave_agent:m0_readdatavalid
	wire          source_dma_descriptor_slave_agent_m0_lock;                             // source_dma_descriptor_slave_agent:m0_lock -> source_dma_descriptor_slave_translator:uav_lock
	wire  [127:0] source_dma_descriptor_slave_agent_m0_writedata;                        // source_dma_descriptor_slave_agent:m0_writedata -> source_dma_descriptor_slave_translator:uav_writedata
	wire          source_dma_descriptor_slave_agent_m0_write;                            // source_dma_descriptor_slave_agent:m0_write -> source_dma_descriptor_slave_translator:uav_write
	wire    [4:0] source_dma_descriptor_slave_agent_m0_burstcount;                       // source_dma_descriptor_slave_agent:m0_burstcount -> source_dma_descriptor_slave_translator:uav_burstcount
	wire          source_dma_descriptor_slave_agent_rf_source_valid;                     // source_dma_descriptor_slave_agent:rf_source_valid -> source_dma_descriptor_slave_agent_rsp_fifo:in_valid
	wire  [230:0] source_dma_descriptor_slave_agent_rf_source_data;                      // source_dma_descriptor_slave_agent:rf_source_data -> source_dma_descriptor_slave_agent_rsp_fifo:in_data
	wire          source_dma_descriptor_slave_agent_rf_source_ready;                     // source_dma_descriptor_slave_agent_rsp_fifo:in_ready -> source_dma_descriptor_slave_agent:rf_source_ready
	wire          source_dma_descriptor_slave_agent_rf_source_startofpacket;             // source_dma_descriptor_slave_agent:rf_source_startofpacket -> source_dma_descriptor_slave_agent_rsp_fifo:in_startofpacket
	wire          source_dma_descriptor_slave_agent_rf_source_endofpacket;               // source_dma_descriptor_slave_agent:rf_source_endofpacket -> source_dma_descriptor_slave_agent_rsp_fifo:in_endofpacket
	wire          source_dma_descriptor_slave_agent_rsp_fifo_out_valid;                  // source_dma_descriptor_slave_agent_rsp_fifo:out_valid -> source_dma_descriptor_slave_agent:rf_sink_valid
	wire  [230:0] source_dma_descriptor_slave_agent_rsp_fifo_out_data;                   // source_dma_descriptor_slave_agent_rsp_fifo:out_data -> source_dma_descriptor_slave_agent:rf_sink_data
	wire          source_dma_descriptor_slave_agent_rsp_fifo_out_ready;                  // source_dma_descriptor_slave_agent:rf_sink_ready -> source_dma_descriptor_slave_agent_rsp_fifo:out_ready
	wire          source_dma_descriptor_slave_agent_rsp_fifo_out_startofpacket;          // source_dma_descriptor_slave_agent_rsp_fifo:out_startofpacket -> source_dma_descriptor_slave_agent:rf_sink_startofpacket
	wire          source_dma_descriptor_slave_agent_rsp_fifo_out_endofpacket;            // source_dma_descriptor_slave_agent_rsp_fifo:out_endofpacket -> source_dma_descriptor_slave_agent:rf_sink_endofpacket
	wire          source_dma_descriptor_slave_agent_rdata_fifo_src_valid;                // source_dma_descriptor_slave_agent:rdata_fifo_src_valid -> source_dma_descriptor_slave_agent_rdata_fifo:in_valid
	wire  [129:0] source_dma_descriptor_slave_agent_rdata_fifo_src_data;                 // source_dma_descriptor_slave_agent:rdata_fifo_src_data -> source_dma_descriptor_slave_agent_rdata_fifo:in_data
	wire          source_dma_descriptor_slave_agent_rdata_fifo_src_ready;                // source_dma_descriptor_slave_agent_rdata_fifo:in_ready -> source_dma_descriptor_slave_agent:rdata_fifo_src_ready
	wire          source_dma_descriptor_slave_agent_rdata_fifo_out_valid;                // source_dma_descriptor_slave_agent_rdata_fifo:out_valid -> source_dma_descriptor_slave_agent:rdata_fifo_sink_valid
	wire  [129:0] source_dma_descriptor_slave_agent_rdata_fifo_out_data;                 // source_dma_descriptor_slave_agent_rdata_fifo:out_data -> source_dma_descriptor_slave_agent:rdata_fifo_sink_data
	wire          source_dma_descriptor_slave_agent_rdata_fifo_out_ready;                // source_dma_descriptor_slave_agent:rdata_fifo_sink_ready -> source_dma_descriptor_slave_agent_rdata_fifo:out_ready
	wire  [127:0] sink_dma_descriptor_slave_agent_m0_readdata;                           // sink_dma_descriptor_slave_translator:uav_readdata -> sink_dma_descriptor_slave_agent:m0_readdata
	wire          sink_dma_descriptor_slave_agent_m0_waitrequest;                        // sink_dma_descriptor_slave_translator:uav_waitrequest -> sink_dma_descriptor_slave_agent:m0_waitrequest
	wire          sink_dma_descriptor_slave_agent_m0_debugaccess;                        // sink_dma_descriptor_slave_agent:m0_debugaccess -> sink_dma_descriptor_slave_translator:uav_debugaccess
	wire   [31:0] sink_dma_descriptor_slave_agent_m0_address;                            // sink_dma_descriptor_slave_agent:m0_address -> sink_dma_descriptor_slave_translator:uav_address
	wire   [15:0] sink_dma_descriptor_slave_agent_m0_byteenable;                         // sink_dma_descriptor_slave_agent:m0_byteenable -> sink_dma_descriptor_slave_translator:uav_byteenable
	wire          sink_dma_descriptor_slave_agent_m0_read;                               // sink_dma_descriptor_slave_agent:m0_read -> sink_dma_descriptor_slave_translator:uav_read
	wire          sink_dma_descriptor_slave_agent_m0_readdatavalid;                      // sink_dma_descriptor_slave_translator:uav_readdatavalid -> sink_dma_descriptor_slave_agent:m0_readdatavalid
	wire          sink_dma_descriptor_slave_agent_m0_lock;                               // sink_dma_descriptor_slave_agent:m0_lock -> sink_dma_descriptor_slave_translator:uav_lock
	wire  [127:0] sink_dma_descriptor_slave_agent_m0_writedata;                          // sink_dma_descriptor_slave_agent:m0_writedata -> sink_dma_descriptor_slave_translator:uav_writedata
	wire          sink_dma_descriptor_slave_agent_m0_write;                              // sink_dma_descriptor_slave_agent:m0_write -> sink_dma_descriptor_slave_translator:uav_write
	wire    [4:0] sink_dma_descriptor_slave_agent_m0_burstcount;                         // sink_dma_descriptor_slave_agent:m0_burstcount -> sink_dma_descriptor_slave_translator:uav_burstcount
	wire          sink_dma_descriptor_slave_agent_rf_source_valid;                       // sink_dma_descriptor_slave_agent:rf_source_valid -> sink_dma_descriptor_slave_agent_rsp_fifo:in_valid
	wire  [230:0] sink_dma_descriptor_slave_agent_rf_source_data;                        // sink_dma_descriptor_slave_agent:rf_source_data -> sink_dma_descriptor_slave_agent_rsp_fifo:in_data
	wire          sink_dma_descriptor_slave_agent_rf_source_ready;                       // sink_dma_descriptor_slave_agent_rsp_fifo:in_ready -> sink_dma_descriptor_slave_agent:rf_source_ready
	wire          sink_dma_descriptor_slave_agent_rf_source_startofpacket;               // sink_dma_descriptor_slave_agent:rf_source_startofpacket -> sink_dma_descriptor_slave_agent_rsp_fifo:in_startofpacket
	wire          sink_dma_descriptor_slave_agent_rf_source_endofpacket;                 // sink_dma_descriptor_slave_agent:rf_source_endofpacket -> sink_dma_descriptor_slave_agent_rsp_fifo:in_endofpacket
	wire          sink_dma_descriptor_slave_agent_rsp_fifo_out_valid;                    // sink_dma_descriptor_slave_agent_rsp_fifo:out_valid -> sink_dma_descriptor_slave_agent:rf_sink_valid
	wire  [230:0] sink_dma_descriptor_slave_agent_rsp_fifo_out_data;                     // sink_dma_descriptor_slave_agent_rsp_fifo:out_data -> sink_dma_descriptor_slave_agent:rf_sink_data
	wire          sink_dma_descriptor_slave_agent_rsp_fifo_out_ready;                    // sink_dma_descriptor_slave_agent:rf_sink_ready -> sink_dma_descriptor_slave_agent_rsp_fifo:out_ready
	wire          sink_dma_descriptor_slave_agent_rsp_fifo_out_startofpacket;            // sink_dma_descriptor_slave_agent_rsp_fifo:out_startofpacket -> sink_dma_descriptor_slave_agent:rf_sink_startofpacket
	wire          sink_dma_descriptor_slave_agent_rsp_fifo_out_endofpacket;              // sink_dma_descriptor_slave_agent_rsp_fifo:out_endofpacket -> sink_dma_descriptor_slave_agent:rf_sink_endofpacket
	wire          sink_dma_descriptor_slave_agent_rdata_fifo_src_valid;                  // sink_dma_descriptor_slave_agent:rdata_fifo_src_valid -> sink_dma_descriptor_slave_agent_rdata_fifo:in_valid
	wire  [129:0] sink_dma_descriptor_slave_agent_rdata_fifo_src_data;                   // sink_dma_descriptor_slave_agent:rdata_fifo_src_data -> sink_dma_descriptor_slave_agent_rdata_fifo:in_data
	wire          sink_dma_descriptor_slave_agent_rdata_fifo_src_ready;                  // sink_dma_descriptor_slave_agent_rdata_fifo:in_ready -> sink_dma_descriptor_slave_agent:rdata_fifo_src_ready
	wire          sink_dma_descriptor_slave_agent_rdata_fifo_out_valid;                  // sink_dma_descriptor_slave_agent_rdata_fifo:out_valid -> sink_dma_descriptor_slave_agent:rdata_fifo_sink_valid
	wire  [129:0] sink_dma_descriptor_slave_agent_rdata_fifo_out_data;                   // sink_dma_descriptor_slave_agent_rdata_fifo:out_data -> sink_dma_descriptor_slave_agent:rdata_fifo_sink_data
	wire          sink_dma_descriptor_slave_agent_rdata_fifo_out_ready;                  // sink_dma_descriptor_slave_agent:rdata_fifo_sink_ready -> sink_dma_descriptor_slave_agent_rdata_fifo:out_ready
	wire   [31:0] test_source_ram_s1_agent_m0_readdata;                                  // test_source_ram_s1_translator:uav_readdata -> test_source_ram_s1_agent:m0_readdata
	wire          test_source_ram_s1_agent_m0_waitrequest;                               // test_source_ram_s1_translator:uav_waitrequest -> test_source_ram_s1_agent:m0_waitrequest
	wire          test_source_ram_s1_agent_m0_debugaccess;                               // test_source_ram_s1_agent:m0_debugaccess -> test_source_ram_s1_translator:uav_debugaccess
	wire   [31:0] test_source_ram_s1_agent_m0_address;                                   // test_source_ram_s1_agent:m0_address -> test_source_ram_s1_translator:uav_address
	wire    [3:0] test_source_ram_s1_agent_m0_byteenable;                                // test_source_ram_s1_agent:m0_byteenable -> test_source_ram_s1_translator:uav_byteenable
	wire          test_source_ram_s1_agent_m0_read;                                      // test_source_ram_s1_agent:m0_read -> test_source_ram_s1_translator:uav_read
	wire          test_source_ram_s1_agent_m0_readdatavalid;                             // test_source_ram_s1_translator:uav_readdatavalid -> test_source_ram_s1_agent:m0_readdatavalid
	wire          test_source_ram_s1_agent_m0_lock;                                      // test_source_ram_s1_agent:m0_lock -> test_source_ram_s1_translator:uav_lock
	wire   [31:0] test_source_ram_s1_agent_m0_writedata;                                 // test_source_ram_s1_agent:m0_writedata -> test_source_ram_s1_translator:uav_writedata
	wire          test_source_ram_s1_agent_m0_write;                                     // test_source_ram_s1_agent:m0_write -> test_source_ram_s1_translator:uav_write
	wire    [2:0] test_source_ram_s1_agent_m0_burstcount;                                // test_source_ram_s1_agent:m0_burstcount -> test_source_ram_s1_translator:uav_burstcount
	wire          test_source_ram_s1_agent_rf_source_valid;                              // test_source_ram_s1_agent:rf_source_valid -> test_source_ram_s1_agent_rsp_fifo:in_valid
	wire  [122:0] test_source_ram_s1_agent_rf_source_data;                               // test_source_ram_s1_agent:rf_source_data -> test_source_ram_s1_agent_rsp_fifo:in_data
	wire          test_source_ram_s1_agent_rf_source_ready;                              // test_source_ram_s1_agent_rsp_fifo:in_ready -> test_source_ram_s1_agent:rf_source_ready
	wire          test_source_ram_s1_agent_rf_source_startofpacket;                      // test_source_ram_s1_agent:rf_source_startofpacket -> test_source_ram_s1_agent_rsp_fifo:in_startofpacket
	wire          test_source_ram_s1_agent_rf_source_endofpacket;                        // test_source_ram_s1_agent:rf_source_endofpacket -> test_source_ram_s1_agent_rsp_fifo:in_endofpacket
	wire          test_source_ram_s1_agent_rsp_fifo_out_valid;                           // test_source_ram_s1_agent_rsp_fifo:out_valid -> test_source_ram_s1_agent:rf_sink_valid
	wire  [122:0] test_source_ram_s1_agent_rsp_fifo_out_data;                            // test_source_ram_s1_agent_rsp_fifo:out_data -> test_source_ram_s1_agent:rf_sink_data
	wire          test_source_ram_s1_agent_rsp_fifo_out_ready;                           // test_source_ram_s1_agent:rf_sink_ready -> test_source_ram_s1_agent_rsp_fifo:out_ready
	wire          test_source_ram_s1_agent_rsp_fifo_out_startofpacket;                   // test_source_ram_s1_agent_rsp_fifo:out_startofpacket -> test_source_ram_s1_agent:rf_sink_startofpacket
	wire          test_source_ram_s1_agent_rsp_fifo_out_endofpacket;                     // test_source_ram_s1_agent_rsp_fifo:out_endofpacket -> test_source_ram_s1_agent:rf_sink_endofpacket
	wire          test_source_ram_s1_agent_rdata_fifo_src_valid;                         // test_source_ram_s1_agent:rdata_fifo_src_valid -> test_source_ram_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] test_source_ram_s1_agent_rdata_fifo_src_data;                          // test_source_ram_s1_agent:rdata_fifo_src_data -> test_source_ram_s1_agent:rdata_fifo_sink_data
	wire          test_source_ram_s1_agent_rdata_fifo_src_ready;                         // test_source_ram_s1_agent:rdata_fifo_sink_ready -> test_source_ram_s1_agent:rdata_fifo_src_ready
	wire   [31:0] test_sink_ram_s1_agent_m0_readdata;                                    // test_sink_ram_s1_translator:uav_readdata -> test_sink_ram_s1_agent:m0_readdata
	wire          test_sink_ram_s1_agent_m0_waitrequest;                                 // test_sink_ram_s1_translator:uav_waitrequest -> test_sink_ram_s1_agent:m0_waitrequest
	wire          test_sink_ram_s1_agent_m0_debugaccess;                                 // test_sink_ram_s1_agent:m0_debugaccess -> test_sink_ram_s1_translator:uav_debugaccess
	wire   [31:0] test_sink_ram_s1_agent_m0_address;                                     // test_sink_ram_s1_agent:m0_address -> test_sink_ram_s1_translator:uav_address
	wire    [3:0] test_sink_ram_s1_agent_m0_byteenable;                                  // test_sink_ram_s1_agent:m0_byteenable -> test_sink_ram_s1_translator:uav_byteenable
	wire          test_sink_ram_s1_agent_m0_read;                                        // test_sink_ram_s1_agent:m0_read -> test_sink_ram_s1_translator:uav_read
	wire          test_sink_ram_s1_agent_m0_readdatavalid;                               // test_sink_ram_s1_translator:uav_readdatavalid -> test_sink_ram_s1_agent:m0_readdatavalid
	wire          test_sink_ram_s1_agent_m0_lock;                                        // test_sink_ram_s1_agent:m0_lock -> test_sink_ram_s1_translator:uav_lock
	wire   [31:0] test_sink_ram_s1_agent_m0_writedata;                                   // test_sink_ram_s1_agent:m0_writedata -> test_sink_ram_s1_translator:uav_writedata
	wire          test_sink_ram_s1_agent_m0_write;                                       // test_sink_ram_s1_agent:m0_write -> test_sink_ram_s1_translator:uav_write
	wire    [2:0] test_sink_ram_s1_agent_m0_burstcount;                                  // test_sink_ram_s1_agent:m0_burstcount -> test_sink_ram_s1_translator:uav_burstcount
	wire          test_sink_ram_s1_agent_rf_source_valid;                                // test_sink_ram_s1_agent:rf_source_valid -> test_sink_ram_s1_agent_rsp_fifo:in_valid
	wire  [122:0] test_sink_ram_s1_agent_rf_source_data;                                 // test_sink_ram_s1_agent:rf_source_data -> test_sink_ram_s1_agent_rsp_fifo:in_data
	wire          test_sink_ram_s1_agent_rf_source_ready;                                // test_sink_ram_s1_agent_rsp_fifo:in_ready -> test_sink_ram_s1_agent:rf_source_ready
	wire          test_sink_ram_s1_agent_rf_source_startofpacket;                        // test_sink_ram_s1_agent:rf_source_startofpacket -> test_sink_ram_s1_agent_rsp_fifo:in_startofpacket
	wire          test_sink_ram_s1_agent_rf_source_endofpacket;                          // test_sink_ram_s1_agent:rf_source_endofpacket -> test_sink_ram_s1_agent_rsp_fifo:in_endofpacket
	wire          test_sink_ram_s1_agent_rsp_fifo_out_valid;                             // test_sink_ram_s1_agent_rsp_fifo:out_valid -> test_sink_ram_s1_agent:rf_sink_valid
	wire  [122:0] test_sink_ram_s1_agent_rsp_fifo_out_data;                              // test_sink_ram_s1_agent_rsp_fifo:out_data -> test_sink_ram_s1_agent:rf_sink_data
	wire          test_sink_ram_s1_agent_rsp_fifo_out_ready;                             // test_sink_ram_s1_agent:rf_sink_ready -> test_sink_ram_s1_agent_rsp_fifo:out_ready
	wire          test_sink_ram_s1_agent_rsp_fifo_out_startofpacket;                     // test_sink_ram_s1_agent_rsp_fifo:out_startofpacket -> test_sink_ram_s1_agent:rf_sink_startofpacket
	wire          test_sink_ram_s1_agent_rsp_fifo_out_endofpacket;                       // test_sink_ram_s1_agent_rsp_fifo:out_endofpacket -> test_sink_ram_s1_agent:rf_sink_endofpacket
	wire          test_sink_ram_s1_agent_rdata_fifo_src_valid;                           // test_sink_ram_s1_agent:rdata_fifo_src_valid -> test_sink_ram_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] test_sink_ram_s1_agent_rdata_fifo_src_data;                            // test_sink_ram_s1_agent:rdata_fifo_src_data -> test_sink_ram_s1_agent:rdata_fifo_sink_data
	wire          test_sink_ram_s1_agent_rdata_fifo_src_ready;                           // test_sink_ram_s1_agent:rdata_fifo_sink_ready -> test_sink_ram_s1_agent:rdata_fifo_src_ready
	wire          mm_master_bfm_0_m0_agent_cp_valid;                                     // mm_master_bfm_0_m0_agent:cp_valid -> router:sink_valid
	wire  [121:0] mm_master_bfm_0_m0_agent_cp_data;                                      // mm_master_bfm_0_m0_agent:cp_data -> router:sink_data
	wire          mm_master_bfm_0_m0_agent_cp_ready;                                     // router:sink_ready -> mm_master_bfm_0_m0_agent:cp_ready
	wire          mm_master_bfm_0_m0_agent_cp_startofpacket;                             // mm_master_bfm_0_m0_agent:cp_startofpacket -> router:sink_startofpacket
	wire          mm_master_bfm_0_m0_agent_cp_endofpacket;                               // mm_master_bfm_0_m0_agent:cp_endofpacket -> router:sink_endofpacket
	wire          jtag_master_master_agent_cp_valid;                                     // jtag_master_master_agent:cp_valid -> router_001:sink_valid
	wire  [121:0] jtag_master_master_agent_cp_data;                                      // jtag_master_master_agent:cp_data -> router_001:sink_data
	wire          jtag_master_master_agent_cp_ready;                                     // router_001:sink_ready -> jtag_master_master_agent:cp_ready
	wire          jtag_master_master_agent_cp_startofpacket;                             // jtag_master_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          jtag_master_master_agent_cp_endofpacket;                               // jtag_master_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          sink_dma_mm_write_agent_cp_valid;                                      // sink_dma_mm_write_agent:cp_valid -> router_002:sink_valid
	wire  [121:0] sink_dma_mm_write_agent_cp_data;                                       // sink_dma_mm_write_agent:cp_data -> router_002:sink_data
	wire          sink_dma_mm_write_agent_cp_ready;                                      // router_002:sink_ready -> sink_dma_mm_write_agent:cp_ready
	wire          sink_dma_mm_write_agent_cp_startofpacket;                              // sink_dma_mm_write_agent:cp_startofpacket -> router_002:sink_startofpacket
	wire          sink_dma_mm_write_agent_cp_endofpacket;                                // sink_dma_mm_write_agent:cp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                                  // router_002:src_valid -> cmd_demux_002:sink_valid
	wire  [121:0] router_002_src_data;                                                   // router_002:src_data -> cmd_demux_002:sink_data
	wire          router_002_src_ready;                                                  // cmd_demux_002:sink_ready -> router_002:src_ready
	wire    [5:0] router_002_src_channel;                                                // router_002:src_channel -> cmd_demux_002:sink_channel
	wire          router_002_src_startofpacket;                                          // router_002:src_startofpacket -> cmd_demux_002:sink_startofpacket
	wire          router_002_src_endofpacket;                                            // router_002:src_endofpacket -> cmd_demux_002:sink_endofpacket
	wire          source_dma_mm_read_agent_cp_valid;                                     // source_dma_mm_read_agent:cp_valid -> router_003:sink_valid
	wire  [121:0] source_dma_mm_read_agent_cp_data;                                      // source_dma_mm_read_agent:cp_data -> router_003:sink_data
	wire          source_dma_mm_read_agent_cp_ready;                                     // router_003:sink_ready -> source_dma_mm_read_agent:cp_ready
	wire          source_dma_mm_read_agent_cp_startofpacket;                             // source_dma_mm_read_agent:cp_startofpacket -> router_003:sink_startofpacket
	wire          source_dma_mm_read_agent_cp_endofpacket;                               // source_dma_mm_read_agent:cp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                                  // router_003:src_valid -> cmd_demux_003:sink_valid
	wire  [121:0] router_003_src_data;                                                   // router_003:src_data -> cmd_demux_003:sink_data
	wire          router_003_src_ready;                                                  // cmd_demux_003:sink_ready -> router_003:src_ready
	wire    [5:0] router_003_src_channel;                                                // router_003:src_channel -> cmd_demux_003:sink_channel
	wire          router_003_src_startofpacket;                                          // router_003:src_startofpacket -> cmd_demux_003:sink_startofpacket
	wire          router_003_src_endofpacket;                                            // router_003:src_endofpacket -> cmd_demux_003:sink_endofpacket
	wire          source_dma_csr_agent_rp_valid;                                         // source_dma_csr_agent:rp_valid -> router_004:sink_valid
	wire  [121:0] source_dma_csr_agent_rp_data;                                          // source_dma_csr_agent:rp_data -> router_004:sink_data
	wire          source_dma_csr_agent_rp_ready;                                         // router_004:sink_ready -> source_dma_csr_agent:rp_ready
	wire          source_dma_csr_agent_rp_startofpacket;                                 // source_dma_csr_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire          source_dma_csr_agent_rp_endofpacket;                                   // source_dma_csr_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                                  // router_004:src_valid -> rsp_demux:sink_valid
	wire  [121:0] router_004_src_data;                                                   // router_004:src_data -> rsp_demux:sink_data
	wire          router_004_src_ready;                                                  // rsp_demux:sink_ready -> router_004:src_ready
	wire    [5:0] router_004_src_channel;                                                // router_004:src_channel -> rsp_demux:sink_channel
	wire          router_004_src_startofpacket;                                          // router_004:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_004_src_endofpacket;                                            // router_004:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          sink_dma_csr_agent_rp_valid;                                           // sink_dma_csr_agent:rp_valid -> router_005:sink_valid
	wire  [121:0] sink_dma_csr_agent_rp_data;                                            // sink_dma_csr_agent:rp_data -> router_005:sink_data
	wire          sink_dma_csr_agent_rp_ready;                                           // router_005:sink_ready -> sink_dma_csr_agent:rp_ready
	wire          sink_dma_csr_agent_rp_startofpacket;                                   // sink_dma_csr_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          sink_dma_csr_agent_rp_endofpacket;                                     // sink_dma_csr_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                                  // router_005:src_valid -> rsp_demux_001:sink_valid
	wire  [121:0] router_005_src_data;                                                   // router_005:src_data -> rsp_demux_001:sink_data
	wire          router_005_src_ready;                                                  // rsp_demux_001:sink_ready -> router_005:src_ready
	wire    [5:0] router_005_src_channel;                                                // router_005:src_channel -> rsp_demux_001:sink_channel
	wire          router_005_src_startofpacket;                                          // router_005:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_005_src_endofpacket;                                            // router_005:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          source_dma_descriptor_slave_agent_rp_valid;                            // source_dma_descriptor_slave_agent:rp_valid -> router_006:sink_valid
	wire  [229:0] source_dma_descriptor_slave_agent_rp_data;                             // source_dma_descriptor_slave_agent:rp_data -> router_006:sink_data
	wire          source_dma_descriptor_slave_agent_rp_ready;                            // router_006:sink_ready -> source_dma_descriptor_slave_agent:rp_ready
	wire          source_dma_descriptor_slave_agent_rp_startofpacket;                    // source_dma_descriptor_slave_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire          source_dma_descriptor_slave_agent_rp_endofpacket;                      // source_dma_descriptor_slave_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          sink_dma_descriptor_slave_agent_rp_valid;                              // sink_dma_descriptor_slave_agent:rp_valid -> router_007:sink_valid
	wire  [229:0] sink_dma_descriptor_slave_agent_rp_data;                               // sink_dma_descriptor_slave_agent:rp_data -> router_007:sink_data
	wire          sink_dma_descriptor_slave_agent_rp_ready;                              // router_007:sink_ready -> sink_dma_descriptor_slave_agent:rp_ready
	wire          sink_dma_descriptor_slave_agent_rp_startofpacket;                      // sink_dma_descriptor_slave_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire          sink_dma_descriptor_slave_agent_rp_endofpacket;                        // sink_dma_descriptor_slave_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire          test_source_ram_s1_agent_rp_valid;                                     // test_source_ram_s1_agent:rp_valid -> router_008:sink_valid
	wire  [121:0] test_source_ram_s1_agent_rp_data;                                      // test_source_ram_s1_agent:rp_data -> router_008:sink_data
	wire          test_source_ram_s1_agent_rp_ready;                                     // router_008:sink_ready -> test_source_ram_s1_agent:rp_ready
	wire          test_source_ram_s1_agent_rp_startofpacket;                             // test_source_ram_s1_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire          test_source_ram_s1_agent_rp_endofpacket;                               // test_source_ram_s1_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire          router_008_src_valid;                                                  // router_008:src_valid -> rsp_demux_004:sink_valid
	wire  [121:0] router_008_src_data;                                                   // router_008:src_data -> rsp_demux_004:sink_data
	wire          router_008_src_ready;                                                  // rsp_demux_004:sink_ready -> router_008:src_ready
	wire    [5:0] router_008_src_channel;                                                // router_008:src_channel -> rsp_demux_004:sink_channel
	wire          router_008_src_startofpacket;                                          // router_008:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_008_src_endofpacket;                                            // router_008:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          test_sink_ram_s1_agent_rp_valid;                                       // test_sink_ram_s1_agent:rp_valid -> router_009:sink_valid
	wire  [121:0] test_sink_ram_s1_agent_rp_data;                                        // test_sink_ram_s1_agent:rp_data -> router_009:sink_data
	wire          test_sink_ram_s1_agent_rp_ready;                                       // router_009:sink_ready -> test_sink_ram_s1_agent:rp_ready
	wire          test_sink_ram_s1_agent_rp_startofpacket;                               // test_sink_ram_s1_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire          test_sink_ram_s1_agent_rp_endofpacket;                                 // test_sink_ram_s1_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire          router_009_src_valid;                                                  // router_009:src_valid -> rsp_demux_005:sink_valid
	wire  [121:0] router_009_src_data;                                                   // router_009:src_data -> rsp_demux_005:sink_data
	wire          router_009_src_ready;                                                  // rsp_demux_005:sink_ready -> router_009:src_ready
	wire    [5:0] router_009_src_channel;                                                // router_009:src_channel -> rsp_demux_005:sink_channel
	wire          router_009_src_startofpacket;                                          // router_009:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_009_src_endofpacket;                                            // router_009:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          router_src_valid;                                                      // router:src_valid -> mm_master_bfm_0_m0_limiter:cmd_sink_valid
	wire  [121:0] router_src_data;                                                       // router:src_data -> mm_master_bfm_0_m0_limiter:cmd_sink_data
	wire          router_src_ready;                                                      // mm_master_bfm_0_m0_limiter:cmd_sink_ready -> router:src_ready
	wire    [5:0] router_src_channel;                                                    // router:src_channel -> mm_master_bfm_0_m0_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                              // router:src_startofpacket -> mm_master_bfm_0_m0_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                                // router:src_endofpacket -> mm_master_bfm_0_m0_limiter:cmd_sink_endofpacket
	wire  [121:0] mm_master_bfm_0_m0_limiter_cmd_src_data;                               // mm_master_bfm_0_m0_limiter:cmd_src_data -> cmd_demux:sink_data
	wire          mm_master_bfm_0_m0_limiter_cmd_src_ready;                              // cmd_demux:sink_ready -> mm_master_bfm_0_m0_limiter:cmd_src_ready
	wire    [5:0] mm_master_bfm_0_m0_limiter_cmd_src_channel;                            // mm_master_bfm_0_m0_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          mm_master_bfm_0_m0_limiter_cmd_src_startofpacket;                      // mm_master_bfm_0_m0_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire          mm_master_bfm_0_m0_limiter_cmd_src_endofpacket;                        // mm_master_bfm_0_m0_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                     // rsp_mux:src_valid -> mm_master_bfm_0_m0_limiter:rsp_sink_valid
	wire  [121:0] rsp_mux_src_data;                                                      // rsp_mux:src_data -> mm_master_bfm_0_m0_limiter:rsp_sink_data
	wire          rsp_mux_src_ready;                                                     // mm_master_bfm_0_m0_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire    [5:0] rsp_mux_src_channel;                                                   // rsp_mux:src_channel -> mm_master_bfm_0_m0_limiter:rsp_sink_channel
	wire          rsp_mux_src_startofpacket;                                             // rsp_mux:src_startofpacket -> mm_master_bfm_0_m0_limiter:rsp_sink_startofpacket
	wire          rsp_mux_src_endofpacket;                                               // rsp_mux:src_endofpacket -> mm_master_bfm_0_m0_limiter:rsp_sink_endofpacket
	wire          mm_master_bfm_0_m0_limiter_rsp_src_valid;                              // mm_master_bfm_0_m0_limiter:rsp_src_valid -> mm_master_bfm_0_m0_agent:rp_valid
	wire  [121:0] mm_master_bfm_0_m0_limiter_rsp_src_data;                               // mm_master_bfm_0_m0_limiter:rsp_src_data -> mm_master_bfm_0_m0_agent:rp_data
	wire          mm_master_bfm_0_m0_limiter_rsp_src_ready;                              // mm_master_bfm_0_m0_agent:rp_ready -> mm_master_bfm_0_m0_limiter:rsp_src_ready
	wire    [5:0] mm_master_bfm_0_m0_limiter_rsp_src_channel;                            // mm_master_bfm_0_m0_limiter:rsp_src_channel -> mm_master_bfm_0_m0_agent:rp_channel
	wire          mm_master_bfm_0_m0_limiter_rsp_src_startofpacket;                      // mm_master_bfm_0_m0_limiter:rsp_src_startofpacket -> mm_master_bfm_0_m0_agent:rp_startofpacket
	wire          mm_master_bfm_0_m0_limiter_rsp_src_endofpacket;                        // mm_master_bfm_0_m0_limiter:rsp_src_endofpacket -> mm_master_bfm_0_m0_agent:rp_endofpacket
	wire          router_001_src_valid;                                                  // router_001:src_valid -> jtag_master_master_limiter:cmd_sink_valid
	wire  [121:0] router_001_src_data;                                                   // router_001:src_data -> jtag_master_master_limiter:cmd_sink_data
	wire          router_001_src_ready;                                                  // jtag_master_master_limiter:cmd_sink_ready -> router_001:src_ready
	wire    [5:0] router_001_src_channel;                                                // router_001:src_channel -> jtag_master_master_limiter:cmd_sink_channel
	wire          router_001_src_startofpacket;                                          // router_001:src_startofpacket -> jtag_master_master_limiter:cmd_sink_startofpacket
	wire          router_001_src_endofpacket;                                            // router_001:src_endofpacket -> jtag_master_master_limiter:cmd_sink_endofpacket
	wire  [121:0] jtag_master_master_limiter_cmd_src_data;                               // jtag_master_master_limiter:cmd_src_data -> cmd_demux_001:sink_data
	wire          jtag_master_master_limiter_cmd_src_ready;                              // cmd_demux_001:sink_ready -> jtag_master_master_limiter:cmd_src_ready
	wire    [5:0] jtag_master_master_limiter_cmd_src_channel;                            // jtag_master_master_limiter:cmd_src_channel -> cmd_demux_001:sink_channel
	wire          jtag_master_master_limiter_cmd_src_startofpacket;                      // jtag_master_master_limiter:cmd_src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          jtag_master_master_limiter_cmd_src_endofpacket;                        // jtag_master_master_limiter:cmd_src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          rsp_mux_001_src_valid;                                                 // rsp_mux_001:src_valid -> jtag_master_master_limiter:rsp_sink_valid
	wire  [121:0] rsp_mux_001_src_data;                                                  // rsp_mux_001:src_data -> jtag_master_master_limiter:rsp_sink_data
	wire          rsp_mux_001_src_ready;                                                 // jtag_master_master_limiter:rsp_sink_ready -> rsp_mux_001:src_ready
	wire    [5:0] rsp_mux_001_src_channel;                                               // rsp_mux_001:src_channel -> jtag_master_master_limiter:rsp_sink_channel
	wire          rsp_mux_001_src_startofpacket;                                         // rsp_mux_001:src_startofpacket -> jtag_master_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                           // rsp_mux_001:src_endofpacket -> jtag_master_master_limiter:rsp_sink_endofpacket
	wire          jtag_master_master_limiter_rsp_src_valid;                              // jtag_master_master_limiter:rsp_src_valid -> jtag_master_master_agent:rp_valid
	wire  [121:0] jtag_master_master_limiter_rsp_src_data;                               // jtag_master_master_limiter:rsp_src_data -> jtag_master_master_agent:rp_data
	wire          jtag_master_master_limiter_rsp_src_ready;                              // jtag_master_master_agent:rp_ready -> jtag_master_master_limiter:rsp_src_ready
	wire    [5:0] jtag_master_master_limiter_rsp_src_channel;                            // jtag_master_master_limiter:rsp_src_channel -> jtag_master_master_agent:rp_channel
	wire          jtag_master_master_limiter_rsp_src_startofpacket;                      // jtag_master_master_limiter:rsp_src_startofpacket -> jtag_master_master_agent:rp_startofpacket
	wire          jtag_master_master_limiter_rsp_src_endofpacket;                        // jtag_master_master_limiter:rsp_src_endofpacket -> jtag_master_master_agent:rp_endofpacket
	wire          cmd_mux_src_valid;                                                     // cmd_mux:src_valid -> source_dma_csr_burst_adapter:sink0_valid
	wire  [121:0] cmd_mux_src_data;                                                      // cmd_mux:src_data -> source_dma_csr_burst_adapter:sink0_data
	wire          cmd_mux_src_ready;                                                     // source_dma_csr_burst_adapter:sink0_ready -> cmd_mux:src_ready
	wire    [5:0] cmd_mux_src_channel;                                                   // cmd_mux:src_channel -> source_dma_csr_burst_adapter:sink0_channel
	wire          cmd_mux_src_startofpacket;                                             // cmd_mux:src_startofpacket -> source_dma_csr_burst_adapter:sink0_startofpacket
	wire          cmd_mux_src_endofpacket;                                               // cmd_mux:src_endofpacket -> source_dma_csr_burst_adapter:sink0_endofpacket
	wire          source_dma_csr_burst_adapter_source0_valid;                            // source_dma_csr_burst_adapter:source0_valid -> source_dma_csr_agent:cp_valid
	wire  [121:0] source_dma_csr_burst_adapter_source0_data;                             // source_dma_csr_burst_adapter:source0_data -> source_dma_csr_agent:cp_data
	wire          source_dma_csr_burst_adapter_source0_ready;                            // source_dma_csr_agent:cp_ready -> source_dma_csr_burst_adapter:source0_ready
	wire    [5:0] source_dma_csr_burst_adapter_source0_channel;                          // source_dma_csr_burst_adapter:source0_channel -> source_dma_csr_agent:cp_channel
	wire          source_dma_csr_burst_adapter_source0_startofpacket;                    // source_dma_csr_burst_adapter:source0_startofpacket -> source_dma_csr_agent:cp_startofpacket
	wire          source_dma_csr_burst_adapter_source0_endofpacket;                      // source_dma_csr_burst_adapter:source0_endofpacket -> source_dma_csr_agent:cp_endofpacket
	wire          cmd_mux_001_src_valid;                                                 // cmd_mux_001:src_valid -> sink_dma_csr_burst_adapter:sink0_valid
	wire  [121:0] cmd_mux_001_src_data;                                                  // cmd_mux_001:src_data -> sink_dma_csr_burst_adapter:sink0_data
	wire          cmd_mux_001_src_ready;                                                 // sink_dma_csr_burst_adapter:sink0_ready -> cmd_mux_001:src_ready
	wire    [5:0] cmd_mux_001_src_channel;                                               // cmd_mux_001:src_channel -> sink_dma_csr_burst_adapter:sink0_channel
	wire          cmd_mux_001_src_startofpacket;                                         // cmd_mux_001:src_startofpacket -> sink_dma_csr_burst_adapter:sink0_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                           // cmd_mux_001:src_endofpacket -> sink_dma_csr_burst_adapter:sink0_endofpacket
	wire          sink_dma_csr_burst_adapter_source0_valid;                              // sink_dma_csr_burst_adapter:source0_valid -> sink_dma_csr_agent:cp_valid
	wire  [121:0] sink_dma_csr_burst_adapter_source0_data;                               // sink_dma_csr_burst_adapter:source0_data -> sink_dma_csr_agent:cp_data
	wire          sink_dma_csr_burst_adapter_source0_ready;                              // sink_dma_csr_agent:cp_ready -> sink_dma_csr_burst_adapter:source0_ready
	wire    [5:0] sink_dma_csr_burst_adapter_source0_channel;                            // sink_dma_csr_burst_adapter:source0_channel -> sink_dma_csr_agent:cp_channel
	wire          sink_dma_csr_burst_adapter_source0_startofpacket;                      // sink_dma_csr_burst_adapter:source0_startofpacket -> sink_dma_csr_agent:cp_startofpacket
	wire          sink_dma_csr_burst_adapter_source0_endofpacket;                        // sink_dma_csr_burst_adapter:source0_endofpacket -> sink_dma_csr_agent:cp_endofpacket
	wire          source_dma_descriptor_slave_burst_adapter_source0_valid;               // source_dma_descriptor_slave_burst_adapter:source0_valid -> source_dma_descriptor_slave_agent:cp_valid
	wire  [229:0] source_dma_descriptor_slave_burst_adapter_source0_data;                // source_dma_descriptor_slave_burst_adapter:source0_data -> source_dma_descriptor_slave_agent:cp_data
	wire          source_dma_descriptor_slave_burst_adapter_source0_ready;               // source_dma_descriptor_slave_agent:cp_ready -> source_dma_descriptor_slave_burst_adapter:source0_ready
	wire    [5:0] source_dma_descriptor_slave_burst_adapter_source0_channel;             // source_dma_descriptor_slave_burst_adapter:source0_channel -> source_dma_descriptor_slave_agent:cp_channel
	wire          source_dma_descriptor_slave_burst_adapter_source0_startofpacket;       // source_dma_descriptor_slave_burst_adapter:source0_startofpacket -> source_dma_descriptor_slave_agent:cp_startofpacket
	wire          source_dma_descriptor_slave_burst_adapter_source0_endofpacket;         // source_dma_descriptor_slave_burst_adapter:source0_endofpacket -> source_dma_descriptor_slave_agent:cp_endofpacket
	wire          sink_dma_descriptor_slave_burst_adapter_source0_valid;                 // sink_dma_descriptor_slave_burst_adapter:source0_valid -> sink_dma_descriptor_slave_agent:cp_valid
	wire  [229:0] sink_dma_descriptor_slave_burst_adapter_source0_data;                  // sink_dma_descriptor_slave_burst_adapter:source0_data -> sink_dma_descriptor_slave_agent:cp_data
	wire          sink_dma_descriptor_slave_burst_adapter_source0_ready;                 // sink_dma_descriptor_slave_agent:cp_ready -> sink_dma_descriptor_slave_burst_adapter:source0_ready
	wire    [5:0] sink_dma_descriptor_slave_burst_adapter_source0_channel;               // sink_dma_descriptor_slave_burst_adapter:source0_channel -> sink_dma_descriptor_slave_agent:cp_channel
	wire          sink_dma_descriptor_slave_burst_adapter_source0_startofpacket;         // sink_dma_descriptor_slave_burst_adapter:source0_startofpacket -> sink_dma_descriptor_slave_agent:cp_startofpacket
	wire          sink_dma_descriptor_slave_burst_adapter_source0_endofpacket;           // sink_dma_descriptor_slave_burst_adapter:source0_endofpacket -> sink_dma_descriptor_slave_agent:cp_endofpacket
	wire          cmd_mux_004_src_valid;                                                 // cmd_mux_004:src_valid -> test_source_ram_s1_burst_adapter:sink0_valid
	wire  [121:0] cmd_mux_004_src_data;                                                  // cmd_mux_004:src_data -> test_source_ram_s1_burst_adapter:sink0_data
	wire          cmd_mux_004_src_ready;                                                 // test_source_ram_s1_burst_adapter:sink0_ready -> cmd_mux_004:src_ready
	wire    [5:0] cmd_mux_004_src_channel;                                               // cmd_mux_004:src_channel -> test_source_ram_s1_burst_adapter:sink0_channel
	wire          cmd_mux_004_src_startofpacket;                                         // cmd_mux_004:src_startofpacket -> test_source_ram_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                           // cmd_mux_004:src_endofpacket -> test_source_ram_s1_burst_adapter:sink0_endofpacket
	wire          test_source_ram_s1_burst_adapter_source0_valid;                        // test_source_ram_s1_burst_adapter:source0_valid -> test_source_ram_s1_agent:cp_valid
	wire  [121:0] test_source_ram_s1_burst_adapter_source0_data;                         // test_source_ram_s1_burst_adapter:source0_data -> test_source_ram_s1_agent:cp_data
	wire          test_source_ram_s1_burst_adapter_source0_ready;                        // test_source_ram_s1_agent:cp_ready -> test_source_ram_s1_burst_adapter:source0_ready
	wire    [5:0] test_source_ram_s1_burst_adapter_source0_channel;                      // test_source_ram_s1_burst_adapter:source0_channel -> test_source_ram_s1_agent:cp_channel
	wire          test_source_ram_s1_burst_adapter_source0_startofpacket;                // test_source_ram_s1_burst_adapter:source0_startofpacket -> test_source_ram_s1_agent:cp_startofpacket
	wire          test_source_ram_s1_burst_adapter_source0_endofpacket;                  // test_source_ram_s1_burst_adapter:source0_endofpacket -> test_source_ram_s1_agent:cp_endofpacket
	wire          cmd_mux_005_src_valid;                                                 // cmd_mux_005:src_valid -> test_sink_ram_s1_burst_adapter:sink0_valid
	wire  [121:0] cmd_mux_005_src_data;                                                  // cmd_mux_005:src_data -> test_sink_ram_s1_burst_adapter:sink0_data
	wire          cmd_mux_005_src_ready;                                                 // test_sink_ram_s1_burst_adapter:sink0_ready -> cmd_mux_005:src_ready
	wire    [5:0] cmd_mux_005_src_channel;                                               // cmd_mux_005:src_channel -> test_sink_ram_s1_burst_adapter:sink0_channel
	wire          cmd_mux_005_src_startofpacket;                                         // cmd_mux_005:src_startofpacket -> test_sink_ram_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                           // cmd_mux_005:src_endofpacket -> test_sink_ram_s1_burst_adapter:sink0_endofpacket
	wire          test_sink_ram_s1_burst_adapter_source0_valid;                          // test_sink_ram_s1_burst_adapter:source0_valid -> test_sink_ram_s1_agent:cp_valid
	wire  [121:0] test_sink_ram_s1_burst_adapter_source0_data;                           // test_sink_ram_s1_burst_adapter:source0_data -> test_sink_ram_s1_agent:cp_data
	wire          test_sink_ram_s1_burst_adapter_source0_ready;                          // test_sink_ram_s1_agent:cp_ready -> test_sink_ram_s1_burst_adapter:source0_ready
	wire    [5:0] test_sink_ram_s1_burst_adapter_source0_channel;                        // test_sink_ram_s1_burst_adapter:source0_channel -> test_sink_ram_s1_agent:cp_channel
	wire          test_sink_ram_s1_burst_adapter_source0_startofpacket;                  // test_sink_ram_s1_burst_adapter:source0_startofpacket -> test_sink_ram_s1_agent:cp_startofpacket
	wire          test_sink_ram_s1_burst_adapter_source0_endofpacket;                    // test_sink_ram_s1_burst_adapter:source0_endofpacket -> test_sink_ram_s1_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                                  // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [121:0] cmd_demux_src0_data;                                                   // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                  // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire    [5:0] cmd_demux_src0_channel;                                                // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                          // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                            // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                  // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [121:0] cmd_demux_src1_data;                                                   // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                                  // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire    [5:0] cmd_demux_src1_channel;                                                // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                          // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                            // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                                  // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [121:0] cmd_demux_src2_data;                                                   // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_src2_ready;                                                  // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire    [5:0] cmd_demux_src2_channel;                                                // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_startofpacket;                                          // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_src2_endofpacket;                                            // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                                  // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [121:0] cmd_demux_src3_data;                                                   // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_src3_ready;                                                  // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire    [5:0] cmd_demux_src3_channel;                                                // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_src3_startofpacket;                                          // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_src3_endofpacket;                                            // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                                  // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire  [121:0] cmd_demux_src4_data;                                                   // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire          cmd_demux_src4_ready;                                                  // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire    [5:0] cmd_demux_src4_channel;                                                // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_src4_startofpacket;                                          // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          cmd_demux_src4_endofpacket;                                            // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_src5_valid;                                                  // cmd_demux:src5_valid -> cmd_mux_005:sink0_valid
	wire  [121:0] cmd_demux_src5_data;                                                   // cmd_demux:src5_data -> cmd_mux_005:sink0_data
	wire          cmd_demux_src5_ready;                                                  // cmd_mux_005:sink0_ready -> cmd_demux:src5_ready
	wire    [5:0] cmd_demux_src5_channel;                                                // cmd_demux:src5_channel -> cmd_mux_005:sink0_channel
	wire          cmd_demux_src5_startofpacket;                                          // cmd_demux:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          cmd_demux_src5_endofpacket;                                            // cmd_demux:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                              // cmd_demux_001:src0_valid -> cmd_mux:sink1_valid
	wire  [121:0] cmd_demux_001_src0_data;                                               // cmd_demux_001:src0_data -> cmd_mux:sink1_data
	wire          cmd_demux_001_src0_ready;                                              // cmd_mux:sink1_ready -> cmd_demux_001:src0_ready
	wire    [5:0] cmd_demux_001_src0_channel;                                            // cmd_demux_001:src0_channel -> cmd_mux:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                      // cmd_demux_001:src0_startofpacket -> cmd_mux:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                        // cmd_demux_001:src0_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_001_src1_valid;                                              // cmd_demux_001:src1_valid -> cmd_mux_001:sink1_valid
	wire  [121:0] cmd_demux_001_src1_data;                                               // cmd_demux_001:src1_data -> cmd_mux_001:sink1_data
	wire          cmd_demux_001_src1_ready;                                              // cmd_mux_001:sink1_ready -> cmd_demux_001:src1_ready
	wire    [5:0] cmd_demux_001_src1_channel;                                            // cmd_demux_001:src1_channel -> cmd_mux_001:sink1_channel
	wire          cmd_demux_001_src1_startofpacket;                                      // cmd_demux_001:src1_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                        // cmd_demux_001:src1_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire          cmd_demux_001_src2_valid;                                              // cmd_demux_001:src2_valid -> cmd_mux_002:sink1_valid
	wire  [121:0] cmd_demux_001_src2_data;                                               // cmd_demux_001:src2_data -> cmd_mux_002:sink1_data
	wire          cmd_demux_001_src2_ready;                                              // cmd_mux_002:sink1_ready -> cmd_demux_001:src2_ready
	wire    [5:0] cmd_demux_001_src2_channel;                                            // cmd_demux_001:src2_channel -> cmd_mux_002:sink1_channel
	wire          cmd_demux_001_src2_startofpacket;                                      // cmd_demux_001:src2_startofpacket -> cmd_mux_002:sink1_startofpacket
	wire          cmd_demux_001_src2_endofpacket;                                        // cmd_demux_001:src2_endofpacket -> cmd_mux_002:sink1_endofpacket
	wire          cmd_demux_001_src3_valid;                                              // cmd_demux_001:src3_valid -> cmd_mux_003:sink1_valid
	wire  [121:0] cmd_demux_001_src3_data;                                               // cmd_demux_001:src3_data -> cmd_mux_003:sink1_data
	wire          cmd_demux_001_src3_ready;                                              // cmd_mux_003:sink1_ready -> cmd_demux_001:src3_ready
	wire    [5:0] cmd_demux_001_src3_channel;                                            // cmd_demux_001:src3_channel -> cmd_mux_003:sink1_channel
	wire          cmd_demux_001_src3_startofpacket;                                      // cmd_demux_001:src3_startofpacket -> cmd_mux_003:sink1_startofpacket
	wire          cmd_demux_001_src3_endofpacket;                                        // cmd_demux_001:src3_endofpacket -> cmd_mux_003:sink1_endofpacket
	wire          cmd_demux_001_src4_valid;                                              // cmd_demux_001:src4_valid -> cmd_mux_004:sink1_valid
	wire  [121:0] cmd_demux_001_src4_data;                                               // cmd_demux_001:src4_data -> cmd_mux_004:sink1_data
	wire          cmd_demux_001_src4_ready;                                              // cmd_mux_004:sink1_ready -> cmd_demux_001:src4_ready
	wire    [5:0] cmd_demux_001_src4_channel;                                            // cmd_demux_001:src4_channel -> cmd_mux_004:sink1_channel
	wire          cmd_demux_001_src4_startofpacket;                                      // cmd_demux_001:src4_startofpacket -> cmd_mux_004:sink1_startofpacket
	wire          cmd_demux_001_src4_endofpacket;                                        // cmd_demux_001:src4_endofpacket -> cmd_mux_004:sink1_endofpacket
	wire          cmd_demux_001_src5_valid;                                              // cmd_demux_001:src5_valid -> cmd_mux_005:sink1_valid
	wire  [121:0] cmd_demux_001_src5_data;                                               // cmd_demux_001:src5_data -> cmd_mux_005:sink1_data
	wire          cmd_demux_001_src5_ready;                                              // cmd_mux_005:sink1_ready -> cmd_demux_001:src5_ready
	wire    [5:0] cmd_demux_001_src5_channel;                                            // cmd_demux_001:src5_channel -> cmd_mux_005:sink1_channel
	wire          cmd_demux_001_src5_startofpacket;                                      // cmd_demux_001:src5_startofpacket -> cmd_mux_005:sink1_startofpacket
	wire          cmd_demux_001_src5_endofpacket;                                        // cmd_demux_001:src5_endofpacket -> cmd_mux_005:sink1_endofpacket
	wire          cmd_demux_002_src0_valid;                                              // cmd_demux_002:src0_valid -> cmd_mux_005:sink2_valid
	wire  [121:0] cmd_demux_002_src0_data;                                               // cmd_demux_002:src0_data -> cmd_mux_005:sink2_data
	wire          cmd_demux_002_src0_ready;                                              // cmd_mux_005:sink2_ready -> cmd_demux_002:src0_ready
	wire    [5:0] cmd_demux_002_src0_channel;                                            // cmd_demux_002:src0_channel -> cmd_mux_005:sink2_channel
	wire          cmd_demux_002_src0_startofpacket;                                      // cmd_demux_002:src0_startofpacket -> cmd_mux_005:sink2_startofpacket
	wire          cmd_demux_002_src0_endofpacket;                                        // cmd_demux_002:src0_endofpacket -> cmd_mux_005:sink2_endofpacket
	wire          cmd_demux_003_src0_valid;                                              // cmd_demux_003:src0_valid -> cmd_mux_004:sink2_valid
	wire  [121:0] cmd_demux_003_src0_data;                                               // cmd_demux_003:src0_data -> cmd_mux_004:sink2_data
	wire          cmd_demux_003_src0_ready;                                              // cmd_mux_004:sink2_ready -> cmd_demux_003:src0_ready
	wire    [5:0] cmd_demux_003_src0_channel;                                            // cmd_demux_003:src0_channel -> cmd_mux_004:sink2_channel
	wire          cmd_demux_003_src0_startofpacket;                                      // cmd_demux_003:src0_startofpacket -> cmd_mux_004:sink2_startofpacket
	wire          cmd_demux_003_src0_endofpacket;                                        // cmd_demux_003:src0_endofpacket -> cmd_mux_004:sink2_endofpacket
	wire          rsp_demux_src0_valid;                                                  // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [121:0] rsp_demux_src0_data;                                                   // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                  // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire    [5:0] rsp_demux_src0_channel;                                                // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                          // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                            // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                                  // rsp_demux:src1_valid -> rsp_mux_001:sink0_valid
	wire  [121:0] rsp_demux_src1_data;                                                   // rsp_demux:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_src1_ready;                                                  // rsp_mux_001:sink0_ready -> rsp_demux:src1_ready
	wire    [5:0] rsp_demux_src1_channel;                                                // rsp_demux:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_src1_startofpacket;                                          // rsp_demux:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_src1_endofpacket;                                            // rsp_demux:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                              // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [121:0] rsp_demux_001_src0_data;                                               // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                              // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire    [5:0] rsp_demux_001_src0_channel;                                            // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                      // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                        // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_001_src1_valid;                                              // rsp_demux_001:src1_valid -> rsp_mux_001:sink1_valid
	wire  [121:0] rsp_demux_001_src1_data;                                               // rsp_demux_001:src1_data -> rsp_mux_001:sink1_data
	wire          rsp_demux_001_src1_ready;                                              // rsp_mux_001:sink1_ready -> rsp_demux_001:src1_ready
	wire    [5:0] rsp_demux_001_src1_channel;                                            // rsp_demux_001:src1_channel -> rsp_mux_001:sink1_channel
	wire          rsp_demux_001_src1_startofpacket;                                      // rsp_demux_001:src1_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          rsp_demux_001_src1_endofpacket;                                        // rsp_demux_001:src1_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                              // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [121:0] rsp_demux_002_src0_data;                                               // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire          rsp_demux_002_src0_ready;                                              // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire    [5:0] rsp_demux_002_src0_channel;                                            // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                      // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                        // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_002_src1_valid;                                              // rsp_demux_002:src1_valid -> rsp_mux_001:sink2_valid
	wire  [121:0] rsp_demux_002_src1_data;                                               // rsp_demux_002:src1_data -> rsp_mux_001:sink2_data
	wire          rsp_demux_002_src1_ready;                                              // rsp_mux_001:sink2_ready -> rsp_demux_002:src1_ready
	wire    [5:0] rsp_demux_002_src1_channel;                                            // rsp_demux_002:src1_channel -> rsp_mux_001:sink2_channel
	wire          rsp_demux_002_src1_startofpacket;                                      // rsp_demux_002:src1_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire          rsp_demux_002_src1_endofpacket;                                        // rsp_demux_002:src1_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          rsp_demux_003_src0_valid;                                              // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [121:0] rsp_demux_003_src0_data;                                               // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire          rsp_demux_003_src0_ready;                                              // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire    [5:0] rsp_demux_003_src0_channel;                                            // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire          rsp_demux_003_src0_startofpacket;                                      // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                        // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_003_src1_valid;                                              // rsp_demux_003:src1_valid -> rsp_mux_001:sink3_valid
	wire  [121:0] rsp_demux_003_src1_data;                                               // rsp_demux_003:src1_data -> rsp_mux_001:sink3_data
	wire          rsp_demux_003_src1_ready;                                              // rsp_mux_001:sink3_ready -> rsp_demux_003:src1_ready
	wire    [5:0] rsp_demux_003_src1_channel;                                            // rsp_demux_003:src1_channel -> rsp_mux_001:sink3_channel
	wire          rsp_demux_003_src1_startofpacket;                                      // rsp_demux_003:src1_startofpacket -> rsp_mux_001:sink3_startofpacket
	wire          rsp_demux_003_src1_endofpacket;                                        // rsp_demux_003:src1_endofpacket -> rsp_mux_001:sink3_endofpacket
	wire          rsp_demux_004_src0_valid;                                              // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire  [121:0] rsp_demux_004_src0_data;                                               // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire          rsp_demux_004_src0_ready;                                              // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire    [5:0] rsp_demux_004_src0_channel;                                            // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire          rsp_demux_004_src0_startofpacket;                                      // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                        // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_004_src1_valid;                                              // rsp_demux_004:src1_valid -> rsp_mux_001:sink4_valid
	wire  [121:0] rsp_demux_004_src1_data;                                               // rsp_demux_004:src1_data -> rsp_mux_001:sink4_data
	wire          rsp_demux_004_src1_ready;                                              // rsp_mux_001:sink4_ready -> rsp_demux_004:src1_ready
	wire    [5:0] rsp_demux_004_src1_channel;                                            // rsp_demux_004:src1_channel -> rsp_mux_001:sink4_channel
	wire          rsp_demux_004_src1_startofpacket;                                      // rsp_demux_004:src1_startofpacket -> rsp_mux_001:sink4_startofpacket
	wire          rsp_demux_004_src1_endofpacket;                                        // rsp_demux_004:src1_endofpacket -> rsp_mux_001:sink4_endofpacket
	wire          rsp_demux_004_src2_valid;                                              // rsp_demux_004:src2_valid -> rsp_mux_003:sink0_valid
	wire  [121:0] rsp_demux_004_src2_data;                                               // rsp_demux_004:src2_data -> rsp_mux_003:sink0_data
	wire          rsp_demux_004_src2_ready;                                              // rsp_mux_003:sink0_ready -> rsp_demux_004:src2_ready
	wire    [5:0] rsp_demux_004_src2_channel;                                            // rsp_demux_004:src2_channel -> rsp_mux_003:sink0_channel
	wire          rsp_demux_004_src2_startofpacket;                                      // rsp_demux_004:src2_startofpacket -> rsp_mux_003:sink0_startofpacket
	wire          rsp_demux_004_src2_endofpacket;                                        // rsp_demux_004:src2_endofpacket -> rsp_mux_003:sink0_endofpacket
	wire          rsp_demux_005_src0_valid;                                              // rsp_demux_005:src0_valid -> rsp_mux:sink5_valid
	wire  [121:0] rsp_demux_005_src0_data;                                               // rsp_demux_005:src0_data -> rsp_mux:sink5_data
	wire          rsp_demux_005_src0_ready;                                              // rsp_mux:sink5_ready -> rsp_demux_005:src0_ready
	wire    [5:0] rsp_demux_005_src0_channel;                                            // rsp_demux_005:src0_channel -> rsp_mux:sink5_channel
	wire          rsp_demux_005_src0_startofpacket;                                      // rsp_demux_005:src0_startofpacket -> rsp_mux:sink5_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                        // rsp_demux_005:src0_endofpacket -> rsp_mux:sink5_endofpacket
	wire          rsp_demux_005_src1_valid;                                              // rsp_demux_005:src1_valid -> rsp_mux_001:sink5_valid
	wire  [121:0] rsp_demux_005_src1_data;                                               // rsp_demux_005:src1_data -> rsp_mux_001:sink5_data
	wire          rsp_demux_005_src1_ready;                                              // rsp_mux_001:sink5_ready -> rsp_demux_005:src1_ready
	wire    [5:0] rsp_demux_005_src1_channel;                                            // rsp_demux_005:src1_channel -> rsp_mux_001:sink5_channel
	wire          rsp_demux_005_src1_startofpacket;                                      // rsp_demux_005:src1_startofpacket -> rsp_mux_001:sink5_startofpacket
	wire          rsp_demux_005_src1_endofpacket;                                        // rsp_demux_005:src1_endofpacket -> rsp_mux_001:sink5_endofpacket
	wire          rsp_demux_005_src2_valid;                                              // rsp_demux_005:src2_valid -> rsp_mux_002:sink0_valid
	wire  [121:0] rsp_demux_005_src2_data;                                               // rsp_demux_005:src2_data -> rsp_mux_002:sink0_data
	wire          rsp_demux_005_src2_ready;                                              // rsp_mux_002:sink0_ready -> rsp_demux_005:src2_ready
	wire    [5:0] rsp_demux_005_src2_channel;                                            // rsp_demux_005:src2_channel -> rsp_mux_002:sink0_channel
	wire          rsp_demux_005_src2_startofpacket;                                      // rsp_demux_005:src2_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire          rsp_demux_005_src2_endofpacket;                                        // rsp_demux_005:src2_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire          router_006_src_valid;                                                  // router_006:src_valid -> source_dma_descriptor_slave_rsp_width_adapter:in_valid
	wire  [229:0] router_006_src_data;                                                   // router_006:src_data -> source_dma_descriptor_slave_rsp_width_adapter:in_data
	wire          router_006_src_ready;                                                  // source_dma_descriptor_slave_rsp_width_adapter:in_ready -> router_006:src_ready
	wire    [5:0] router_006_src_channel;                                                // router_006:src_channel -> source_dma_descriptor_slave_rsp_width_adapter:in_channel
	wire          router_006_src_startofpacket;                                          // router_006:src_startofpacket -> source_dma_descriptor_slave_rsp_width_adapter:in_startofpacket
	wire          router_006_src_endofpacket;                                            // router_006:src_endofpacket -> source_dma_descriptor_slave_rsp_width_adapter:in_endofpacket
	wire          source_dma_descriptor_slave_rsp_width_adapter_src_valid;               // source_dma_descriptor_slave_rsp_width_adapter:out_valid -> rsp_demux_002:sink_valid
	wire  [121:0] source_dma_descriptor_slave_rsp_width_adapter_src_data;                // source_dma_descriptor_slave_rsp_width_adapter:out_data -> rsp_demux_002:sink_data
	wire          source_dma_descriptor_slave_rsp_width_adapter_src_ready;               // rsp_demux_002:sink_ready -> source_dma_descriptor_slave_rsp_width_adapter:out_ready
	wire    [5:0] source_dma_descriptor_slave_rsp_width_adapter_src_channel;             // source_dma_descriptor_slave_rsp_width_adapter:out_channel -> rsp_demux_002:sink_channel
	wire          source_dma_descriptor_slave_rsp_width_adapter_src_startofpacket;       // source_dma_descriptor_slave_rsp_width_adapter:out_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          source_dma_descriptor_slave_rsp_width_adapter_src_endofpacket;         // source_dma_descriptor_slave_rsp_width_adapter:out_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          router_007_src_valid;                                                  // router_007:src_valid -> sink_dma_descriptor_slave_rsp_width_adapter:in_valid
	wire  [229:0] router_007_src_data;                                                   // router_007:src_data -> sink_dma_descriptor_slave_rsp_width_adapter:in_data
	wire          router_007_src_ready;                                                  // sink_dma_descriptor_slave_rsp_width_adapter:in_ready -> router_007:src_ready
	wire    [5:0] router_007_src_channel;                                                // router_007:src_channel -> sink_dma_descriptor_slave_rsp_width_adapter:in_channel
	wire          router_007_src_startofpacket;                                          // router_007:src_startofpacket -> sink_dma_descriptor_slave_rsp_width_adapter:in_startofpacket
	wire          router_007_src_endofpacket;                                            // router_007:src_endofpacket -> sink_dma_descriptor_slave_rsp_width_adapter:in_endofpacket
	wire          sink_dma_descriptor_slave_rsp_width_adapter_src_valid;                 // sink_dma_descriptor_slave_rsp_width_adapter:out_valid -> rsp_demux_003:sink_valid
	wire  [121:0] sink_dma_descriptor_slave_rsp_width_adapter_src_data;                  // sink_dma_descriptor_slave_rsp_width_adapter:out_data -> rsp_demux_003:sink_data
	wire          sink_dma_descriptor_slave_rsp_width_adapter_src_ready;                 // rsp_demux_003:sink_ready -> sink_dma_descriptor_slave_rsp_width_adapter:out_ready
	wire    [5:0] sink_dma_descriptor_slave_rsp_width_adapter_src_channel;               // sink_dma_descriptor_slave_rsp_width_adapter:out_channel -> rsp_demux_003:sink_channel
	wire          sink_dma_descriptor_slave_rsp_width_adapter_src_startofpacket;         // sink_dma_descriptor_slave_rsp_width_adapter:out_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          sink_dma_descriptor_slave_rsp_width_adapter_src_endofpacket;           // sink_dma_descriptor_slave_rsp_width_adapter:out_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          cmd_mux_002_src_valid;                                                 // cmd_mux_002:src_valid -> source_dma_descriptor_slave_cmd_width_adapter:in_valid
	wire  [121:0] cmd_mux_002_src_data;                                                  // cmd_mux_002:src_data -> source_dma_descriptor_slave_cmd_width_adapter:in_data
	wire          cmd_mux_002_src_ready;                                                 // source_dma_descriptor_slave_cmd_width_adapter:in_ready -> cmd_mux_002:src_ready
	wire    [5:0] cmd_mux_002_src_channel;                                               // cmd_mux_002:src_channel -> source_dma_descriptor_slave_cmd_width_adapter:in_channel
	wire          cmd_mux_002_src_startofpacket;                                         // cmd_mux_002:src_startofpacket -> source_dma_descriptor_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                           // cmd_mux_002:src_endofpacket -> source_dma_descriptor_slave_cmd_width_adapter:in_endofpacket
	wire          source_dma_descriptor_slave_cmd_width_adapter_src_valid;               // source_dma_descriptor_slave_cmd_width_adapter:out_valid -> source_dma_descriptor_slave_burst_adapter:sink0_valid
	wire  [229:0] source_dma_descriptor_slave_cmd_width_adapter_src_data;                // source_dma_descriptor_slave_cmd_width_adapter:out_data -> source_dma_descriptor_slave_burst_adapter:sink0_data
	wire          source_dma_descriptor_slave_cmd_width_adapter_src_ready;               // source_dma_descriptor_slave_burst_adapter:sink0_ready -> source_dma_descriptor_slave_cmd_width_adapter:out_ready
	wire    [5:0] source_dma_descriptor_slave_cmd_width_adapter_src_channel;             // source_dma_descriptor_slave_cmd_width_adapter:out_channel -> source_dma_descriptor_slave_burst_adapter:sink0_channel
	wire          source_dma_descriptor_slave_cmd_width_adapter_src_startofpacket;       // source_dma_descriptor_slave_cmd_width_adapter:out_startofpacket -> source_dma_descriptor_slave_burst_adapter:sink0_startofpacket
	wire          source_dma_descriptor_slave_cmd_width_adapter_src_endofpacket;         // source_dma_descriptor_slave_cmd_width_adapter:out_endofpacket -> source_dma_descriptor_slave_burst_adapter:sink0_endofpacket
	wire          cmd_mux_003_src_valid;                                                 // cmd_mux_003:src_valid -> sink_dma_descriptor_slave_cmd_width_adapter:in_valid
	wire  [121:0] cmd_mux_003_src_data;                                                  // cmd_mux_003:src_data -> sink_dma_descriptor_slave_cmd_width_adapter:in_data
	wire          cmd_mux_003_src_ready;                                                 // sink_dma_descriptor_slave_cmd_width_adapter:in_ready -> cmd_mux_003:src_ready
	wire    [5:0] cmd_mux_003_src_channel;                                               // cmd_mux_003:src_channel -> sink_dma_descriptor_slave_cmd_width_adapter:in_channel
	wire          cmd_mux_003_src_startofpacket;                                         // cmd_mux_003:src_startofpacket -> sink_dma_descriptor_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                           // cmd_mux_003:src_endofpacket -> sink_dma_descriptor_slave_cmd_width_adapter:in_endofpacket
	wire          sink_dma_descriptor_slave_cmd_width_adapter_src_valid;                 // sink_dma_descriptor_slave_cmd_width_adapter:out_valid -> sink_dma_descriptor_slave_burst_adapter:sink0_valid
	wire  [229:0] sink_dma_descriptor_slave_cmd_width_adapter_src_data;                  // sink_dma_descriptor_slave_cmd_width_adapter:out_data -> sink_dma_descriptor_slave_burst_adapter:sink0_data
	wire          sink_dma_descriptor_slave_cmd_width_adapter_src_ready;                 // sink_dma_descriptor_slave_burst_adapter:sink0_ready -> sink_dma_descriptor_slave_cmd_width_adapter:out_ready
	wire    [5:0] sink_dma_descriptor_slave_cmd_width_adapter_src_channel;               // sink_dma_descriptor_slave_cmd_width_adapter:out_channel -> sink_dma_descriptor_slave_burst_adapter:sink0_channel
	wire          sink_dma_descriptor_slave_cmd_width_adapter_src_startofpacket;         // sink_dma_descriptor_slave_cmd_width_adapter:out_startofpacket -> sink_dma_descriptor_slave_burst_adapter:sink0_startofpacket
	wire          sink_dma_descriptor_slave_cmd_width_adapter_src_endofpacket;           // sink_dma_descriptor_slave_cmd_width_adapter:out_endofpacket -> sink_dma_descriptor_slave_burst_adapter:sink0_endofpacket
	wire    [5:0] mm_master_bfm_0_m0_limiter_cmd_valid_data;                             // mm_master_bfm_0_m0_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire    [5:0] jtag_master_master_limiter_cmd_valid_data;                             // jtag_master_master_limiter:cmd_src_valid -> cmd_demux_001:sink_valid

	hil_sys_altera_merlin_master_translator_192_lykd4la #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (3),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (5),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0),
		.SYNC_RESET                  (1),
		.WAITREQUEST_ALLOWANCE       (0),
		.USE_OUTPUTENABLE            (0)
	) mm_master_bfm_0_m0_translator (
		.clk                    (clock_in_out_clk_clk),                                                  //   input,   width = 1,                       clk.clk
		.reset                  (mm_master_bfm_0_m0_translator_reset_reset_bridge_in_reset_reset),       //   input,   width = 1,                     reset.reset
		.uav_address            (mm_master_bfm_0_m0_translator_avalon_universal_master_0_address),       //  output,  width = 32, avalon_universal_master_0.address
		.uav_burstcount         (mm_master_bfm_0_m0_translator_avalon_universal_master_0_burstcount),    //  output,   width = 5,                          .burstcount
		.uav_read               (mm_master_bfm_0_m0_translator_avalon_universal_master_0_read),          //  output,   width = 1,                          .read
		.uav_write              (mm_master_bfm_0_m0_translator_avalon_universal_master_0_write),         //  output,   width = 1,                          .write
		.uav_waitrequest        (mm_master_bfm_0_m0_translator_avalon_universal_master_0_waitrequest),   //   input,   width = 1,                          .waitrequest
		.uav_readdatavalid      (mm_master_bfm_0_m0_translator_avalon_universal_master_0_readdatavalid), //   input,   width = 1,                          .readdatavalid
		.uav_byteenable         (mm_master_bfm_0_m0_translator_avalon_universal_master_0_byteenable),    //  output,   width = 4,                          .byteenable
		.uav_readdata           (mm_master_bfm_0_m0_translator_avalon_universal_master_0_readdata),      //   input,  width = 32,                          .readdata
		.uav_writedata          (mm_master_bfm_0_m0_translator_avalon_universal_master_0_writedata),     //  output,  width = 32,                          .writedata
		.uav_lock               (mm_master_bfm_0_m0_translator_avalon_universal_master_0_lock),          //  output,   width = 1,                          .lock
		.uav_debugaccess        (mm_master_bfm_0_m0_translator_avalon_universal_master_0_debugaccess),   //  output,   width = 1,                          .debugaccess
		.av_address             (mm_master_bfm_0_m0_address),                                            //   input,  width = 32,      avalon_anti_master_0.address
		.av_waitrequest         (mm_master_bfm_0_m0_waitrequest),                                        //  output,   width = 1,                          .waitrequest
		.av_burstcount          (mm_master_bfm_0_m0_burstcount),                                         //   input,   width = 3,                          .burstcount
		.av_byteenable          (mm_master_bfm_0_m0_byteenable),                                         //   input,   width = 4,                          .byteenable
		.av_read                (mm_master_bfm_0_m0_read),                                               //   input,   width = 1,                          .read
		.av_readdata            (mm_master_bfm_0_m0_readdata),                                           //  output,  width = 32,                          .readdata
		.av_readdatavalid       (mm_master_bfm_0_m0_readdatavalid),                                      //  output,   width = 1,                          .readdatavalid
		.av_write               (mm_master_bfm_0_m0_write),                                              //   input,   width = 1,                          .write
		.av_writedata           (mm_master_bfm_0_m0_writedata),                                          //   input,  width = 32,                          .writedata
		.av_beginbursttransfer  (1'b0),                                                                  // (terminated),                                        
		.av_begintransfer       (1'b0),                                                                  // (terminated),                                        
		.av_chipselect          (1'b0),                                                                  // (terminated),                                        
		.av_lock                (1'b0),                                                                  // (terminated),                                        
		.av_debugaccess         (1'b0),                                                                  // (terminated),                                        
		.uav_outputenable       (1'b0),                                                                  // (terminated),                                        
		.uav_clken              (),                                                                      // (terminated),                                        
		.av_clken               (1'b1),                                                                  // (terminated),                                        
		.uav_response           (2'b00),                                                                 // (terminated),                                        
		.av_response            (),                                                                      // (terminated),                                        
		.uav_writeresponsevalid (1'b0),                                                                  // (terminated),                                        
		.av_writeresponsevalid  ()                                                                       // (terminated),                                        
	);

	hil_sys_altera_merlin_master_translator_192_lykd4la #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0),
		.SYNC_RESET                  (1),
		.WAITREQUEST_ALLOWANCE       (0),
		.USE_OUTPUTENABLE            (0)
	) jtag_master_master_translator (
		.clk                    (clock_in_out_clk_clk),                                                  //   input,   width = 1,                       clk.clk
		.reset                  (jtag_master_master_translator_reset_reset_bridge_in_reset_reset),       //   input,   width = 1,                     reset.reset
		.uav_address            (jtag_master_master_translator_avalon_universal_master_0_address),       //  output,  width = 32, avalon_universal_master_0.address
		.uav_burstcount         (jtag_master_master_translator_avalon_universal_master_0_burstcount),    //  output,   width = 3,                          .burstcount
		.uav_read               (jtag_master_master_translator_avalon_universal_master_0_read),          //  output,   width = 1,                          .read
		.uav_write              (jtag_master_master_translator_avalon_universal_master_0_write),         //  output,   width = 1,                          .write
		.uav_waitrequest        (jtag_master_master_translator_avalon_universal_master_0_waitrequest),   //   input,   width = 1,                          .waitrequest
		.uav_readdatavalid      (jtag_master_master_translator_avalon_universal_master_0_readdatavalid), //   input,   width = 1,                          .readdatavalid
		.uav_byteenable         (jtag_master_master_translator_avalon_universal_master_0_byteenable),    //  output,   width = 4,                          .byteenable
		.uav_readdata           (jtag_master_master_translator_avalon_universal_master_0_readdata),      //   input,  width = 32,                          .readdata
		.uav_writedata          (jtag_master_master_translator_avalon_universal_master_0_writedata),     //  output,  width = 32,                          .writedata
		.uav_lock               (jtag_master_master_translator_avalon_universal_master_0_lock),          //  output,   width = 1,                          .lock
		.uav_debugaccess        (jtag_master_master_translator_avalon_universal_master_0_debugaccess),   //  output,   width = 1,                          .debugaccess
		.av_address             (jtag_master_master_address),                                            //   input,  width = 32,      avalon_anti_master_0.address
		.av_waitrequest         (jtag_master_master_waitrequest),                                        //  output,   width = 1,                          .waitrequest
		.av_byteenable          (jtag_master_master_byteenable),                                         //   input,   width = 4,                          .byteenable
		.av_read                (jtag_master_master_read),                                               //   input,   width = 1,                          .read
		.av_readdata            (jtag_master_master_readdata),                                           //  output,  width = 32,                          .readdata
		.av_readdatavalid       (jtag_master_master_readdatavalid),                                      //  output,   width = 1,                          .readdatavalid
		.av_write               (jtag_master_master_write),                                              //   input,   width = 1,                          .write
		.av_writedata           (jtag_master_master_writedata),                                          //   input,  width = 32,                          .writedata
		.av_burstcount          (1'b1),                                                                  // (terminated),                                        
		.av_beginbursttransfer  (1'b0),                                                                  // (terminated),                                        
		.av_begintransfer       (1'b0),                                                                  // (terminated),                                        
		.av_chipselect          (1'b0),                                                                  // (terminated),                                        
		.av_lock                (1'b0),                                                                  // (terminated),                                        
		.av_debugaccess         (1'b0),                                                                  // (terminated),                                        
		.uav_outputenable       (1'b0),                                                                  // (terminated),                                        
		.uav_clken              (),                                                                      // (terminated),                                        
		.av_clken               (1'b1),                                                                  // (terminated),                                        
		.uav_response           (2'b00),                                                                 // (terminated),                                        
		.av_response            (),                                                                      // (terminated),                                        
		.uav_writeresponsevalid (1'b0),                                                                  // (terminated),                                        
		.av_writeresponsevalid  ()                                                                       // (terminated),                                        
	);

	hil_sys_altera_merlin_master_translator_192_lykd4la #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0),
		.SYNC_RESET                  (1),
		.WAITREQUEST_ALLOWANCE       (0),
		.USE_OUTPUTENABLE            (0)
	) sink_dma_mm_write_translator (
		.clk                    (clock_in_out_clk_clk),                                                 //   input,   width = 1,                       clk.clk
		.reset                  (sink_dma_reset_n_reset_bridge_in_reset_reset),                         //   input,   width = 1,                     reset.reset
		.uav_address            (sink_dma_mm_write_translator_avalon_universal_master_0_address),       //  output,  width = 32, avalon_universal_master_0.address
		.uav_burstcount         (sink_dma_mm_write_translator_avalon_universal_master_0_burstcount),    //  output,   width = 3,                          .burstcount
		.uav_read               (sink_dma_mm_write_translator_avalon_universal_master_0_read),          //  output,   width = 1,                          .read
		.uav_write              (sink_dma_mm_write_translator_avalon_universal_master_0_write),         //  output,   width = 1,                          .write
		.uav_waitrequest        (sink_dma_mm_write_translator_avalon_universal_master_0_waitrequest),   //   input,   width = 1,                          .waitrequest
		.uav_readdatavalid      (sink_dma_mm_write_translator_avalon_universal_master_0_readdatavalid), //   input,   width = 1,                          .readdatavalid
		.uav_byteenable         (sink_dma_mm_write_translator_avalon_universal_master_0_byteenable),    //  output,   width = 4,                          .byteenable
		.uav_readdata           (sink_dma_mm_write_translator_avalon_universal_master_0_readdata),      //   input,  width = 32,                          .readdata
		.uav_writedata          (sink_dma_mm_write_translator_avalon_universal_master_0_writedata),     //  output,  width = 32,                          .writedata
		.uav_lock               (sink_dma_mm_write_translator_avalon_universal_master_0_lock),          //  output,   width = 1,                          .lock
		.uav_debugaccess        (sink_dma_mm_write_translator_avalon_universal_master_0_debugaccess),   //  output,   width = 1,                          .debugaccess
		.av_address             (sink_dma_mm_write_address),                                            //   input,  width = 32,      avalon_anti_master_0.address
		.av_waitrequest         (sink_dma_mm_write_waitrequest),                                        //  output,   width = 1,                          .waitrequest
		.av_byteenable          (sink_dma_mm_write_byteenable),                                         //   input,   width = 4,                          .byteenable
		.av_write               (sink_dma_mm_write_write),                                              //   input,   width = 1,                          .write
		.av_writedata           (sink_dma_mm_write_writedata),                                          //   input,  width = 32,                          .writedata
		.av_burstcount          (1'b1),                                                                 // (terminated),                                        
		.av_beginbursttransfer  (1'b0),                                                                 // (terminated),                                        
		.av_begintransfer       (1'b0),                                                                 // (terminated),                                        
		.av_chipselect          (1'b0),                                                                 // (terminated),                                        
		.av_read                (1'b0),                                                                 // (terminated),                                        
		.av_readdata            (),                                                                     // (terminated),                                        
		.av_readdatavalid       (),                                                                     // (terminated),                                        
		.av_lock                (1'b0),                                                                 // (terminated),                                        
		.av_debugaccess         (1'b0),                                                                 // (terminated),                                        
		.uav_outputenable       (1'b0),                                                                 // (terminated),                                        
		.uav_clken              (),                                                                     // (terminated),                                        
		.av_clken               (1'b1),                                                                 // (terminated),                                        
		.uav_response           (2'b00),                                                                // (terminated),                                        
		.av_response            (),                                                                     // (terminated),                                        
		.uav_writeresponsevalid (1'b0),                                                                 // (terminated),                                        
		.av_writeresponsevalid  ()                                                                      // (terminated),                                        
	);

	hil_sys_altera_merlin_master_translator_192_lykd4la #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0),
		.SYNC_RESET                  (1),
		.WAITREQUEST_ALLOWANCE       (0),
		.USE_OUTPUTENABLE            (0)
	) source_dma_mm_read_translator (
		.clk                    (clock_in_out_clk_clk),                                                  //   input,   width = 1,                       clk.clk
		.reset                  (sink_dma_reset_n_reset_bridge_in_reset_reset),                          //   input,   width = 1,                     reset.reset
		.uav_address            (source_dma_mm_read_translator_avalon_universal_master_0_address),       //  output,  width = 32, avalon_universal_master_0.address
		.uav_burstcount         (source_dma_mm_read_translator_avalon_universal_master_0_burstcount),    //  output,   width = 3,                          .burstcount
		.uav_read               (source_dma_mm_read_translator_avalon_universal_master_0_read),          //  output,   width = 1,                          .read
		.uav_write              (source_dma_mm_read_translator_avalon_universal_master_0_write),         //  output,   width = 1,                          .write
		.uav_waitrequest        (source_dma_mm_read_translator_avalon_universal_master_0_waitrequest),   //   input,   width = 1,                          .waitrequest
		.uav_readdatavalid      (source_dma_mm_read_translator_avalon_universal_master_0_readdatavalid), //   input,   width = 1,                          .readdatavalid
		.uav_byteenable         (source_dma_mm_read_translator_avalon_universal_master_0_byteenable),    //  output,   width = 4,                          .byteenable
		.uav_readdata           (source_dma_mm_read_translator_avalon_universal_master_0_readdata),      //   input,  width = 32,                          .readdata
		.uav_writedata          (source_dma_mm_read_translator_avalon_universal_master_0_writedata),     //  output,  width = 32,                          .writedata
		.uav_lock               (source_dma_mm_read_translator_avalon_universal_master_0_lock),          //  output,   width = 1,                          .lock
		.uav_debugaccess        (source_dma_mm_read_translator_avalon_universal_master_0_debugaccess),   //  output,   width = 1,                          .debugaccess
		.av_address             (source_dma_mm_read_address),                                            //   input,  width = 32,      avalon_anti_master_0.address
		.av_waitrequest         (source_dma_mm_read_waitrequest),                                        //  output,   width = 1,                          .waitrequest
		.av_byteenable          (source_dma_mm_read_byteenable),                                         //   input,   width = 4,                          .byteenable
		.av_read                (source_dma_mm_read_read),                                               //   input,   width = 1,                          .read
		.av_readdata            (source_dma_mm_read_readdata),                                           //  output,  width = 32,                          .readdata
		.av_readdatavalid       (source_dma_mm_read_readdatavalid),                                      //  output,   width = 1,                          .readdatavalid
		.av_burstcount          (1'b1),                                                                  // (terminated),                                        
		.av_beginbursttransfer  (1'b0),                                                                  // (terminated),                                        
		.av_begintransfer       (1'b0),                                                                  // (terminated),                                        
		.av_chipselect          (1'b0),                                                                  // (terminated),                                        
		.av_write               (1'b0),                                                                  // (terminated),                                        
		.av_writedata           (32'b00000000000000000000000000000000),                                  // (terminated),                                        
		.av_lock                (1'b0),                                                                  // (terminated),                                        
		.av_debugaccess         (1'b0),                                                                  // (terminated),                                        
		.uav_outputenable       (1'b0),                                                                  // (terminated),                                        
		.uav_clken              (),                                                                      // (terminated),                                        
		.av_clken               (1'b1),                                                                  // (terminated),                                        
		.uav_response           (2'b00),                                                                 // (terminated),                                        
		.av_response            (),                                                                      // (terminated),                                        
		.uav_writeresponsevalid (1'b0),                                                                  // (terminated),                                        
		.av_writeresponsevalid  ()                                                                       // (terminated),                                        
	);

	hil_sys_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (1)
	) source_dma_csr_translator (
		.clk                    (clock_in_out_clk_clk),                         //   input,   width = 1,                      clk.clk
		.reset                  (sink_dma_reset_n_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (source_dma_csr_agent_m0_address),              //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (source_dma_csr_agent_m0_burstcount),           //   input,   width = 3,                         .burstcount
		.uav_read               (source_dma_csr_agent_m0_read),                 //   input,   width = 1,                         .read
		.uav_write              (source_dma_csr_agent_m0_write),                //   input,   width = 1,                         .write
		.uav_waitrequest        (source_dma_csr_agent_m0_waitrequest),          //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (source_dma_csr_agent_m0_readdatavalid),        //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (source_dma_csr_agent_m0_byteenable),           //   input,   width = 4,                         .byteenable
		.uav_readdata           (source_dma_csr_agent_m0_readdata),             //  output,  width = 32,                         .readdata
		.uav_writedata          (source_dma_csr_agent_m0_writedata),            //   input,  width = 32,                         .writedata
		.uav_lock               (source_dma_csr_agent_m0_lock),                 //   input,   width = 1,                         .lock
		.uav_debugaccess        (source_dma_csr_agent_m0_debugaccess),          //   input,   width = 1,                         .debugaccess
		.av_address             (source_dma_csr_address),                       //  output,   width = 3,      avalon_anti_slave_0.address
		.av_write               (source_dma_csr_write),                         //  output,   width = 1,                         .write
		.av_read                (source_dma_csr_read),                          //  output,   width = 1,                         .read
		.av_readdata            (source_dma_csr_readdata),                      //   input,  width = 32,                         .readdata
		.av_writedata           (source_dma_csr_writedata),                     //  output,  width = 32,                         .writedata
		.av_byteenable          (source_dma_csr_byteenable),                    //  output,   width = 4,                         .byteenable
		.av_begintransfer       (),                                             // (terminated),                                       
		.av_beginbursttransfer  (),                                             // (terminated),                                       
		.av_burstcount          (),                                             // (terminated),                                       
		.av_readdatavalid       (1'b0),                                         // (terminated),                                       
		.av_waitrequest         (1'b0),                                         // (terminated),                                       
		.av_writebyteenable     (),                                             // (terminated),                                       
		.av_lock                (),                                             // (terminated),                                       
		.av_chipselect          (),                                             // (terminated),                                       
		.av_clken               (),                                             // (terminated),                                       
		.uav_clken              (1'b0),                                         // (terminated),                                       
		.av_debugaccess         (),                                             // (terminated),                                       
		.av_outputenable        (),                                             // (terminated),                                       
		.uav_response           (),                                             // (terminated),                                       
		.av_response            (2'b00),                                        // (terminated),                                       
		.uav_writeresponsevalid (),                                             // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                          // (terminated),                                       
	);

	hil_sys_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (1)
	) sink_dma_csr_translator (
		.clk                    (clock_in_out_clk_clk),                         //   input,   width = 1,                      clk.clk
		.reset                  (sink_dma_reset_n_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (sink_dma_csr_agent_m0_address),                //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (sink_dma_csr_agent_m0_burstcount),             //   input,   width = 3,                         .burstcount
		.uav_read               (sink_dma_csr_agent_m0_read),                   //   input,   width = 1,                         .read
		.uav_write              (sink_dma_csr_agent_m0_write),                  //   input,   width = 1,                         .write
		.uav_waitrequest        (sink_dma_csr_agent_m0_waitrequest),            //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (sink_dma_csr_agent_m0_readdatavalid),          //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (sink_dma_csr_agent_m0_byteenable),             //   input,   width = 4,                         .byteenable
		.uav_readdata           (sink_dma_csr_agent_m0_readdata),               //  output,  width = 32,                         .readdata
		.uav_writedata          (sink_dma_csr_agent_m0_writedata),              //   input,  width = 32,                         .writedata
		.uav_lock               (sink_dma_csr_agent_m0_lock),                   //   input,   width = 1,                         .lock
		.uav_debugaccess        (sink_dma_csr_agent_m0_debugaccess),            //   input,   width = 1,                         .debugaccess
		.av_address             (sink_dma_csr_address),                         //  output,   width = 3,      avalon_anti_slave_0.address
		.av_write               (sink_dma_csr_write),                           //  output,   width = 1,                         .write
		.av_read                (sink_dma_csr_read),                            //  output,   width = 1,                         .read
		.av_readdata            (sink_dma_csr_readdata),                        //   input,  width = 32,                         .readdata
		.av_writedata           (sink_dma_csr_writedata),                       //  output,  width = 32,                         .writedata
		.av_byteenable          (sink_dma_csr_byteenable),                      //  output,   width = 4,                         .byteenable
		.av_begintransfer       (),                                             // (terminated),                                       
		.av_beginbursttransfer  (),                                             // (terminated),                                       
		.av_burstcount          (),                                             // (terminated),                                       
		.av_readdatavalid       (1'b0),                                         // (terminated),                                       
		.av_waitrequest         (1'b0),                                         // (terminated),                                       
		.av_writebyteenable     (),                                             // (terminated),                                       
		.av_lock                (),                                             // (terminated),                                       
		.av_chipselect          (),                                             // (terminated),                                       
		.av_clken               (),                                             // (terminated),                                       
		.uav_clken              (1'b0),                                         // (terminated),                                       
		.av_debugaccess         (),                                             // (terminated),                                       
		.av_outputenable        (),                                             // (terminated),                                       
		.uav_response           (),                                             // (terminated),                                       
		.av_response            (2'b00),                                        // (terminated),                                       
		.uav_writeresponsevalid (),                                             // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                          // (terminated),                                       
	);

	hil_sys_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (128),
		.UAV_DATA_W                     (128),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (16),
		.UAV_BYTEENABLE_W               (16),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (5),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (16),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (1)
	) source_dma_descriptor_slave_translator (
		.clk                    (clock_in_out_clk_clk),                                                                                                                  //   input,    width = 1,                      clk.clk
		.reset                  (sink_dma_reset_n_reset_bridge_in_reset_reset),                                                                                          //   input,    width = 1,                    reset.reset
		.uav_address            (source_dma_descriptor_slave_agent_m0_address),                                                                                          //   input,   width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (source_dma_descriptor_slave_agent_m0_burstcount),                                                                                       //   input,    width = 5,                         .burstcount
		.uav_read               (source_dma_descriptor_slave_agent_m0_read),                                                                                             //   input,    width = 1,                         .read
		.uav_write              (source_dma_descriptor_slave_agent_m0_write),                                                                                            //   input,    width = 1,                         .write
		.uav_waitrequest        (source_dma_descriptor_slave_agent_m0_waitrequest),                                                                                      //  output,    width = 1,                         .waitrequest
		.uav_readdatavalid      (source_dma_descriptor_slave_agent_m0_readdatavalid),                                                                                    //  output,    width = 1,                         .readdatavalid
		.uav_byteenable         (source_dma_descriptor_slave_agent_m0_byteenable),                                                                                       //   input,   width = 16,                         .byteenable
		.uav_readdata           (source_dma_descriptor_slave_agent_m0_readdata),                                                                                         //  output,  width = 128,                         .readdata
		.uav_writedata          (source_dma_descriptor_slave_agent_m0_writedata),                                                                                        //   input,  width = 128,                         .writedata
		.uav_lock               (source_dma_descriptor_slave_agent_m0_lock),                                                                                             //   input,    width = 1,                         .lock
		.uav_debugaccess        (source_dma_descriptor_slave_agent_m0_debugaccess),                                                                                      //   input,    width = 1,                         .debugaccess
		.av_write               (source_dma_descriptor_slave_write),                                                                                                     //  output,    width = 1,      avalon_anti_slave_0.write
		.av_writedata           (source_dma_descriptor_slave_writedata),                                                                                                 //  output,  width = 128,                         .writedata
		.av_byteenable          (source_dma_descriptor_slave_byteenable),                                                                                                //  output,   width = 16,                         .byteenable
		.av_waitrequest         (source_dma_descriptor_slave_waitrequest),                                                                                               //   input,    width = 1,                         .waitrequest
		.av_address             (),                                                                                                                                      // (terminated),                                        
		.av_read                (),                                                                                                                                      // (terminated),                                        
		.av_readdata            (128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011011110101011011101111010101101), // (terminated),                                        
		.av_begintransfer       (),                                                                                                                                      // (terminated),                                        
		.av_beginbursttransfer  (),                                                                                                                                      // (terminated),                                        
		.av_burstcount          (),                                                                                                                                      // (terminated),                                        
		.av_readdatavalid       (1'b0),                                                                                                                                  // (terminated),                                        
		.av_writebyteenable     (),                                                                                                                                      // (terminated),                                        
		.av_lock                (),                                                                                                                                      // (terminated),                                        
		.av_chipselect          (),                                                                                                                                      // (terminated),                                        
		.av_clken               (),                                                                                                                                      // (terminated),                                        
		.uav_clken              (1'b0),                                                                                                                                  // (terminated),                                        
		.av_debugaccess         (),                                                                                                                                      // (terminated),                                        
		.av_outputenable        (),                                                                                                                                      // (terminated),                                        
		.uav_response           (),                                                                                                                                      // (terminated),                                        
		.av_response            (2'b00),                                                                                                                                 // (terminated),                                        
		.uav_writeresponsevalid (),                                                                                                                                      // (terminated),                                        
		.av_writeresponsevalid  (1'b0)                                                                                                                                   // (terminated),                                        
	);

	hil_sys_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (128),
		.UAV_DATA_W                     (128),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (16),
		.UAV_BYTEENABLE_W               (16),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (5),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (16),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (1)
	) sink_dma_descriptor_slave_translator (
		.clk                    (clock_in_out_clk_clk),                                                                                                                  //   input,    width = 1,                      clk.clk
		.reset                  (sink_dma_reset_n_reset_bridge_in_reset_reset),                                                                                          //   input,    width = 1,                    reset.reset
		.uav_address            (sink_dma_descriptor_slave_agent_m0_address),                                                                                            //   input,   width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (sink_dma_descriptor_slave_agent_m0_burstcount),                                                                                         //   input,    width = 5,                         .burstcount
		.uav_read               (sink_dma_descriptor_slave_agent_m0_read),                                                                                               //   input,    width = 1,                         .read
		.uav_write              (sink_dma_descriptor_slave_agent_m0_write),                                                                                              //   input,    width = 1,                         .write
		.uav_waitrequest        (sink_dma_descriptor_slave_agent_m0_waitrequest),                                                                                        //  output,    width = 1,                         .waitrequest
		.uav_readdatavalid      (sink_dma_descriptor_slave_agent_m0_readdatavalid),                                                                                      //  output,    width = 1,                         .readdatavalid
		.uav_byteenable         (sink_dma_descriptor_slave_agent_m0_byteenable),                                                                                         //   input,   width = 16,                         .byteenable
		.uav_readdata           (sink_dma_descriptor_slave_agent_m0_readdata),                                                                                           //  output,  width = 128,                         .readdata
		.uav_writedata          (sink_dma_descriptor_slave_agent_m0_writedata),                                                                                          //   input,  width = 128,                         .writedata
		.uav_lock               (sink_dma_descriptor_slave_agent_m0_lock),                                                                                               //   input,    width = 1,                         .lock
		.uav_debugaccess        (sink_dma_descriptor_slave_agent_m0_debugaccess),                                                                                        //   input,    width = 1,                         .debugaccess
		.av_write               (sink_dma_descriptor_slave_write),                                                                                                       //  output,    width = 1,      avalon_anti_slave_0.write
		.av_writedata           (sink_dma_descriptor_slave_writedata),                                                                                                   //  output,  width = 128,                         .writedata
		.av_byteenable          (sink_dma_descriptor_slave_byteenable),                                                                                                  //  output,   width = 16,                         .byteenable
		.av_waitrequest         (sink_dma_descriptor_slave_waitrequest),                                                                                                 //   input,    width = 1,                         .waitrequest
		.av_address             (),                                                                                                                                      // (terminated),                                        
		.av_read                (),                                                                                                                                      // (terminated),                                        
		.av_readdata            (128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011011110101011011101111010101101), // (terminated),                                        
		.av_begintransfer       (),                                                                                                                                      // (terminated),                                        
		.av_beginbursttransfer  (),                                                                                                                                      // (terminated),                                        
		.av_burstcount          (),                                                                                                                                      // (terminated),                                        
		.av_readdatavalid       (1'b0),                                                                                                                                  // (terminated),                                        
		.av_writebyteenable     (),                                                                                                                                      // (terminated),                                        
		.av_lock                (),                                                                                                                                      // (terminated),                                        
		.av_chipselect          (),                                                                                                                                      // (terminated),                                        
		.av_clken               (),                                                                                                                                      // (terminated),                                        
		.uav_clken              (1'b0),                                                                                                                                  // (terminated),                                        
		.av_debugaccess         (),                                                                                                                                      // (terminated),                                        
		.av_outputenable        (),                                                                                                                                      // (terminated),                                        
		.uav_response           (),                                                                                                                                      // (terminated),                                        
		.av_response            (2'b00),                                                                                                                                 // (terminated),                                        
		.uav_writeresponsevalid (),                                                                                                                                      // (terminated),                                        
		.av_writeresponsevalid  (1'b0)                                                                                                                                   // (terminated),                                        
	);

	hil_sys_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (10),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (1)
	) test_source_ram_s1_translator (
		.clk                    (clock_in_out_clk_clk),                         //   input,   width = 1,                      clk.clk
		.reset                  (sink_dma_reset_n_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (test_source_ram_s1_agent_m0_address),          //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (test_source_ram_s1_agent_m0_burstcount),       //   input,   width = 3,                         .burstcount
		.uav_read               (test_source_ram_s1_agent_m0_read),             //   input,   width = 1,                         .read
		.uav_write              (test_source_ram_s1_agent_m0_write),            //   input,   width = 1,                         .write
		.uav_waitrequest        (test_source_ram_s1_agent_m0_waitrequest),      //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (test_source_ram_s1_agent_m0_readdatavalid),    //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (test_source_ram_s1_agent_m0_byteenable),       //   input,   width = 4,                         .byteenable
		.uav_readdata           (test_source_ram_s1_agent_m0_readdata),         //  output,  width = 32,                         .readdata
		.uav_writedata          (test_source_ram_s1_agent_m0_writedata),        //   input,  width = 32,                         .writedata
		.uav_lock               (test_source_ram_s1_agent_m0_lock),             //   input,   width = 1,                         .lock
		.uav_debugaccess        (test_source_ram_s1_agent_m0_debugaccess),      //   input,   width = 1,                         .debugaccess
		.av_address             (test_source_ram_s1_address),                   //  output,  width = 10,      avalon_anti_slave_0.address
		.av_write               (test_source_ram_s1_write),                     //  output,   width = 1,                         .write
		.av_readdata            (test_source_ram_s1_readdata),                  //   input,  width = 32,                         .readdata
		.av_writedata           (test_source_ram_s1_writedata),                 //  output,  width = 32,                         .writedata
		.av_byteenable          (test_source_ram_s1_byteenable),                //  output,   width = 4,                         .byteenable
		.av_chipselect          (test_source_ram_s1_chipselect),                //  output,   width = 1,                         .chipselect
		.av_clken               (test_source_ram_s1_clken),                     //  output,   width = 1,                         .clken
		.av_read                (),                                             // (terminated),                                       
		.av_begintransfer       (),                                             // (terminated),                                       
		.av_beginbursttransfer  (),                                             // (terminated),                                       
		.av_burstcount          (),                                             // (terminated),                                       
		.av_readdatavalid       (1'b0),                                         // (terminated),                                       
		.av_waitrequest         (1'b0),                                         // (terminated),                                       
		.av_writebyteenable     (),                                             // (terminated),                                       
		.av_lock                (),                                             // (terminated),                                       
		.uav_clken              (1'b0),                                         // (terminated),                                       
		.av_debugaccess         (),                                             // (terminated),                                       
		.av_outputenable        (),                                             // (terminated),                                       
		.uav_response           (),                                             // (terminated),                                       
		.av_response            (2'b00),                                        // (terminated),                                       
		.uav_writeresponsevalid (),                                             // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                          // (terminated),                                       
	);

	hil_sys_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (10),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (1)
	) test_sink_ram_s1_translator (
		.clk                    (clock_in_out_clk_clk),                         //   input,   width = 1,                      clk.clk
		.reset                  (sink_dma_reset_n_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (test_sink_ram_s1_agent_m0_address),            //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (test_sink_ram_s1_agent_m0_burstcount),         //   input,   width = 3,                         .burstcount
		.uav_read               (test_sink_ram_s1_agent_m0_read),               //   input,   width = 1,                         .read
		.uav_write              (test_sink_ram_s1_agent_m0_write),              //   input,   width = 1,                         .write
		.uav_waitrequest        (test_sink_ram_s1_agent_m0_waitrequest),        //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (test_sink_ram_s1_agent_m0_readdatavalid),      //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (test_sink_ram_s1_agent_m0_byteenable),         //   input,   width = 4,                         .byteenable
		.uav_readdata           (test_sink_ram_s1_agent_m0_readdata),           //  output,  width = 32,                         .readdata
		.uav_writedata          (test_sink_ram_s1_agent_m0_writedata),          //   input,  width = 32,                         .writedata
		.uav_lock               (test_sink_ram_s1_agent_m0_lock),               //   input,   width = 1,                         .lock
		.uav_debugaccess        (test_sink_ram_s1_agent_m0_debugaccess),        //   input,   width = 1,                         .debugaccess
		.av_address             (test_sink_ram_s1_address),                     //  output,  width = 10,      avalon_anti_slave_0.address
		.av_write               (test_sink_ram_s1_write),                       //  output,   width = 1,                         .write
		.av_readdata            (test_sink_ram_s1_readdata),                    //   input,  width = 32,                         .readdata
		.av_writedata           (test_sink_ram_s1_writedata),                   //  output,  width = 32,                         .writedata
		.av_byteenable          (test_sink_ram_s1_byteenable),                  //  output,   width = 4,                         .byteenable
		.av_chipselect          (test_sink_ram_s1_chipselect),                  //  output,   width = 1,                         .chipselect
		.av_clken               (test_sink_ram_s1_clken),                       //  output,   width = 1,                         .clken
		.av_read                (),                                             // (terminated),                                       
		.av_begintransfer       (),                                             // (terminated),                                       
		.av_beginbursttransfer  (),                                             // (terminated),                                       
		.av_burstcount          (),                                             // (terminated),                                       
		.av_readdatavalid       (1'b0),                                         // (terminated),                                       
		.av_waitrequest         (1'b0),                                         // (terminated),                                       
		.av_writebyteenable     (),                                             // (terminated),                                       
		.av_lock                (),                                             // (terminated),                                       
		.uav_clken              (1'b0),                                         // (terminated),                                       
		.av_debugaccess         (),                                             // (terminated),                                       
		.av_outputenable        (),                                             // (terminated),                                       
		.uav_response           (),                                             // (terminated),                                       
		.av_response            (2'b00),                                        // (terminated),                                       
		.uav_writeresponsevalid (),                                             // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                          // (terminated),                                       
	);

	hil_sys_altera_merlin_master_agent_191_mpbm6tq #(
		.PKT_WUNIQUE               (121),
		.PKT_DOMAIN_H              (120),
		.PKT_DOMAIN_L              (119),
		.PKT_SNOOP_H               (118),
		.PKT_SNOOP_L               (115),
		.PKT_BARRIER_H             (114),
		.PKT_BARRIER_L             (113),
		.PKT_ORI_BURST_SIZE_H      (112),
		.PKT_ORI_BURST_SIZE_L      (110),
		.PKT_RESPONSE_STATUS_H     (109),
		.PKT_RESPONSE_STATUS_L     (108),
		.PKT_QOS_H                 (93),
		.PKT_QOS_L                 (93),
		.PKT_DATA_SIDEBAND_H       (91),
		.PKT_DATA_SIDEBAND_L       (91),
		.PKT_ADDR_SIDEBAND_H       (90),
		.PKT_ADDR_SIDEBAND_L       (90),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_CACHE_H               (107),
		.PKT_CACHE_L               (104),
		.PKT_THREAD_ID_H           (100),
		.PKT_THREAD_ID_L           (100),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (103),
		.PKT_PROTECTION_L          (101),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (96),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (97),
		.ST_DATA_W                 (122),
		.ST_CHANNEL_W              (6),
		.AV_BURSTCOUNT_W           (5),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (1),
		.BURSTWRAP_VALUE           (15),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.DOMAIN_VALUE              (3),
		.BARRIER_VALUE             (0),
		.SNOOP_VALUE               (0),
		.WUNIQUE_VALUE             (0),
		.SYNC_RESET                (1)
	) mm_master_bfm_0_m0_agent (
		.clk                   (clock_in_out_clk_clk),                                                  //   input,    width = 1,       clk.clk
		.reset                 (mm_master_bfm_0_m0_translator_reset_reset_bridge_in_reset_reset),       //   input,    width = 1, clk_reset.reset
		.av_address            (mm_master_bfm_0_m0_translator_avalon_universal_master_0_address),       //   input,   width = 32,        av.address
		.av_write              (mm_master_bfm_0_m0_translator_avalon_universal_master_0_write),         //   input,    width = 1,          .write
		.av_read               (mm_master_bfm_0_m0_translator_avalon_universal_master_0_read),          //   input,    width = 1,          .read
		.av_writedata          (mm_master_bfm_0_m0_translator_avalon_universal_master_0_writedata),     //   input,   width = 32,          .writedata
		.av_readdata           (mm_master_bfm_0_m0_translator_avalon_universal_master_0_readdata),      //  output,   width = 32,          .readdata
		.av_waitrequest        (mm_master_bfm_0_m0_translator_avalon_universal_master_0_waitrequest),   //  output,    width = 1,          .waitrequest
		.av_readdatavalid      (mm_master_bfm_0_m0_translator_avalon_universal_master_0_readdatavalid), //  output,    width = 1,          .readdatavalid
		.av_byteenable         (mm_master_bfm_0_m0_translator_avalon_universal_master_0_byteenable),    //   input,    width = 4,          .byteenable
		.av_burstcount         (mm_master_bfm_0_m0_translator_avalon_universal_master_0_burstcount),    //   input,    width = 5,          .burstcount
		.av_debugaccess        (mm_master_bfm_0_m0_translator_avalon_universal_master_0_debugaccess),   //   input,    width = 1,          .debugaccess
		.av_lock               (mm_master_bfm_0_m0_translator_avalon_universal_master_0_lock),          //   input,    width = 1,          .lock
		.cp_valid              (mm_master_bfm_0_m0_agent_cp_valid),                                     //  output,    width = 1,        cp.valid
		.cp_data               (mm_master_bfm_0_m0_agent_cp_data),                                      //  output,  width = 122,          .data
		.cp_startofpacket      (mm_master_bfm_0_m0_agent_cp_startofpacket),                             //  output,    width = 1,          .startofpacket
		.cp_endofpacket        (mm_master_bfm_0_m0_agent_cp_endofpacket),                               //  output,    width = 1,          .endofpacket
		.cp_ready              (mm_master_bfm_0_m0_agent_cp_ready),                                     //   input,    width = 1,          .ready
		.rp_valid              (mm_master_bfm_0_m0_limiter_rsp_src_valid),                              //   input,    width = 1,        rp.valid
		.rp_data               (mm_master_bfm_0_m0_limiter_rsp_src_data),                               //   input,  width = 122,          .data
		.rp_channel            (mm_master_bfm_0_m0_limiter_rsp_src_channel),                            //   input,    width = 6,          .channel
		.rp_startofpacket      (mm_master_bfm_0_m0_limiter_rsp_src_startofpacket),                      //   input,    width = 1,          .startofpacket
		.rp_endofpacket        (mm_master_bfm_0_m0_limiter_rsp_src_endofpacket),                        //   input,    width = 1,          .endofpacket
		.rp_ready              (mm_master_bfm_0_m0_limiter_rsp_src_ready),                              //  output,    width = 1,          .ready
		.av_response           (),                                                                      // (terminated),                         
		.av_writeresponsevalid ()                                                                       // (terminated),                         
	);

	hil_sys_altera_merlin_master_agent_191_mpbm6tq #(
		.PKT_WUNIQUE               (121),
		.PKT_DOMAIN_H              (120),
		.PKT_DOMAIN_L              (119),
		.PKT_SNOOP_H               (118),
		.PKT_SNOOP_L               (115),
		.PKT_BARRIER_H             (114),
		.PKT_BARRIER_L             (113),
		.PKT_ORI_BURST_SIZE_H      (112),
		.PKT_ORI_BURST_SIZE_L      (110),
		.PKT_RESPONSE_STATUS_H     (109),
		.PKT_RESPONSE_STATUS_L     (108),
		.PKT_QOS_H                 (93),
		.PKT_QOS_L                 (93),
		.PKT_DATA_SIDEBAND_H       (91),
		.PKT_DATA_SIDEBAND_L       (91),
		.PKT_ADDR_SIDEBAND_H       (90),
		.PKT_ADDR_SIDEBAND_L       (90),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_CACHE_H               (107),
		.PKT_CACHE_L               (104),
		.PKT_THREAD_ID_H           (100),
		.PKT_THREAD_ID_L           (100),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (103),
		.PKT_PROTECTION_L          (101),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (96),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (97),
		.ST_DATA_W                 (122),
		.ST_CHANNEL_W              (6),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (0),
		.BURSTWRAP_VALUE           (31),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.DOMAIN_VALUE              (3),
		.BARRIER_VALUE             (0),
		.SNOOP_VALUE               (0),
		.WUNIQUE_VALUE             (0),
		.SYNC_RESET                (1)
	) jtag_master_master_agent (
		.clk                   (clock_in_out_clk_clk),                                                  //   input,    width = 1,       clk.clk
		.reset                 (jtag_master_master_translator_reset_reset_bridge_in_reset_reset),       //   input,    width = 1, clk_reset.reset
		.av_address            (jtag_master_master_translator_avalon_universal_master_0_address),       //   input,   width = 32,        av.address
		.av_write              (jtag_master_master_translator_avalon_universal_master_0_write),         //   input,    width = 1,          .write
		.av_read               (jtag_master_master_translator_avalon_universal_master_0_read),          //   input,    width = 1,          .read
		.av_writedata          (jtag_master_master_translator_avalon_universal_master_0_writedata),     //   input,   width = 32,          .writedata
		.av_readdata           (jtag_master_master_translator_avalon_universal_master_0_readdata),      //  output,   width = 32,          .readdata
		.av_waitrequest        (jtag_master_master_translator_avalon_universal_master_0_waitrequest),   //  output,    width = 1,          .waitrequest
		.av_readdatavalid      (jtag_master_master_translator_avalon_universal_master_0_readdatavalid), //  output,    width = 1,          .readdatavalid
		.av_byteenable         (jtag_master_master_translator_avalon_universal_master_0_byteenable),    //   input,    width = 4,          .byteenable
		.av_burstcount         (jtag_master_master_translator_avalon_universal_master_0_burstcount),    //   input,    width = 3,          .burstcount
		.av_debugaccess        (jtag_master_master_translator_avalon_universal_master_0_debugaccess),   //   input,    width = 1,          .debugaccess
		.av_lock               (jtag_master_master_translator_avalon_universal_master_0_lock),          //   input,    width = 1,          .lock
		.cp_valid              (jtag_master_master_agent_cp_valid),                                     //  output,    width = 1,        cp.valid
		.cp_data               (jtag_master_master_agent_cp_data),                                      //  output,  width = 122,          .data
		.cp_startofpacket      (jtag_master_master_agent_cp_startofpacket),                             //  output,    width = 1,          .startofpacket
		.cp_endofpacket        (jtag_master_master_agent_cp_endofpacket),                               //  output,    width = 1,          .endofpacket
		.cp_ready              (jtag_master_master_agent_cp_ready),                                     //   input,    width = 1,          .ready
		.rp_valid              (jtag_master_master_limiter_rsp_src_valid),                              //   input,    width = 1,        rp.valid
		.rp_data               (jtag_master_master_limiter_rsp_src_data),                               //   input,  width = 122,          .data
		.rp_channel            (jtag_master_master_limiter_rsp_src_channel),                            //   input,    width = 6,          .channel
		.rp_startofpacket      (jtag_master_master_limiter_rsp_src_startofpacket),                      //   input,    width = 1,          .startofpacket
		.rp_endofpacket        (jtag_master_master_limiter_rsp_src_endofpacket),                        //   input,    width = 1,          .endofpacket
		.rp_ready              (jtag_master_master_limiter_rsp_src_ready),                              //  output,    width = 1,          .ready
		.av_response           (),                                                                      // (terminated),                         
		.av_writeresponsevalid ()                                                                       // (terminated),                         
	);

	hil_sys_altera_merlin_master_agent_191_mpbm6tq #(
		.PKT_WUNIQUE               (121),
		.PKT_DOMAIN_H              (120),
		.PKT_DOMAIN_L              (119),
		.PKT_SNOOP_H               (118),
		.PKT_SNOOP_L               (115),
		.PKT_BARRIER_H             (114),
		.PKT_BARRIER_L             (113),
		.PKT_ORI_BURST_SIZE_H      (112),
		.PKT_ORI_BURST_SIZE_L      (110),
		.PKT_RESPONSE_STATUS_H     (109),
		.PKT_RESPONSE_STATUS_L     (108),
		.PKT_QOS_H                 (93),
		.PKT_QOS_L                 (93),
		.PKT_DATA_SIDEBAND_H       (91),
		.PKT_DATA_SIDEBAND_L       (91),
		.PKT_ADDR_SIDEBAND_H       (90),
		.PKT_ADDR_SIDEBAND_L       (90),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_CACHE_H               (107),
		.PKT_CACHE_L               (104),
		.PKT_THREAD_ID_H           (100),
		.PKT_THREAD_ID_L           (100),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (103),
		.PKT_PROTECTION_L          (101),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (96),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (97),
		.ST_DATA_W                 (122),
		.ST_CHANNEL_W              (6),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (2),
		.BURSTWRAP_VALUE           (31),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.DOMAIN_VALUE              (3),
		.BARRIER_VALUE             (0),
		.SNOOP_VALUE               (0),
		.WUNIQUE_VALUE             (0),
		.SYNC_RESET                (1)
	) sink_dma_mm_write_agent (
		.clk                   (clock_in_out_clk_clk),                                                 //   input,    width = 1,       clk.clk
		.reset                 (sink_dma_reset_n_reset_bridge_in_reset_reset),                         //   input,    width = 1, clk_reset.reset
		.av_address            (sink_dma_mm_write_translator_avalon_universal_master_0_address),       //   input,   width = 32,        av.address
		.av_write              (sink_dma_mm_write_translator_avalon_universal_master_0_write),         //   input,    width = 1,          .write
		.av_read               (sink_dma_mm_write_translator_avalon_universal_master_0_read),          //   input,    width = 1,          .read
		.av_writedata          (sink_dma_mm_write_translator_avalon_universal_master_0_writedata),     //   input,   width = 32,          .writedata
		.av_readdata           (sink_dma_mm_write_translator_avalon_universal_master_0_readdata),      //  output,   width = 32,          .readdata
		.av_waitrequest        (sink_dma_mm_write_translator_avalon_universal_master_0_waitrequest),   //  output,    width = 1,          .waitrequest
		.av_readdatavalid      (sink_dma_mm_write_translator_avalon_universal_master_0_readdatavalid), //  output,    width = 1,          .readdatavalid
		.av_byteenable         (sink_dma_mm_write_translator_avalon_universal_master_0_byteenable),    //   input,    width = 4,          .byteenable
		.av_burstcount         (sink_dma_mm_write_translator_avalon_universal_master_0_burstcount),    //   input,    width = 3,          .burstcount
		.av_debugaccess        (sink_dma_mm_write_translator_avalon_universal_master_0_debugaccess),   //   input,    width = 1,          .debugaccess
		.av_lock               (sink_dma_mm_write_translator_avalon_universal_master_0_lock),          //   input,    width = 1,          .lock
		.cp_valid              (sink_dma_mm_write_agent_cp_valid),                                     //  output,    width = 1,        cp.valid
		.cp_data               (sink_dma_mm_write_agent_cp_data),                                      //  output,  width = 122,          .data
		.cp_startofpacket      (sink_dma_mm_write_agent_cp_startofpacket),                             //  output,    width = 1,          .startofpacket
		.cp_endofpacket        (sink_dma_mm_write_agent_cp_endofpacket),                               //  output,    width = 1,          .endofpacket
		.cp_ready              (sink_dma_mm_write_agent_cp_ready),                                     //   input,    width = 1,          .ready
		.rp_valid              (rsp_mux_002_src_valid),                                                //   input,    width = 1,        rp.valid
		.rp_data               (rsp_mux_002_src_data),                                                 //   input,  width = 122,          .data
		.rp_channel            (rsp_mux_002_src_channel),                                              //   input,    width = 6,          .channel
		.rp_startofpacket      (rsp_mux_002_src_startofpacket),                                        //   input,    width = 1,          .startofpacket
		.rp_endofpacket        (rsp_mux_002_src_endofpacket),                                          //   input,    width = 1,          .endofpacket
		.rp_ready              (rsp_mux_002_src_ready),                                                //  output,    width = 1,          .ready
		.av_response           (),                                                                     // (terminated),                         
		.av_writeresponsevalid ()                                                                      // (terminated),                         
	);

	hil_sys_altera_merlin_master_agent_191_mpbm6tq #(
		.PKT_WUNIQUE               (121),
		.PKT_DOMAIN_H              (120),
		.PKT_DOMAIN_L              (119),
		.PKT_SNOOP_H               (118),
		.PKT_SNOOP_L               (115),
		.PKT_BARRIER_H             (114),
		.PKT_BARRIER_L             (113),
		.PKT_ORI_BURST_SIZE_H      (112),
		.PKT_ORI_BURST_SIZE_L      (110),
		.PKT_RESPONSE_STATUS_H     (109),
		.PKT_RESPONSE_STATUS_L     (108),
		.PKT_QOS_H                 (93),
		.PKT_QOS_L                 (93),
		.PKT_DATA_SIDEBAND_H       (91),
		.PKT_DATA_SIDEBAND_L       (91),
		.PKT_ADDR_SIDEBAND_H       (90),
		.PKT_ADDR_SIDEBAND_L       (90),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_CACHE_H               (107),
		.PKT_CACHE_L               (104),
		.PKT_THREAD_ID_H           (100),
		.PKT_THREAD_ID_L           (100),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (103),
		.PKT_PROTECTION_L          (101),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (96),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (97),
		.ST_DATA_W                 (122),
		.ST_CHANNEL_W              (6),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (3),
		.BURSTWRAP_VALUE           (31),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.DOMAIN_VALUE              (3),
		.BARRIER_VALUE             (0),
		.SNOOP_VALUE               (0),
		.WUNIQUE_VALUE             (0),
		.SYNC_RESET                (1)
	) source_dma_mm_read_agent (
		.clk                   (clock_in_out_clk_clk),                                                  //   input,    width = 1,       clk.clk
		.reset                 (sink_dma_reset_n_reset_bridge_in_reset_reset),                          //   input,    width = 1, clk_reset.reset
		.av_address            (source_dma_mm_read_translator_avalon_universal_master_0_address),       //   input,   width = 32,        av.address
		.av_write              (source_dma_mm_read_translator_avalon_universal_master_0_write),         //   input,    width = 1,          .write
		.av_read               (source_dma_mm_read_translator_avalon_universal_master_0_read),          //   input,    width = 1,          .read
		.av_writedata          (source_dma_mm_read_translator_avalon_universal_master_0_writedata),     //   input,   width = 32,          .writedata
		.av_readdata           (source_dma_mm_read_translator_avalon_universal_master_0_readdata),      //  output,   width = 32,          .readdata
		.av_waitrequest        (source_dma_mm_read_translator_avalon_universal_master_0_waitrequest),   //  output,    width = 1,          .waitrequest
		.av_readdatavalid      (source_dma_mm_read_translator_avalon_universal_master_0_readdatavalid), //  output,    width = 1,          .readdatavalid
		.av_byteenable         (source_dma_mm_read_translator_avalon_universal_master_0_byteenable),    //   input,    width = 4,          .byteenable
		.av_burstcount         (source_dma_mm_read_translator_avalon_universal_master_0_burstcount),    //   input,    width = 3,          .burstcount
		.av_debugaccess        (source_dma_mm_read_translator_avalon_universal_master_0_debugaccess),   //   input,    width = 1,          .debugaccess
		.av_lock               (source_dma_mm_read_translator_avalon_universal_master_0_lock),          //   input,    width = 1,          .lock
		.cp_valid              (source_dma_mm_read_agent_cp_valid),                                     //  output,    width = 1,        cp.valid
		.cp_data               (source_dma_mm_read_agent_cp_data),                                      //  output,  width = 122,          .data
		.cp_startofpacket      (source_dma_mm_read_agent_cp_startofpacket),                             //  output,    width = 1,          .startofpacket
		.cp_endofpacket        (source_dma_mm_read_agent_cp_endofpacket),                               //  output,    width = 1,          .endofpacket
		.cp_ready              (source_dma_mm_read_agent_cp_ready),                                     //   input,    width = 1,          .ready
		.rp_valid              (rsp_mux_003_src_valid),                                                 //   input,    width = 1,        rp.valid
		.rp_data               (rsp_mux_003_src_data),                                                  //   input,  width = 122,          .data
		.rp_channel            (rsp_mux_003_src_channel),                                               //   input,    width = 6,          .channel
		.rp_startofpacket      (rsp_mux_003_src_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.rp_endofpacket        (rsp_mux_003_src_endofpacket),                                           //   input,    width = 1,          .endofpacket
		.rp_ready              (rsp_mux_003_src_ready),                                                 //  output,    width = 1,          .ready
		.av_response           (),                                                                      // (terminated),                         
		.av_writeresponsevalid ()                                                                       // (terminated),                         
	);

	hil_sys_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (112),
		.PKT_ORI_BURST_SIZE_L      (110),
		.PKT_RESPONSE_STATUS_H     (109),
		.PKT_RESPONSE_STATUS_L     (108),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (103),
		.PKT_PROTECTION_L          (101),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (96),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (97),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (122),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.USE_MEMORY_BLOCKS         (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (1)
	) source_dma_csr_agent (
		.clk                     (clock_in_out_clk_clk),                               //   input,    width = 1,             clk.clk
		.reset                   (sink_dma_reset_n_reset_bridge_in_reset_reset),       //   input,    width = 1,       clk_reset.reset
		.m0_address              (source_dma_csr_agent_m0_address),                    //  output,   width = 32,              m0.address
		.m0_burstcount           (source_dma_csr_agent_m0_burstcount),                 //  output,    width = 3,                .burstcount
		.m0_byteenable           (source_dma_csr_agent_m0_byteenable),                 //  output,    width = 4,                .byteenable
		.m0_debugaccess          (source_dma_csr_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (source_dma_csr_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (source_dma_csr_agent_m0_readdata),                   //   input,   width = 32,                .readdata
		.m0_readdatavalid        (source_dma_csr_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (source_dma_csr_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (source_dma_csr_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (source_dma_csr_agent_m0_writedata),                  //  output,   width = 32,                .writedata
		.m0_write                (source_dma_csr_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (source_dma_csr_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (source_dma_csr_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (source_dma_csr_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (source_dma_csr_agent_rp_data),                       //  output,  width = 122,                .data
		.rp_startofpacket        (source_dma_csr_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (source_dma_csr_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (source_dma_csr_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (source_dma_csr_burst_adapter_source0_data),          //   input,  width = 122,                .data
		.cp_startofpacket        (source_dma_csr_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (source_dma_csr_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (source_dma_csr_burst_adapter_source0_channel),       //   input,    width = 6,                .channel
		.rf_sink_ready           (source_dma_csr_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (source_dma_csr_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (source_dma_csr_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (source_dma_csr_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (source_dma_csr_agent_rsp_fifo_out_data),             //   input,  width = 123,                .data
		.rf_source_ready         (source_dma_csr_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (source_dma_csr_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (source_dma_csr_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (source_dma_csr_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (source_dma_csr_agent_rf_source_data),                //  output,  width = 123,                .data
		.rdata_fifo_sink_ready   (source_dma_csr_agent_rdata_fifo_src_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (source_dma_csr_agent_rdata_fifo_src_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (source_dma_csr_agent_rdata_fifo_src_data),           //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (source_dma_csr_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (source_dma_csr_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (source_dma_csr_agent_rdata_fifo_src_data),           //  output,   width = 34,                .data
		.m0_response             (2'b00),                                              // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                               // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                // (terminated),                               
	);

	hil_sys_altera_avalon_sc_fifo_1931_vhmcgqy #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (123),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (1)
	) source_dma_csr_agent_rsp_fifo (
		.clk               (clock_in_out_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset             (test_source_ram_reset1_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_data           (source_dma_csr_agent_rf_source_data),                //   input,  width = 123,        in.data
		.in_valid          (source_dma_csr_agent_rf_source_valid),               //   input,    width = 1,          .valid
		.in_ready          (source_dma_csr_agent_rf_source_ready),               //  output,    width = 1,          .ready
		.in_startofpacket  (source_dma_csr_agent_rf_source_startofpacket),       //   input,    width = 1,          .startofpacket
		.in_endofpacket    (source_dma_csr_agent_rf_source_endofpacket),         //   input,    width = 1,          .endofpacket
		.out_data          (source_dma_csr_agent_rsp_fifo_out_data),             //  output,  width = 123,       out.data
		.out_valid         (source_dma_csr_agent_rsp_fifo_out_valid),            //  output,    width = 1,          .valid
		.out_ready         (source_dma_csr_agent_rsp_fifo_out_ready),            //   input,    width = 1,          .ready
		.out_startofpacket (source_dma_csr_agent_rsp_fifo_out_startofpacket),    //  output,    width = 1,          .startofpacket
		.out_endofpacket   (source_dma_csr_agent_rsp_fifo_out_endofpacket),      //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                              // (terminated),                         
		.csr_read          (1'b0),                                               // (terminated),                         
		.csr_write         (1'b0),                                               // (terminated),                         
		.csr_readdata      (),                                                   // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated),                         
		.almost_full_data  (),                                                   // (terminated),                         
		.almost_empty_data (),                                                   // (terminated),                         
		.in_empty          (1'b0),                                               // (terminated),                         
		.out_empty         (),                                                   // (terminated),                         
		.in_error          (1'b0),                                               // (terminated),                         
		.out_error         (),                                                   // (terminated),                         
		.in_channel        (1'b0),                                               // (terminated),                         
		.out_channel       ()                                                    // (terminated),                         
	);

	hil_sys_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (112),
		.PKT_ORI_BURST_SIZE_L      (110),
		.PKT_RESPONSE_STATUS_H     (109),
		.PKT_RESPONSE_STATUS_L     (108),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (103),
		.PKT_PROTECTION_L          (101),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (96),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (97),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (122),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.USE_MEMORY_BLOCKS         (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (1)
	) sink_dma_csr_agent (
		.clk                     (clock_in_out_clk_clk),                             //   input,    width = 1,             clk.clk
		.reset                   (sink_dma_reset_n_reset_bridge_in_reset_reset),     //   input,    width = 1,       clk_reset.reset
		.m0_address              (sink_dma_csr_agent_m0_address),                    //  output,   width = 32,              m0.address
		.m0_burstcount           (sink_dma_csr_agent_m0_burstcount),                 //  output,    width = 3,                .burstcount
		.m0_byteenable           (sink_dma_csr_agent_m0_byteenable),                 //  output,    width = 4,                .byteenable
		.m0_debugaccess          (sink_dma_csr_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (sink_dma_csr_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (sink_dma_csr_agent_m0_readdata),                   //   input,   width = 32,                .readdata
		.m0_readdatavalid        (sink_dma_csr_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (sink_dma_csr_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (sink_dma_csr_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (sink_dma_csr_agent_m0_writedata),                  //  output,   width = 32,                .writedata
		.m0_write                (sink_dma_csr_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (sink_dma_csr_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (sink_dma_csr_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (sink_dma_csr_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (sink_dma_csr_agent_rp_data),                       //  output,  width = 122,                .data
		.rp_startofpacket        (sink_dma_csr_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (sink_dma_csr_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (sink_dma_csr_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (sink_dma_csr_burst_adapter_source0_data),          //   input,  width = 122,                .data
		.cp_startofpacket        (sink_dma_csr_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (sink_dma_csr_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (sink_dma_csr_burst_adapter_source0_channel),       //   input,    width = 6,                .channel
		.rf_sink_ready           (sink_dma_csr_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (sink_dma_csr_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (sink_dma_csr_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (sink_dma_csr_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (sink_dma_csr_agent_rsp_fifo_out_data),             //   input,  width = 123,                .data
		.rf_source_ready         (sink_dma_csr_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (sink_dma_csr_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (sink_dma_csr_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (sink_dma_csr_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (sink_dma_csr_agent_rf_source_data),                //  output,  width = 123,                .data
		.rdata_fifo_sink_ready   (sink_dma_csr_agent_rdata_fifo_src_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (sink_dma_csr_agent_rdata_fifo_src_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (sink_dma_csr_agent_rdata_fifo_src_data),           //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (sink_dma_csr_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sink_dma_csr_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (sink_dma_csr_agent_rdata_fifo_src_data),           //  output,   width = 34,                .data
		.m0_response             (2'b00),                                            // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                             // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                              // (terminated),                               
	);

	hil_sys_altera_avalon_sc_fifo_1931_vhmcgqy #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (123),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (1)
	) sink_dma_csr_agent_rsp_fifo (
		.clk               (clock_in_out_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset             (test_source_ram_reset1_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_data           (sink_dma_csr_agent_rf_source_data),                  //   input,  width = 123,        in.data
		.in_valid          (sink_dma_csr_agent_rf_source_valid),                 //   input,    width = 1,          .valid
		.in_ready          (sink_dma_csr_agent_rf_source_ready),                 //  output,    width = 1,          .ready
		.in_startofpacket  (sink_dma_csr_agent_rf_source_startofpacket),         //   input,    width = 1,          .startofpacket
		.in_endofpacket    (sink_dma_csr_agent_rf_source_endofpacket),           //   input,    width = 1,          .endofpacket
		.out_data          (sink_dma_csr_agent_rsp_fifo_out_data),               //  output,  width = 123,       out.data
		.out_valid         (sink_dma_csr_agent_rsp_fifo_out_valid),              //  output,    width = 1,          .valid
		.out_ready         (sink_dma_csr_agent_rsp_fifo_out_ready),              //   input,    width = 1,          .ready
		.out_startofpacket (sink_dma_csr_agent_rsp_fifo_out_startofpacket),      //  output,    width = 1,          .startofpacket
		.out_endofpacket   (sink_dma_csr_agent_rsp_fifo_out_endofpacket),        //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                              // (terminated),                         
		.csr_read          (1'b0),                                               // (terminated),                         
		.csr_write         (1'b0),                                               // (terminated),                         
		.csr_readdata      (),                                                   // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated),                         
		.almost_full_data  (),                                                   // (terminated),                         
		.almost_empty_data (),                                                   // (terminated),                         
		.in_empty          (1'b0),                                               // (terminated),                         
		.out_empty         (),                                                   // (terminated),                         
		.in_error          (1'b0),                                               // (terminated),                         
		.out_error         (),                                                   // (terminated),                         
		.in_channel        (1'b0),                                               // (terminated),                         
		.out_channel       ()                                                    // (terminated),                         
	);

	hil_sys_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (220),
		.PKT_ORI_BURST_SIZE_L      (218),
		.PKT_RESPONSE_STATUS_H     (217),
		.PKT_RESPONSE_STATUS_L     (216),
		.PKT_BURST_SIZE_H          (195),
		.PKT_BURST_SIZE_L          (193),
		.PKT_TRANS_LOCK            (180),
		.PKT_BEGIN_BURST           (200),
		.PKT_PROTECTION_H          (211),
		.PKT_PROTECTION_L          (209),
		.PKT_BURSTWRAP_H           (192),
		.PKT_BURSTWRAP_L           (188),
		.PKT_BYTE_CNT_H            (187),
		.PKT_BYTE_CNT_L            (182),
		.PKT_ADDR_H                (175),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_COMPRESSED_READ (176),
		.PKT_TRANS_POSTED          (177),
		.PKT_TRANS_WRITE           (178),
		.PKT_TRANS_READ            (179),
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_SRC_ID_H              (204),
		.PKT_SRC_ID_L              (202),
		.PKT_DEST_ID_H             (207),
		.PKT_DEST_ID_L             (205),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (230),
		.AVS_BURSTCOUNT_W          (5),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.USE_MEMORY_BLOCKS         (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (1)
	) source_dma_descriptor_slave_agent (
		.clk                     (clock_in_out_clk_clk),                                            //   input,    width = 1,             clk.clk
		.reset                   (sink_dma_reset_n_reset_bridge_in_reset_reset),                    //   input,    width = 1,       clk_reset.reset
		.m0_address              (source_dma_descriptor_slave_agent_m0_address),                    //  output,   width = 32,              m0.address
		.m0_burstcount           (source_dma_descriptor_slave_agent_m0_burstcount),                 //  output,    width = 5,                .burstcount
		.m0_byteenable           (source_dma_descriptor_slave_agent_m0_byteenable),                 //  output,   width = 16,                .byteenable
		.m0_debugaccess          (source_dma_descriptor_slave_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (source_dma_descriptor_slave_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (source_dma_descriptor_slave_agent_m0_readdata),                   //   input,  width = 128,                .readdata
		.m0_readdatavalid        (source_dma_descriptor_slave_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (source_dma_descriptor_slave_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (source_dma_descriptor_slave_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (source_dma_descriptor_slave_agent_m0_writedata),                  //  output,  width = 128,                .writedata
		.m0_write                (source_dma_descriptor_slave_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (source_dma_descriptor_slave_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (source_dma_descriptor_slave_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (source_dma_descriptor_slave_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (source_dma_descriptor_slave_agent_rp_data),                       //  output,  width = 230,                .data
		.rp_startofpacket        (source_dma_descriptor_slave_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (source_dma_descriptor_slave_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (source_dma_descriptor_slave_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (source_dma_descriptor_slave_burst_adapter_source0_data),          //   input,  width = 230,                .data
		.cp_startofpacket        (source_dma_descriptor_slave_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (source_dma_descriptor_slave_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (source_dma_descriptor_slave_burst_adapter_source0_channel),       //   input,    width = 6,                .channel
		.rf_sink_ready           (source_dma_descriptor_slave_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (source_dma_descriptor_slave_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (source_dma_descriptor_slave_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (source_dma_descriptor_slave_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (source_dma_descriptor_slave_agent_rsp_fifo_out_data),             //   input,  width = 231,                .data
		.rf_source_ready         (source_dma_descriptor_slave_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (source_dma_descriptor_slave_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (source_dma_descriptor_slave_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (source_dma_descriptor_slave_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (source_dma_descriptor_slave_agent_rf_source_data),                //  output,  width = 231,                .data
		.rdata_fifo_sink_ready   (source_dma_descriptor_slave_agent_rdata_fifo_out_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (source_dma_descriptor_slave_agent_rdata_fifo_out_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (source_dma_descriptor_slave_agent_rdata_fifo_out_data),           //   input,  width = 130,                .data
		.rdata_fifo_src_ready    (source_dma_descriptor_slave_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (source_dma_descriptor_slave_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (source_dma_descriptor_slave_agent_rdata_fifo_src_data),           //  output,  width = 130,                .data
		.m0_response             (2'b00),                                                           // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                            // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                             // (terminated),                               
	);

	hil_sys_altera_avalon_sc_fifo_1931_vhmcgqy #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (231),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (1)
	) source_dma_descriptor_slave_agent_rsp_fifo (
		.clk               (clock_in_out_clk_clk),                                         //   input,    width = 1,       clk.clk
		.reset             (test_source_ram_reset1_reset_bridge_in_reset_reset),           //   input,    width = 1, clk_reset.reset
		.in_data           (source_dma_descriptor_slave_agent_rf_source_data),             //   input,  width = 231,        in.data
		.in_valid          (source_dma_descriptor_slave_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (source_dma_descriptor_slave_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (source_dma_descriptor_slave_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (source_dma_descriptor_slave_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (source_dma_descriptor_slave_agent_rsp_fifo_out_data),          //  output,  width = 231,       out.data
		.out_valid         (source_dma_descriptor_slave_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (source_dma_descriptor_slave_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (source_dma_descriptor_slave_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (source_dma_descriptor_slave_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated),                         
		.csr_read          (1'b0),                                                         // (terminated),                         
		.csr_write         (1'b0),                                                         // (terminated),                         
		.csr_readdata      (),                                                             // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated),                         
		.almost_full_data  (),                                                             // (terminated),                         
		.almost_empty_data (),                                                             // (terminated),                         
		.in_empty          (1'b0),                                                         // (terminated),                         
		.out_empty         (),                                                             // (terminated),                         
		.in_error          (1'b0),                                                         // (terminated),                         
		.out_error         (),                                                             // (terminated),                         
		.in_channel        (1'b0),                                                         // (terminated),                         
		.out_channel       ()                                                              // (terminated),                         
	);

	hil_sys_altera_avalon_sc_fifo_1931_vhmcgqy #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (130),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (1)
	) source_dma_descriptor_slave_agent_rdata_fifo (
		.clk               (clock_in_out_clk_clk),                                   //   input,    width = 1,       clk.clk
		.reset             (test_source_ram_reset1_reset_bridge_in_reset_reset),     //   input,    width = 1, clk_reset.reset
		.in_data           (source_dma_descriptor_slave_agent_rdata_fifo_src_data),  //   input,  width = 130,        in.data
		.in_valid          (source_dma_descriptor_slave_agent_rdata_fifo_src_valid), //   input,    width = 1,          .valid
		.in_ready          (source_dma_descriptor_slave_agent_rdata_fifo_src_ready), //  output,    width = 1,          .ready
		.out_data          (source_dma_descriptor_slave_agent_rdata_fifo_out_data),  //  output,  width = 130,       out.data
		.out_valid         (source_dma_descriptor_slave_agent_rdata_fifo_out_valid), //  output,    width = 1,          .valid
		.out_ready         (source_dma_descriptor_slave_agent_rdata_fifo_out_ready), //   input,    width = 1,          .ready
		.csr_address       (2'b00),                                                  // (terminated),                         
		.csr_read          (1'b0),                                                   // (terminated),                         
		.csr_write         (1'b0),                                                   // (terminated),                         
		.csr_readdata      (),                                                       // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated),                         
		.almost_full_data  (),                                                       // (terminated),                         
		.almost_empty_data (),                                                       // (terminated),                         
		.in_startofpacket  (1'b0),                                                   // (terminated),                         
		.in_endofpacket    (1'b0),                                                   // (terminated),                         
		.out_startofpacket (),                                                       // (terminated),                         
		.out_endofpacket   (),                                                       // (terminated),                         
		.in_empty          (1'b0),                                                   // (terminated),                         
		.out_empty         (),                                                       // (terminated),                         
		.in_error          (1'b0),                                                   // (terminated),                         
		.out_error         (),                                                       // (terminated),                         
		.in_channel        (1'b0),                                                   // (terminated),                         
		.out_channel       ()                                                        // (terminated),                         
	);

	hil_sys_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (220),
		.PKT_ORI_BURST_SIZE_L      (218),
		.PKT_RESPONSE_STATUS_H     (217),
		.PKT_RESPONSE_STATUS_L     (216),
		.PKT_BURST_SIZE_H          (195),
		.PKT_BURST_SIZE_L          (193),
		.PKT_TRANS_LOCK            (180),
		.PKT_BEGIN_BURST           (200),
		.PKT_PROTECTION_H          (211),
		.PKT_PROTECTION_L          (209),
		.PKT_BURSTWRAP_H           (192),
		.PKT_BURSTWRAP_L           (188),
		.PKT_BYTE_CNT_H            (187),
		.PKT_BYTE_CNT_L            (182),
		.PKT_ADDR_H                (175),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_COMPRESSED_READ (176),
		.PKT_TRANS_POSTED          (177),
		.PKT_TRANS_WRITE           (178),
		.PKT_TRANS_READ            (179),
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_SRC_ID_H              (204),
		.PKT_SRC_ID_L              (202),
		.PKT_DEST_ID_H             (207),
		.PKT_DEST_ID_L             (205),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (230),
		.AVS_BURSTCOUNT_W          (5),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.USE_MEMORY_BLOCKS         (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (1)
	) sink_dma_descriptor_slave_agent (
		.clk                     (clock_in_out_clk_clk),                                          //   input,    width = 1,             clk.clk
		.reset                   (sink_dma_reset_n_reset_bridge_in_reset_reset),                  //   input,    width = 1,       clk_reset.reset
		.m0_address              (sink_dma_descriptor_slave_agent_m0_address),                    //  output,   width = 32,              m0.address
		.m0_burstcount           (sink_dma_descriptor_slave_agent_m0_burstcount),                 //  output,    width = 5,                .burstcount
		.m0_byteenable           (sink_dma_descriptor_slave_agent_m0_byteenable),                 //  output,   width = 16,                .byteenable
		.m0_debugaccess          (sink_dma_descriptor_slave_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (sink_dma_descriptor_slave_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (sink_dma_descriptor_slave_agent_m0_readdata),                   //   input,  width = 128,                .readdata
		.m0_readdatavalid        (sink_dma_descriptor_slave_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (sink_dma_descriptor_slave_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (sink_dma_descriptor_slave_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (sink_dma_descriptor_slave_agent_m0_writedata),                  //  output,  width = 128,                .writedata
		.m0_write                (sink_dma_descriptor_slave_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (sink_dma_descriptor_slave_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (sink_dma_descriptor_slave_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (sink_dma_descriptor_slave_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (sink_dma_descriptor_slave_agent_rp_data),                       //  output,  width = 230,                .data
		.rp_startofpacket        (sink_dma_descriptor_slave_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (sink_dma_descriptor_slave_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (sink_dma_descriptor_slave_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (sink_dma_descriptor_slave_burst_adapter_source0_data),          //   input,  width = 230,                .data
		.cp_startofpacket        (sink_dma_descriptor_slave_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (sink_dma_descriptor_slave_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (sink_dma_descriptor_slave_burst_adapter_source0_channel),       //   input,    width = 6,                .channel
		.rf_sink_ready           (sink_dma_descriptor_slave_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (sink_dma_descriptor_slave_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (sink_dma_descriptor_slave_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (sink_dma_descriptor_slave_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (sink_dma_descriptor_slave_agent_rsp_fifo_out_data),             //   input,  width = 231,                .data
		.rf_source_ready         (sink_dma_descriptor_slave_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (sink_dma_descriptor_slave_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (sink_dma_descriptor_slave_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (sink_dma_descriptor_slave_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (sink_dma_descriptor_slave_agent_rf_source_data),                //  output,  width = 231,                .data
		.rdata_fifo_sink_ready   (sink_dma_descriptor_slave_agent_rdata_fifo_out_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (sink_dma_descriptor_slave_agent_rdata_fifo_out_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (sink_dma_descriptor_slave_agent_rdata_fifo_out_data),           //   input,  width = 130,                .data
		.rdata_fifo_src_ready    (sink_dma_descriptor_slave_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sink_dma_descriptor_slave_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (sink_dma_descriptor_slave_agent_rdata_fifo_src_data),           //  output,  width = 130,                .data
		.m0_response             (2'b00),                                                         // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                          // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                           // (terminated),                               
	);

	hil_sys_altera_avalon_sc_fifo_1931_vhmcgqy #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (231),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (1)
	) sink_dma_descriptor_slave_agent_rsp_fifo (
		.clk               (clock_in_out_clk_clk),                                       //   input,    width = 1,       clk.clk
		.reset             (test_source_ram_reset1_reset_bridge_in_reset_reset),         //   input,    width = 1, clk_reset.reset
		.in_data           (sink_dma_descriptor_slave_agent_rf_source_data),             //   input,  width = 231,        in.data
		.in_valid          (sink_dma_descriptor_slave_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (sink_dma_descriptor_slave_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (sink_dma_descriptor_slave_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (sink_dma_descriptor_slave_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (sink_dma_descriptor_slave_agent_rsp_fifo_out_data),          //  output,  width = 231,       out.data
		.out_valid         (sink_dma_descriptor_slave_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (sink_dma_descriptor_slave_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (sink_dma_descriptor_slave_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (sink_dma_descriptor_slave_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                      // (terminated),                         
		.csr_read          (1'b0),                                                       // (terminated),                         
		.csr_write         (1'b0),                                                       // (terminated),                         
		.csr_readdata      (),                                                           // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated),                         
		.almost_full_data  (),                                                           // (terminated),                         
		.almost_empty_data (),                                                           // (terminated),                         
		.in_empty          (1'b0),                                                       // (terminated),                         
		.out_empty         (),                                                           // (terminated),                         
		.in_error          (1'b0),                                                       // (terminated),                         
		.out_error         (),                                                           // (terminated),                         
		.in_channel        (1'b0),                                                       // (terminated),                         
		.out_channel       ()                                                            // (terminated),                         
	);

	hil_sys_altera_avalon_sc_fifo_1931_vhmcgqy #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (130),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (1)
	) sink_dma_descriptor_slave_agent_rdata_fifo (
		.clk               (clock_in_out_clk_clk),                                 //   input,    width = 1,       clk.clk
		.reset             (test_source_ram_reset1_reset_bridge_in_reset_reset),   //   input,    width = 1, clk_reset.reset
		.in_data           (sink_dma_descriptor_slave_agent_rdata_fifo_src_data),  //   input,  width = 130,        in.data
		.in_valid          (sink_dma_descriptor_slave_agent_rdata_fifo_src_valid), //   input,    width = 1,          .valid
		.in_ready          (sink_dma_descriptor_slave_agent_rdata_fifo_src_ready), //  output,    width = 1,          .ready
		.out_data          (sink_dma_descriptor_slave_agent_rdata_fifo_out_data),  //  output,  width = 130,       out.data
		.out_valid         (sink_dma_descriptor_slave_agent_rdata_fifo_out_valid), //  output,    width = 1,          .valid
		.out_ready         (sink_dma_descriptor_slave_agent_rdata_fifo_out_ready), //   input,    width = 1,          .ready
		.csr_address       (2'b00),                                                // (terminated),                         
		.csr_read          (1'b0),                                                 // (terminated),                         
		.csr_write         (1'b0),                                                 // (terminated),                         
		.csr_readdata      (),                                                     // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated),                         
		.almost_full_data  (),                                                     // (terminated),                         
		.almost_empty_data (),                                                     // (terminated),                         
		.in_startofpacket  (1'b0),                                                 // (terminated),                         
		.in_endofpacket    (1'b0),                                                 // (terminated),                         
		.out_startofpacket (),                                                     // (terminated),                         
		.out_endofpacket   (),                                                     // (terminated),                         
		.in_empty          (1'b0),                                                 // (terminated),                         
		.out_empty         (),                                                     // (terminated),                         
		.in_error          (1'b0),                                                 // (terminated),                         
		.out_error         (),                                                     // (terminated),                         
		.in_channel        (1'b0),                                                 // (terminated),                         
		.out_channel       ()                                                      // (terminated),                         
	);

	hil_sys_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (112),
		.PKT_ORI_BURST_SIZE_L      (110),
		.PKT_RESPONSE_STATUS_H     (109),
		.PKT_RESPONSE_STATUS_L     (108),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (103),
		.PKT_PROTECTION_L          (101),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (96),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (97),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (122),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.USE_MEMORY_BLOCKS         (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (1)
	) test_source_ram_s1_agent (
		.clk                     (clock_in_out_clk_clk),                                   //   input,    width = 1,             clk.clk
		.reset                   (sink_dma_reset_n_reset_bridge_in_reset_reset),           //   input,    width = 1,       clk_reset.reset
		.m0_address              (test_source_ram_s1_agent_m0_address),                    //  output,   width = 32,              m0.address
		.m0_burstcount           (test_source_ram_s1_agent_m0_burstcount),                 //  output,    width = 3,                .burstcount
		.m0_byteenable           (test_source_ram_s1_agent_m0_byteenable),                 //  output,    width = 4,                .byteenable
		.m0_debugaccess          (test_source_ram_s1_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (test_source_ram_s1_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (test_source_ram_s1_agent_m0_readdata),                   //   input,   width = 32,                .readdata
		.m0_readdatavalid        (test_source_ram_s1_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (test_source_ram_s1_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (test_source_ram_s1_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (test_source_ram_s1_agent_m0_writedata),                  //  output,   width = 32,                .writedata
		.m0_write                (test_source_ram_s1_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (test_source_ram_s1_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (test_source_ram_s1_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (test_source_ram_s1_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (test_source_ram_s1_agent_rp_data),                       //  output,  width = 122,                .data
		.rp_startofpacket        (test_source_ram_s1_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (test_source_ram_s1_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (test_source_ram_s1_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (test_source_ram_s1_burst_adapter_source0_data),          //   input,  width = 122,                .data
		.cp_startofpacket        (test_source_ram_s1_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (test_source_ram_s1_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (test_source_ram_s1_burst_adapter_source0_channel),       //   input,    width = 6,                .channel
		.rf_sink_ready           (test_source_ram_s1_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (test_source_ram_s1_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (test_source_ram_s1_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (test_source_ram_s1_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (test_source_ram_s1_agent_rsp_fifo_out_data),             //   input,  width = 123,                .data
		.rf_source_ready         (test_source_ram_s1_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (test_source_ram_s1_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (test_source_ram_s1_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (test_source_ram_s1_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (test_source_ram_s1_agent_rf_source_data),                //  output,  width = 123,                .data
		.rdata_fifo_sink_ready   (test_source_ram_s1_agent_rdata_fifo_src_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (test_source_ram_s1_agent_rdata_fifo_src_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (test_source_ram_s1_agent_rdata_fifo_src_data),           //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (test_source_ram_s1_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (test_source_ram_s1_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (test_source_ram_s1_agent_rdata_fifo_src_data),           //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                  // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                   // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                    // (terminated),                               
	);

	hil_sys_altera_avalon_sc_fifo_1931_vhmcgqy #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (123),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (1)
	) test_source_ram_s1_agent_rsp_fifo (
		.clk               (clock_in_out_clk_clk),                                //   input,    width = 1,       clk.clk
		.reset             (test_source_ram_reset1_reset_bridge_in_reset_reset),  //   input,    width = 1, clk_reset.reset
		.in_data           (test_source_ram_s1_agent_rf_source_data),             //   input,  width = 123,        in.data
		.in_valid          (test_source_ram_s1_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (test_source_ram_s1_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (test_source_ram_s1_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (test_source_ram_s1_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (test_source_ram_s1_agent_rsp_fifo_out_data),          //  output,  width = 123,       out.data
		.out_valid         (test_source_ram_s1_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (test_source_ram_s1_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (test_source_ram_s1_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (test_source_ram_s1_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                               // (terminated),                         
		.csr_read          (1'b0),                                                // (terminated),                         
		.csr_write         (1'b0),                                                // (terminated),                         
		.csr_readdata      (),                                                    // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated),                         
		.almost_full_data  (),                                                    // (terminated),                         
		.almost_empty_data (),                                                    // (terminated),                         
		.in_empty          (1'b0),                                                // (terminated),                         
		.out_empty         (),                                                    // (terminated),                         
		.in_error          (1'b0),                                                // (terminated),                         
		.out_error         (),                                                    // (terminated),                         
		.in_channel        (1'b0),                                                // (terminated),                         
		.out_channel       ()                                                     // (terminated),                         
	);

	hil_sys_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (112),
		.PKT_ORI_BURST_SIZE_L      (110),
		.PKT_RESPONSE_STATUS_H     (109),
		.PKT_RESPONSE_STATUS_L     (108),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (103),
		.PKT_PROTECTION_L          (101),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (96),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (97),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (122),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.USE_MEMORY_BLOCKS         (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (1)
	) test_sink_ram_s1_agent (
		.clk                     (clock_in_out_clk_clk),                                 //   input,    width = 1,             clk.clk
		.reset                   (sink_dma_reset_n_reset_bridge_in_reset_reset),         //   input,    width = 1,       clk_reset.reset
		.m0_address              (test_sink_ram_s1_agent_m0_address),                    //  output,   width = 32,              m0.address
		.m0_burstcount           (test_sink_ram_s1_agent_m0_burstcount),                 //  output,    width = 3,                .burstcount
		.m0_byteenable           (test_sink_ram_s1_agent_m0_byteenable),                 //  output,    width = 4,                .byteenable
		.m0_debugaccess          (test_sink_ram_s1_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (test_sink_ram_s1_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (test_sink_ram_s1_agent_m0_readdata),                   //   input,   width = 32,                .readdata
		.m0_readdatavalid        (test_sink_ram_s1_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (test_sink_ram_s1_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (test_sink_ram_s1_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (test_sink_ram_s1_agent_m0_writedata),                  //  output,   width = 32,                .writedata
		.m0_write                (test_sink_ram_s1_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (test_sink_ram_s1_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (test_sink_ram_s1_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (test_sink_ram_s1_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (test_sink_ram_s1_agent_rp_data),                       //  output,  width = 122,                .data
		.rp_startofpacket        (test_sink_ram_s1_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (test_sink_ram_s1_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (test_sink_ram_s1_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (test_sink_ram_s1_burst_adapter_source0_data),          //   input,  width = 122,                .data
		.cp_startofpacket        (test_sink_ram_s1_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (test_sink_ram_s1_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (test_sink_ram_s1_burst_adapter_source0_channel),       //   input,    width = 6,                .channel
		.rf_sink_ready           (test_sink_ram_s1_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (test_sink_ram_s1_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (test_sink_ram_s1_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (test_sink_ram_s1_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (test_sink_ram_s1_agent_rsp_fifo_out_data),             //   input,  width = 123,                .data
		.rf_source_ready         (test_sink_ram_s1_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (test_sink_ram_s1_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (test_sink_ram_s1_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (test_sink_ram_s1_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (test_sink_ram_s1_agent_rf_source_data),                //  output,  width = 123,                .data
		.rdata_fifo_sink_ready   (test_sink_ram_s1_agent_rdata_fifo_src_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (test_sink_ram_s1_agent_rdata_fifo_src_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (test_sink_ram_s1_agent_rdata_fifo_src_data),           //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (test_sink_ram_s1_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (test_sink_ram_s1_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (test_sink_ram_s1_agent_rdata_fifo_src_data),           //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                 // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                  // (terminated),                               
	);

	hil_sys_altera_avalon_sc_fifo_1931_vhmcgqy #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (123),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (1)
	) test_sink_ram_s1_agent_rsp_fifo (
		.clk               (clock_in_out_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset             (test_source_ram_reset1_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_data           (test_sink_ram_s1_agent_rf_source_data),              //   input,  width = 123,        in.data
		.in_valid          (test_sink_ram_s1_agent_rf_source_valid),             //   input,    width = 1,          .valid
		.in_ready          (test_sink_ram_s1_agent_rf_source_ready),             //  output,    width = 1,          .ready
		.in_startofpacket  (test_sink_ram_s1_agent_rf_source_startofpacket),     //   input,    width = 1,          .startofpacket
		.in_endofpacket    (test_sink_ram_s1_agent_rf_source_endofpacket),       //   input,    width = 1,          .endofpacket
		.out_data          (test_sink_ram_s1_agent_rsp_fifo_out_data),           //  output,  width = 123,       out.data
		.out_valid         (test_sink_ram_s1_agent_rsp_fifo_out_valid),          //  output,    width = 1,          .valid
		.out_ready         (test_sink_ram_s1_agent_rsp_fifo_out_ready),          //   input,    width = 1,          .ready
		.out_startofpacket (test_sink_ram_s1_agent_rsp_fifo_out_startofpacket),  //  output,    width = 1,          .startofpacket
		.out_endofpacket   (test_sink_ram_s1_agent_rsp_fifo_out_endofpacket),    //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                              // (terminated),                         
		.csr_read          (1'b0),                                               // (terminated),                         
		.csr_write         (1'b0),                                               // (terminated),                         
		.csr_readdata      (),                                                   // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated),                         
		.almost_full_data  (),                                                   // (terminated),                         
		.almost_empty_data (),                                                   // (terminated),                         
		.in_empty          (1'b0),                                               // (terminated),                         
		.out_empty         (),                                                   // (terminated),                         
		.in_error          (1'b0),                                               // (terminated),                         
		.out_error         (),                                                   // (terminated),                         
		.in_channel        (1'b0),                                               // (terminated),                         
		.out_channel       ()                                                    // (terminated),                         
	);

	hil_sys_altera_merlin_router_1921_2dfjfwi router (
		.sink_ready         (mm_master_bfm_0_m0_agent_cp_ready),                               //  output,    width = 1,      sink.ready
		.sink_valid         (mm_master_bfm_0_m0_agent_cp_valid),                               //   input,    width = 1,          .valid
		.sink_data          (mm_master_bfm_0_m0_agent_cp_data),                                //   input,  width = 122,          .data
		.sink_startofpacket (mm_master_bfm_0_m0_agent_cp_startofpacket),                       //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (mm_master_bfm_0_m0_agent_cp_endofpacket),                         //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                                            //   input,    width = 1,       clk.clk
		.reset              (mm_master_bfm_0_m0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_src_ready),                                                //   input,    width = 1,       src.ready
		.src_valid          (router_src_valid),                                                //  output,    width = 1,          .valid
		.src_data           (router_src_data),                                                 //  output,  width = 122,          .data
		.src_channel        (router_src_channel),                                              //  output,    width = 6,          .channel
		.src_startofpacket  (router_src_startofpacket),                                        //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                           //  output,    width = 1,          .endofpacket
	);

	hil_sys_altera_merlin_router_1921_2dfjfwi router_001 (
		.sink_ready         (jtag_master_master_agent_cp_ready),                               //  output,    width = 1,      sink.ready
		.sink_valid         (jtag_master_master_agent_cp_valid),                               //   input,    width = 1,          .valid
		.sink_data          (jtag_master_master_agent_cp_data),                                //   input,  width = 122,          .data
		.sink_startofpacket (jtag_master_master_agent_cp_startofpacket),                       //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (jtag_master_master_agent_cp_endofpacket),                         //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                                            //   input,    width = 1,       clk.clk
		.reset              (jtag_master_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_001_src_ready),                                            //   input,    width = 1,       src.ready
		.src_valid          (router_001_src_valid),                                            //  output,    width = 1,          .valid
		.src_data           (router_001_src_data),                                             //  output,  width = 122,          .data
		.src_channel        (router_001_src_channel),                                          //  output,    width = 6,          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                    //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                       //  output,    width = 1,          .endofpacket
	);

	hil_sys_altera_merlin_router_1921_wanomoi router_002 (
		.sink_ready         (sink_dma_mm_write_agent_cp_ready),             //  output,    width = 1,      sink.ready
		.sink_valid         (sink_dma_mm_write_agent_cp_valid),             //   input,    width = 1,          .valid
		.sink_data          (sink_dma_mm_write_agent_cp_data),              //   input,  width = 122,          .data
		.sink_startofpacket (sink_dma_mm_write_agent_cp_startofpacket),     //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (sink_dma_mm_write_agent_cp_endofpacket),       //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                         //   input,    width = 1,       clk.clk
		.reset              (sink_dma_reset_n_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_002_src_ready),                         //   input,    width = 1,       src.ready
		.src_valid          (router_002_src_valid),                         //  output,    width = 1,          .valid
		.src_data           (router_002_src_data),                          //  output,  width = 122,          .data
		.src_channel        (router_002_src_channel),                       //  output,    width = 6,          .channel
		.src_startofpacket  (router_002_src_startofpacket),                 //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                    //  output,    width = 1,          .endofpacket
	);

	hil_sys_altera_merlin_router_1921_wpsphoq router_003 (
		.sink_ready         (source_dma_mm_read_agent_cp_ready),            //  output,    width = 1,      sink.ready
		.sink_valid         (source_dma_mm_read_agent_cp_valid),            //   input,    width = 1,          .valid
		.sink_data          (source_dma_mm_read_agent_cp_data),             //   input,  width = 122,          .data
		.sink_startofpacket (source_dma_mm_read_agent_cp_startofpacket),    //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (source_dma_mm_read_agent_cp_endofpacket),      //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                         //   input,    width = 1,       clk.clk
		.reset              (sink_dma_reset_n_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_003_src_ready),                         //   input,    width = 1,       src.ready
		.src_valid          (router_003_src_valid),                         //  output,    width = 1,          .valid
		.src_data           (router_003_src_data),                          //  output,  width = 122,          .data
		.src_channel        (router_003_src_channel),                       //  output,    width = 6,          .channel
		.src_startofpacket  (router_003_src_startofpacket),                 //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                    //  output,    width = 1,          .endofpacket
	);

	hil_sys_altera_merlin_router_1921_lp7w7iq router_004 (
		.sink_ready         (source_dma_csr_agent_rp_ready),                //  output,    width = 1,      sink.ready
		.sink_valid         (source_dma_csr_agent_rp_valid),                //   input,    width = 1,          .valid
		.sink_data          (source_dma_csr_agent_rp_data),                 //   input,  width = 122,          .data
		.sink_startofpacket (source_dma_csr_agent_rp_startofpacket),        //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (source_dma_csr_agent_rp_endofpacket),          //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                         //   input,    width = 1,       clk.clk
		.reset              (sink_dma_reset_n_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_004_src_ready),                         //   input,    width = 1,       src.ready
		.src_valid          (router_004_src_valid),                         //  output,    width = 1,          .valid
		.src_data           (router_004_src_data),                          //  output,  width = 122,          .data
		.src_channel        (router_004_src_channel),                       //  output,    width = 6,          .channel
		.src_startofpacket  (router_004_src_startofpacket),                 //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                    //  output,    width = 1,          .endofpacket
	);

	hil_sys_altera_merlin_router_1921_lp7w7iq router_005 (
		.sink_ready         (sink_dma_csr_agent_rp_ready),                  //  output,    width = 1,      sink.ready
		.sink_valid         (sink_dma_csr_agent_rp_valid),                  //   input,    width = 1,          .valid
		.sink_data          (sink_dma_csr_agent_rp_data),                   //   input,  width = 122,          .data
		.sink_startofpacket (sink_dma_csr_agent_rp_startofpacket),          //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (sink_dma_csr_agent_rp_endofpacket),            //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                         //   input,    width = 1,       clk.clk
		.reset              (sink_dma_reset_n_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_005_src_ready),                         //   input,    width = 1,       src.ready
		.src_valid          (router_005_src_valid),                         //  output,    width = 1,          .valid
		.src_data           (router_005_src_data),                          //  output,  width = 122,          .data
		.src_channel        (router_005_src_channel),                       //  output,    width = 6,          .channel
		.src_startofpacket  (router_005_src_startofpacket),                 //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                    //  output,    width = 1,          .endofpacket
	);

	hil_sys_altera_merlin_router_1921_cezpthi router_006 (
		.sink_ready         (source_dma_descriptor_slave_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (source_dma_descriptor_slave_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (source_dma_descriptor_slave_agent_rp_data),          //   input,  width = 230,          .data
		.sink_startofpacket (source_dma_descriptor_slave_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (source_dma_descriptor_slave_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset              (sink_dma_reset_n_reset_bridge_in_reset_reset),       //   input,    width = 1, clk_reset.reset
		.src_ready          (router_006_src_ready),                               //   input,    width = 1,       src.ready
		.src_valid          (router_006_src_valid),                               //  output,    width = 1,          .valid
		.src_data           (router_006_src_data),                                //  output,  width = 230,          .data
		.src_channel        (router_006_src_channel),                             //  output,    width = 6,          .channel
		.src_startofpacket  (router_006_src_startofpacket),                       //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                          //  output,    width = 1,          .endofpacket
	);

	hil_sys_altera_merlin_router_1921_cezpthi router_007 (
		.sink_ready         (sink_dma_descriptor_slave_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (sink_dma_descriptor_slave_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (sink_dma_descriptor_slave_agent_rp_data),          //   input,  width = 230,          .data
		.sink_startofpacket (sink_dma_descriptor_slave_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (sink_dma_descriptor_slave_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                             //   input,    width = 1,       clk.clk
		.reset              (sink_dma_reset_n_reset_bridge_in_reset_reset),     //   input,    width = 1, clk_reset.reset
		.src_ready          (router_007_src_ready),                             //   input,    width = 1,       src.ready
		.src_valid          (router_007_src_valid),                             //  output,    width = 1,          .valid
		.src_data           (router_007_src_data),                              //  output,  width = 230,          .data
		.src_channel        (router_007_src_channel),                           //  output,    width = 6,          .channel
		.src_startofpacket  (router_007_src_startofpacket),                     //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                        //  output,    width = 1,          .endofpacket
	);

	hil_sys_altera_merlin_router_1921_mwbxh2y router_008 (
		.sink_ready         (test_source_ram_s1_agent_rp_ready),            //  output,    width = 1,      sink.ready
		.sink_valid         (test_source_ram_s1_agent_rp_valid),            //   input,    width = 1,          .valid
		.sink_data          (test_source_ram_s1_agent_rp_data),             //   input,  width = 122,          .data
		.sink_startofpacket (test_source_ram_s1_agent_rp_startofpacket),    //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (test_source_ram_s1_agent_rp_endofpacket),      //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                         //   input,    width = 1,       clk.clk
		.reset              (sink_dma_reset_n_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_008_src_ready),                         //   input,    width = 1,       src.ready
		.src_valid          (router_008_src_valid),                         //  output,    width = 1,          .valid
		.src_data           (router_008_src_data),                          //  output,  width = 122,          .data
		.src_channel        (router_008_src_channel),                       //  output,    width = 6,          .channel
		.src_startofpacket  (router_008_src_startofpacket),                 //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                    //  output,    width = 1,          .endofpacket
	);

	hil_sys_altera_merlin_router_1921_oidrqgi router_009 (
		.sink_ready         (test_sink_ram_s1_agent_rp_ready),              //  output,    width = 1,      sink.ready
		.sink_valid         (test_sink_ram_s1_agent_rp_valid),              //   input,    width = 1,          .valid
		.sink_data          (test_sink_ram_s1_agent_rp_data),               //   input,  width = 122,          .data
		.sink_startofpacket (test_sink_ram_s1_agent_rp_startofpacket),      //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (test_sink_ram_s1_agent_rp_endofpacket),        //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                         //   input,    width = 1,       clk.clk
		.reset              (sink_dma_reset_n_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_009_src_ready),                         //   input,    width = 1,       src.ready
		.src_valid          (router_009_src_valid),                         //  output,    width = 1,          .valid
		.src_data           (router_009_src_data),                          //  output,  width = 122,          .data
		.src_channel        (router_009_src_channel),                       //  output,    width = 6,          .channel
		.src_startofpacket  (router_009_src_startofpacket),                 //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                    //  output,    width = 1,          .endofpacket
	);

	hil_sys_altera_merlin_traffic_limiter_191_6blplji #(
		.SYNC_RESET                           (1),
		.PKT_DEST_ID_H                        (99),
		.PKT_DEST_ID_L                        (97),
		.PKT_SRC_ID_H                         (96),
		.PKT_SRC_ID_L                         (94),
		.PKT_BYTE_CNT_H                       (79),
		.PKT_BYTE_CNT_L                       (74),
		.PKT_BYTEEN_H                         (35),
		.PKT_BYTEEN_L                         (32),
		.PKT_TRANS_POSTED                     (69),
		.PKT_TRANS_WRITE                      (70),
		.MAX_OUTSTANDING_RESPONSES            (4),
		.PIPELINED                            (0),
		.ST_DATA_W                            (122),
		.ST_CHANNEL_W                         (6),
		.VALID_WIDTH                          (6),
		.ENFORCE_ORDER                        (1),
		.PREVENT_HAZARDS                      (0),
		.SUPPORTS_POSTED_WRITES               (1),
		.SUPPORTS_NONPOSTED_WRITES            (0),
		.REORDER                              (0),
		.ENABLE_CONCURRENT_SUBORDINATE_ACCESS (0),
		.NO_REPEATED_IDS_BETWEEN_SUBORDINATES (0)
	) mm_master_bfm_0_m0_limiter (
		.clk                    (clock_in_out_clk_clk),                                            //   input,    width = 1,       clk.clk
		.reset                  (mm_master_bfm_0_m0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                                //  output,    width = 1,  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                                //   input,    width = 1,          .valid
		.cmd_sink_data          (router_src_data),                                                 //   input,  width = 122,          .data
		.cmd_sink_channel       (router_src_channel),                                              //   input,    width = 6,          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                                        //   input,    width = 1,          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                          //   input,    width = 1,          .endofpacket
		.cmd_src_ready          (mm_master_bfm_0_m0_limiter_cmd_src_ready),                        //   input,    width = 1,   cmd_src.ready
		.cmd_src_data           (mm_master_bfm_0_m0_limiter_cmd_src_data),                         //  output,  width = 122,          .data
		.cmd_src_channel        (mm_master_bfm_0_m0_limiter_cmd_src_channel),                      //  output,    width = 6,          .channel
		.cmd_src_startofpacket  (mm_master_bfm_0_m0_limiter_cmd_src_startofpacket),                //  output,    width = 1,          .startofpacket
		.cmd_src_endofpacket    (mm_master_bfm_0_m0_limiter_cmd_src_endofpacket),                  //  output,    width = 1,          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                               //  output,    width = 1,  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                               //   input,    width = 1,          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                             //   input,    width = 6,          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                                //   input,  width = 122,          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                                       //   input,    width = 1,          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                                         //   input,    width = 1,          .endofpacket
		.rsp_src_ready          (mm_master_bfm_0_m0_limiter_rsp_src_ready),                        //   input,    width = 1,   rsp_src.ready
		.rsp_src_valid          (mm_master_bfm_0_m0_limiter_rsp_src_valid),                        //  output,    width = 1,          .valid
		.rsp_src_data           (mm_master_bfm_0_m0_limiter_rsp_src_data),                         //  output,  width = 122,          .data
		.rsp_src_channel        (mm_master_bfm_0_m0_limiter_rsp_src_channel),                      //  output,    width = 6,          .channel
		.rsp_src_startofpacket  (mm_master_bfm_0_m0_limiter_rsp_src_startofpacket),                //  output,    width = 1,          .startofpacket
		.rsp_src_endofpacket    (mm_master_bfm_0_m0_limiter_rsp_src_endofpacket),                  //  output,    width = 1,          .endofpacket
		.cmd_src_valid          (mm_master_bfm_0_m0_limiter_cmd_valid_data)                        //  output,    width = 6, cmd_valid.data
	);

	hil_sys_altera_merlin_traffic_limiter_191_6blplji #(
		.SYNC_RESET                           (1),
		.PKT_DEST_ID_H                        (99),
		.PKT_DEST_ID_L                        (97),
		.PKT_SRC_ID_H                         (96),
		.PKT_SRC_ID_L                         (94),
		.PKT_BYTE_CNT_H                       (79),
		.PKT_BYTE_CNT_L                       (74),
		.PKT_BYTEEN_H                         (35),
		.PKT_BYTEEN_L                         (32),
		.PKT_TRANS_POSTED                     (69),
		.PKT_TRANS_WRITE                      (70),
		.MAX_OUTSTANDING_RESPONSES            (4),
		.PIPELINED                            (0),
		.ST_DATA_W                            (122),
		.ST_CHANNEL_W                         (6),
		.VALID_WIDTH                          (6),
		.ENFORCE_ORDER                        (1),
		.PREVENT_HAZARDS                      (0),
		.SUPPORTS_POSTED_WRITES               (1),
		.SUPPORTS_NONPOSTED_WRITES            (0),
		.REORDER                              (0),
		.ENABLE_CONCURRENT_SUBORDINATE_ACCESS (0),
		.NO_REPEATED_IDS_BETWEEN_SUBORDINATES (0)
	) jtag_master_master_limiter (
		.clk                    (clock_in_out_clk_clk),                                            //   input,    width = 1,       clk.clk
		.reset                  (jtag_master_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                                            //  output,    width = 1,  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                                            //   input,    width = 1,          .valid
		.cmd_sink_data          (router_001_src_data),                                             //   input,  width = 122,          .data
		.cmd_sink_channel       (router_001_src_channel),                                          //   input,    width = 6,          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                                    //   input,    width = 1,          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                                      //   input,    width = 1,          .endofpacket
		.cmd_src_ready          (jtag_master_master_limiter_cmd_src_ready),                        //   input,    width = 1,   cmd_src.ready
		.cmd_src_data           (jtag_master_master_limiter_cmd_src_data),                         //  output,  width = 122,          .data
		.cmd_src_channel        (jtag_master_master_limiter_cmd_src_channel),                      //  output,    width = 6,          .channel
		.cmd_src_startofpacket  (jtag_master_master_limiter_cmd_src_startofpacket),                //  output,    width = 1,          .startofpacket
		.cmd_src_endofpacket    (jtag_master_master_limiter_cmd_src_endofpacket),                  //  output,    width = 1,          .endofpacket
		.rsp_sink_ready         (rsp_mux_001_src_ready),                                           //  output,    width = 1,  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_001_src_valid),                                           //   input,    width = 1,          .valid
		.rsp_sink_channel       (rsp_mux_001_src_channel),                                         //   input,    width = 6,          .channel
		.rsp_sink_data          (rsp_mux_001_src_data),                                            //   input,  width = 122,          .data
		.rsp_sink_startofpacket (rsp_mux_001_src_startofpacket),                                   //   input,    width = 1,          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_001_src_endofpacket),                                     //   input,    width = 1,          .endofpacket
		.rsp_src_ready          (jtag_master_master_limiter_rsp_src_ready),                        //   input,    width = 1,   rsp_src.ready
		.rsp_src_valid          (jtag_master_master_limiter_rsp_src_valid),                        //  output,    width = 1,          .valid
		.rsp_src_data           (jtag_master_master_limiter_rsp_src_data),                         //  output,  width = 122,          .data
		.rsp_src_channel        (jtag_master_master_limiter_rsp_src_channel),                      //  output,    width = 6,          .channel
		.rsp_src_startofpacket  (jtag_master_master_limiter_rsp_src_startofpacket),                //  output,    width = 1,          .startofpacket
		.rsp_src_endofpacket    (jtag_master_master_limiter_rsp_src_endofpacket),                  //  output,    width = 1,          .endofpacket
		.cmd_src_valid          (jtag_master_master_limiter_cmd_valid_data)                        //  output,    width = 6, cmd_valid.data
	);

	hil_sys_altera_merlin_burst_adapter_1923_2rmpnfi #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (80),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (122),
		.ST_CHANNEL_W              (6),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (1),
		.BURSTWRAP_CONST_MASK      (15),
		.BURSTWRAP_CONST_VALUE     (15),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (1)
	) source_dma_csr_burst_adapter (
		.clk                   (clock_in_out_clk_clk),                               //   input,    width = 1,       cr0.clk
		.reset                 (sink_dma_reset_n_reset_bridge_in_reset_reset),       //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_src_valid),                                  //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_src_data),                                   //   input,  width = 122,          .data
		.sink0_channel         (cmd_mux_src_channel),                                //   input,    width = 6,          .channel
		.sink0_startofpacket   (cmd_mux_src_startofpacket),                          //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_src_endofpacket),                            //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_src_ready),                                  //  output,    width = 1,          .ready
		.source0_valid         (source_dma_csr_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (source_dma_csr_burst_adapter_source0_data),          //  output,  width = 122,          .data
		.source0_channel       (source_dma_csr_burst_adapter_source0_channel),       //  output,    width = 6,          .channel
		.source0_startofpacket (source_dma_csr_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (source_dma_csr_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (source_dma_csr_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	hil_sys_altera_merlin_burst_adapter_1923_2rmpnfi #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (80),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (122),
		.ST_CHANNEL_W              (6),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (1),
		.BURSTWRAP_CONST_MASK      (15),
		.BURSTWRAP_CONST_VALUE     (15),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (1)
	) sink_dma_csr_burst_adapter (
		.clk                   (clock_in_out_clk_clk),                             //   input,    width = 1,       cr0.clk
		.reset                 (sink_dma_reset_n_reset_bridge_in_reset_reset),     //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_001_src_valid),                            //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_001_src_data),                             //   input,  width = 122,          .data
		.sink0_channel         (cmd_mux_001_src_channel),                          //   input,    width = 6,          .channel
		.sink0_startofpacket   (cmd_mux_001_src_startofpacket),                    //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_001_src_endofpacket),                      //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_001_src_ready),                            //  output,    width = 1,          .ready
		.source0_valid         (sink_dma_csr_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (sink_dma_csr_burst_adapter_source0_data),          //  output,  width = 122,          .data
		.source0_channel       (sink_dma_csr_burst_adapter_source0_channel),       //  output,    width = 6,          .channel
		.source0_startofpacket (sink_dma_csr_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (sink_dma_csr_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (sink_dma_csr_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	hil_sys_altera_merlin_burst_adapter_1923_v7ucnni #(
		.PKT_ADDR_H                (175),
		.PKT_ADDR_L                (144),
		.PKT_BEGIN_BURST           (200),
		.PKT_BYTE_CNT_H            (187),
		.PKT_BYTE_CNT_L            (182),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_BURST_SIZE_H          (195),
		.PKT_BURST_SIZE_L          (193),
		.PKT_BURST_TYPE_H          (197),
		.PKT_BURST_TYPE_L          (196),
		.PKT_BURSTWRAP_H           (192),
		.PKT_BURSTWRAP_L           (188),
		.PKT_TRANS_COMPRESSED_READ (176),
		.PKT_TRANS_WRITE           (178),
		.PKT_TRANS_READ            (179),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (230),
		.ST_CHANNEL_W              (6),
		.OUT_BYTE_CNT_H            (186),
		.OUT_BURSTWRAP_H           (192),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (1),
		.BURSTWRAP_CONST_MASK      (15),
		.BURSTWRAP_CONST_VALUE     (15),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (1)
	) source_dma_descriptor_slave_burst_adapter (
		.clk                   (clock_in_out_clk_clk),                                            //   input,    width = 1,       cr0.clk
		.reset                 (sink_dma_reset_n_reset_bridge_in_reset_reset),                    //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (source_dma_descriptor_slave_cmd_width_adapter_src_valid),         //   input,    width = 1,     sink0.valid
		.sink0_data            (source_dma_descriptor_slave_cmd_width_adapter_src_data),          //   input,  width = 230,          .data
		.sink0_channel         (source_dma_descriptor_slave_cmd_width_adapter_src_channel),       //   input,    width = 6,          .channel
		.sink0_startofpacket   (source_dma_descriptor_slave_cmd_width_adapter_src_startofpacket), //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (source_dma_descriptor_slave_cmd_width_adapter_src_endofpacket),   //   input,    width = 1,          .endofpacket
		.sink0_ready           (source_dma_descriptor_slave_cmd_width_adapter_src_ready),         //  output,    width = 1,          .ready
		.source0_valid         (source_dma_descriptor_slave_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (source_dma_descriptor_slave_burst_adapter_source0_data),          //  output,  width = 230,          .data
		.source0_channel       (source_dma_descriptor_slave_burst_adapter_source0_channel),       //  output,    width = 6,          .channel
		.source0_startofpacket (source_dma_descriptor_slave_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (source_dma_descriptor_slave_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (source_dma_descriptor_slave_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	hil_sys_altera_merlin_burst_adapter_1923_v7ucnni #(
		.PKT_ADDR_H                (175),
		.PKT_ADDR_L                (144),
		.PKT_BEGIN_BURST           (200),
		.PKT_BYTE_CNT_H            (187),
		.PKT_BYTE_CNT_L            (182),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_BURST_SIZE_H          (195),
		.PKT_BURST_SIZE_L          (193),
		.PKT_BURST_TYPE_H          (197),
		.PKT_BURST_TYPE_L          (196),
		.PKT_BURSTWRAP_H           (192),
		.PKT_BURSTWRAP_L           (188),
		.PKT_TRANS_COMPRESSED_READ (176),
		.PKT_TRANS_WRITE           (178),
		.PKT_TRANS_READ            (179),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (230),
		.ST_CHANNEL_W              (6),
		.OUT_BYTE_CNT_H            (186),
		.OUT_BURSTWRAP_H           (192),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (1),
		.BURSTWRAP_CONST_MASK      (15),
		.BURSTWRAP_CONST_VALUE     (15),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (1)
	) sink_dma_descriptor_slave_burst_adapter (
		.clk                   (clock_in_out_clk_clk),                                          //   input,    width = 1,       cr0.clk
		.reset                 (sink_dma_reset_n_reset_bridge_in_reset_reset),                  //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (sink_dma_descriptor_slave_cmd_width_adapter_src_valid),         //   input,    width = 1,     sink0.valid
		.sink0_data            (sink_dma_descriptor_slave_cmd_width_adapter_src_data),          //   input,  width = 230,          .data
		.sink0_channel         (sink_dma_descriptor_slave_cmd_width_adapter_src_channel),       //   input,    width = 6,          .channel
		.sink0_startofpacket   (sink_dma_descriptor_slave_cmd_width_adapter_src_startofpacket), //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (sink_dma_descriptor_slave_cmd_width_adapter_src_endofpacket),   //   input,    width = 1,          .endofpacket
		.sink0_ready           (sink_dma_descriptor_slave_cmd_width_adapter_src_ready),         //  output,    width = 1,          .ready
		.source0_valid         (sink_dma_descriptor_slave_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (sink_dma_descriptor_slave_burst_adapter_source0_data),          //  output,  width = 230,          .data
		.source0_channel       (sink_dma_descriptor_slave_burst_adapter_source0_channel),       //  output,    width = 6,          .channel
		.source0_startofpacket (sink_dma_descriptor_slave_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (sink_dma_descriptor_slave_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (sink_dma_descriptor_slave_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	hil_sys_altera_merlin_burst_adapter_1923_2rmpnfi #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (80),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (122),
		.ST_CHANNEL_W              (6),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (1),
		.BURSTWRAP_CONST_MASK      (15),
		.BURSTWRAP_CONST_VALUE     (15),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (1)
	) test_source_ram_s1_burst_adapter (
		.clk                   (clock_in_out_clk_clk),                                   //   input,    width = 1,       cr0.clk
		.reset                 (sink_dma_reset_n_reset_bridge_in_reset_reset),           //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_004_src_valid),                                  //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_004_src_data),                                   //   input,  width = 122,          .data
		.sink0_channel         (cmd_mux_004_src_channel),                                //   input,    width = 6,          .channel
		.sink0_startofpacket   (cmd_mux_004_src_startofpacket),                          //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_004_src_endofpacket),                            //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_004_src_ready),                                  //  output,    width = 1,          .ready
		.source0_valid         (test_source_ram_s1_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (test_source_ram_s1_burst_adapter_source0_data),          //  output,  width = 122,          .data
		.source0_channel       (test_source_ram_s1_burst_adapter_source0_channel),       //  output,    width = 6,          .channel
		.source0_startofpacket (test_source_ram_s1_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (test_source_ram_s1_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (test_source_ram_s1_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	hil_sys_altera_merlin_burst_adapter_1923_2rmpnfi #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (80),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (122),
		.ST_CHANNEL_W              (6),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (1),
		.BURSTWRAP_CONST_MASK      (15),
		.BURSTWRAP_CONST_VALUE     (15),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (1)
	) test_sink_ram_s1_burst_adapter (
		.clk                   (clock_in_out_clk_clk),                                 //   input,    width = 1,       cr0.clk
		.reset                 (sink_dma_reset_n_reset_bridge_in_reset_reset),         //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_005_src_valid),                                //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_005_src_data),                                 //   input,  width = 122,          .data
		.sink0_channel         (cmd_mux_005_src_channel),                              //   input,    width = 6,          .channel
		.sink0_startofpacket   (cmd_mux_005_src_startofpacket),                        //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_005_src_endofpacket),                          //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_005_src_ready),                                //  output,    width = 1,          .ready
		.source0_valid         (test_sink_ram_s1_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (test_sink_ram_s1_burst_adapter_source0_data),          //  output,  width = 122,          .data
		.source0_channel       (test_sink_ram_s1_burst_adapter_source0_channel),       //  output,    width = 6,          .channel
		.source0_startofpacket (test_sink_ram_s1_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (test_sink_ram_s1_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (test_sink_ram_s1_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	hil_sys_altera_merlin_demultiplexer_1921_7oetp4a cmd_demux (
		.clk                (clock_in_out_clk_clk),                                            //   input,    width = 1,        clk.clk
		.reset              (mm_master_bfm_0_m0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  clk_reset.reset
		.sink_ready         (mm_master_bfm_0_m0_limiter_cmd_src_ready),                        //  output,    width = 1,       sink.ready
		.sink_channel       (mm_master_bfm_0_m0_limiter_cmd_src_channel),                      //   input,    width = 6,           .channel
		.sink_data          (mm_master_bfm_0_m0_limiter_cmd_src_data),                         //   input,  width = 122,           .data
		.sink_startofpacket (mm_master_bfm_0_m0_limiter_cmd_src_startofpacket),                //   input,    width = 1,           .startofpacket
		.sink_endofpacket   (mm_master_bfm_0_m0_limiter_cmd_src_endofpacket),                  //   input,    width = 1,           .endofpacket
		.sink_valid         (mm_master_bfm_0_m0_limiter_cmd_valid_data),                       //   input,    width = 6, sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                                            //   input,    width = 1,       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                            //  output,    width = 1,           .valid
		.src0_data          (cmd_demux_src0_data),                                             //  output,  width = 122,           .data
		.src0_channel       (cmd_demux_src0_channel),                                          //  output,    width = 6,           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                                    //  output,    width = 1,           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                                      //  output,    width = 1,           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                                            //   input,    width = 1,       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                                            //  output,    width = 1,           .valid
		.src1_data          (cmd_demux_src1_data),                                             //  output,  width = 122,           .data
		.src1_channel       (cmd_demux_src1_channel),                                          //  output,    width = 6,           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                                    //  output,    width = 1,           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),                                      //  output,    width = 1,           .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                                            //   input,    width = 1,       src2.ready
		.src2_valid         (cmd_demux_src2_valid),                                            //  output,    width = 1,           .valid
		.src2_data          (cmd_demux_src2_data),                                             //  output,  width = 122,           .data
		.src2_channel       (cmd_demux_src2_channel),                                          //  output,    width = 6,           .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),                                    //  output,    width = 1,           .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket),                                      //  output,    width = 1,           .endofpacket
		.src3_ready         (cmd_demux_src3_ready),                                            //   input,    width = 1,       src3.ready
		.src3_valid         (cmd_demux_src3_valid),                                            //  output,    width = 1,           .valid
		.src3_data          (cmd_demux_src3_data),                                             //  output,  width = 122,           .data
		.src3_channel       (cmd_demux_src3_channel),                                          //  output,    width = 6,           .channel
		.src3_startofpacket (cmd_demux_src3_startofpacket),                                    //  output,    width = 1,           .startofpacket
		.src3_endofpacket   (cmd_demux_src3_endofpacket),                                      //  output,    width = 1,           .endofpacket
		.src4_ready         (cmd_demux_src4_ready),                                            //   input,    width = 1,       src4.ready
		.src4_valid         (cmd_demux_src4_valid),                                            //  output,    width = 1,           .valid
		.src4_data          (cmd_demux_src4_data),                                             //  output,  width = 122,           .data
		.src4_channel       (cmd_demux_src4_channel),                                          //  output,    width = 6,           .channel
		.src4_startofpacket (cmd_demux_src4_startofpacket),                                    //  output,    width = 1,           .startofpacket
		.src4_endofpacket   (cmd_demux_src4_endofpacket),                                      //  output,    width = 1,           .endofpacket
		.src5_ready         (cmd_demux_src5_ready),                                            //   input,    width = 1,       src5.ready
		.src5_valid         (cmd_demux_src5_valid),                                            //  output,    width = 1,           .valid
		.src5_data          (cmd_demux_src5_data),                                             //  output,  width = 122,           .data
		.src5_channel       (cmd_demux_src5_channel),                                          //  output,    width = 6,           .channel
		.src5_startofpacket (cmd_demux_src5_startofpacket),                                    //  output,    width = 1,           .startofpacket
		.src5_endofpacket   (cmd_demux_src5_endofpacket)                                       //  output,    width = 1,           .endofpacket
	);

	hil_sys_altera_merlin_demultiplexer_1921_7oetp4a cmd_demux_001 (
		.clk                (clock_in_out_clk_clk),                                            //   input,    width = 1,        clk.clk
		.reset              (jtag_master_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  clk_reset.reset
		.sink_ready         (jtag_master_master_limiter_cmd_src_ready),                        //  output,    width = 1,       sink.ready
		.sink_channel       (jtag_master_master_limiter_cmd_src_channel),                      //   input,    width = 6,           .channel
		.sink_data          (jtag_master_master_limiter_cmd_src_data),                         //   input,  width = 122,           .data
		.sink_startofpacket (jtag_master_master_limiter_cmd_src_startofpacket),                //   input,    width = 1,           .startofpacket
		.sink_endofpacket   (jtag_master_master_limiter_cmd_src_endofpacket),                  //   input,    width = 1,           .endofpacket
		.sink_valid         (jtag_master_master_limiter_cmd_valid_data),                       //   input,    width = 6, sink_valid.data
		.src0_ready         (cmd_demux_001_src0_ready),                                        //   input,    width = 1,       src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                                        //  output,    width = 1,           .valid
		.src0_data          (cmd_demux_001_src0_data),                                         //  output,  width = 122,           .data
		.src0_channel       (cmd_demux_001_src0_channel),                                      //  output,    width = 6,           .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                                //  output,    width = 1,           .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),                                  //  output,    width = 1,           .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                                        //   input,    width = 1,       src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                                        //  output,    width = 1,           .valid
		.src1_data          (cmd_demux_001_src1_data),                                         //  output,  width = 122,           .data
		.src1_channel       (cmd_demux_001_src1_channel),                                      //  output,    width = 6,           .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),                                //  output,    width = 1,           .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket),                                  //  output,    width = 1,           .endofpacket
		.src2_ready         (cmd_demux_001_src2_ready),                                        //   input,    width = 1,       src2.ready
		.src2_valid         (cmd_demux_001_src2_valid),                                        //  output,    width = 1,           .valid
		.src2_data          (cmd_demux_001_src2_data),                                         //  output,  width = 122,           .data
		.src2_channel       (cmd_demux_001_src2_channel),                                      //  output,    width = 6,           .channel
		.src2_startofpacket (cmd_demux_001_src2_startofpacket),                                //  output,    width = 1,           .startofpacket
		.src2_endofpacket   (cmd_demux_001_src2_endofpacket),                                  //  output,    width = 1,           .endofpacket
		.src3_ready         (cmd_demux_001_src3_ready),                                        //   input,    width = 1,       src3.ready
		.src3_valid         (cmd_demux_001_src3_valid),                                        //  output,    width = 1,           .valid
		.src3_data          (cmd_demux_001_src3_data),                                         //  output,  width = 122,           .data
		.src3_channel       (cmd_demux_001_src3_channel),                                      //  output,    width = 6,           .channel
		.src3_startofpacket (cmd_demux_001_src3_startofpacket),                                //  output,    width = 1,           .startofpacket
		.src3_endofpacket   (cmd_demux_001_src3_endofpacket),                                  //  output,    width = 1,           .endofpacket
		.src4_ready         (cmd_demux_001_src4_ready),                                        //   input,    width = 1,       src4.ready
		.src4_valid         (cmd_demux_001_src4_valid),                                        //  output,    width = 1,           .valid
		.src4_data          (cmd_demux_001_src4_data),                                         //  output,  width = 122,           .data
		.src4_channel       (cmd_demux_001_src4_channel),                                      //  output,    width = 6,           .channel
		.src4_startofpacket (cmd_demux_001_src4_startofpacket),                                //  output,    width = 1,           .startofpacket
		.src4_endofpacket   (cmd_demux_001_src4_endofpacket),                                  //  output,    width = 1,           .endofpacket
		.src5_ready         (cmd_demux_001_src5_ready),                                        //   input,    width = 1,       src5.ready
		.src5_valid         (cmd_demux_001_src5_valid),                                        //  output,    width = 1,           .valid
		.src5_data          (cmd_demux_001_src5_data),                                         //  output,  width = 122,           .data
		.src5_channel       (cmd_demux_001_src5_channel),                                      //  output,    width = 6,           .channel
		.src5_startofpacket (cmd_demux_001_src5_startofpacket),                                //  output,    width = 1,           .startofpacket
		.src5_endofpacket   (cmd_demux_001_src5_endofpacket)                                   //  output,    width = 1,           .endofpacket
	);

	hil_sys_altera_merlin_demultiplexer_1921_dik6jkq cmd_demux_002 (
		.clk                (clock_in_out_clk_clk),                         //   input,    width = 1,       clk.clk
		.reset              (sink_dma_reset_n_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_002_src_ready),                         //  output,    width = 1,      sink.ready
		.sink_channel       (router_002_src_channel),                       //   input,    width = 6,          .channel
		.sink_data          (router_002_src_data),                          //   input,  width = 122,          .data
		.sink_startofpacket (router_002_src_startofpacket),                 //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                   //   input,    width = 1,          .endofpacket
		.sink_valid         (router_002_src_valid),                         //   input,    width = 1,          .valid
		.src0_ready         (cmd_demux_002_src0_ready),                     //   input,    width = 1,      src0.ready
		.src0_valid         (cmd_demux_002_src0_valid),                     //  output,    width = 1,          .valid
		.src0_data          (cmd_demux_002_src0_data),                      //  output,  width = 122,          .data
		.src0_channel       (cmd_demux_002_src0_channel),                   //  output,    width = 6,          .channel
		.src0_startofpacket (cmd_demux_002_src0_startofpacket),             //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_002_src0_endofpacket)                //  output,    width = 1,          .endofpacket
	);

	hil_sys_altera_merlin_demultiplexer_1921_dik6jkq cmd_demux_003 (
		.clk                (clock_in_out_clk_clk),                         //   input,    width = 1,       clk.clk
		.reset              (sink_dma_reset_n_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_003_src_ready),                         //  output,    width = 1,      sink.ready
		.sink_channel       (router_003_src_channel),                       //   input,    width = 6,          .channel
		.sink_data          (router_003_src_data),                          //   input,  width = 122,          .data
		.sink_startofpacket (router_003_src_startofpacket),                 //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                   //   input,    width = 1,          .endofpacket
		.sink_valid         (router_003_src_valid),                         //   input,    width = 1,          .valid
		.src0_ready         (cmd_demux_003_src0_ready),                     //   input,    width = 1,      src0.ready
		.src0_valid         (cmd_demux_003_src0_valid),                     //  output,    width = 1,          .valid
		.src0_data          (cmd_demux_003_src0_data),                      //  output,  width = 122,          .data
		.src0_channel       (cmd_demux_003_src0_channel),                   //  output,    width = 6,          .channel
		.src0_startofpacket (cmd_demux_003_src0_startofpacket),             //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_003_src0_endofpacket)                //  output,    width = 1,          .endofpacket
	);

	hil_sys_altera_merlin_multiplexer_1921_ydc5ava cmd_mux (
		.clk                 (clock_in_out_clk_clk),                         //   input,    width = 1,       clk.clk
		.reset               (sink_dma_reset_n_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                            //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_src_valid),                            //  output,    width = 1,          .valid
		.src_data            (cmd_mux_src_data),                             //  output,  width = 122,          .data
		.src_channel         (cmd_mux_src_channel),                          //  output,    width = 6,          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                    //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                      //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                         //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                         //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src0_channel),                       //   input,    width = 6,          .channel
		.sink0_data          (cmd_demux_src0_data),                          //   input,  width = 122,          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                 //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),                   //   input,    width = 1,          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                     //  output,    width = 1,     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                     //   input,    width = 1,          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                   //   input,    width = 6,          .channel
		.sink1_data          (cmd_demux_001_src0_data),                      //   input,  width = 122,          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),             //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)                //   input,    width = 1,          .endofpacket
	);

	hil_sys_altera_merlin_multiplexer_1921_ydc5ava cmd_mux_001 (
		.clk                 (clock_in_out_clk_clk),                         //   input,    width = 1,       clk.clk
		.reset               (sink_dma_reset_n_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                        //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_001_src_valid),                        //  output,    width = 1,          .valid
		.src_data            (cmd_mux_001_src_data),                         //  output,  width = 122,          .data
		.src_channel         (cmd_mux_001_src_channel),                      //  output,    width = 6,          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                  //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                         //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                         //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src1_channel),                       //   input,    width = 6,          .channel
		.sink0_data          (cmd_demux_src1_data),                          //   input,  width = 122,          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                 //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket),                   //   input,    width = 1,          .endofpacket
		.sink1_ready         (cmd_demux_001_src1_ready),                     //  output,    width = 1,     sink1.ready
		.sink1_valid         (cmd_demux_001_src1_valid),                     //   input,    width = 1,          .valid
		.sink1_channel       (cmd_demux_001_src1_channel),                   //   input,    width = 6,          .channel
		.sink1_data          (cmd_demux_001_src1_data),                      //   input,  width = 122,          .data
		.sink1_startofpacket (cmd_demux_001_src1_startofpacket),             //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src1_endofpacket)                //   input,    width = 1,          .endofpacket
	);

	hil_sys_altera_merlin_multiplexer_1921_ydc5ava cmd_mux_002 (
		.clk                 (clock_in_out_clk_clk),                         //   input,    width = 1,       clk.clk
		.reset               (sink_dma_reset_n_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                        //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_002_src_valid),                        //  output,    width = 1,          .valid
		.src_data            (cmd_mux_002_src_data),                         //  output,  width = 122,          .data
		.src_channel         (cmd_mux_002_src_channel),                      //  output,    width = 6,          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                  //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                         //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                         //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src2_channel),                       //   input,    width = 6,          .channel
		.sink0_data          (cmd_demux_src2_data),                          //   input,  width = 122,          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                 //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket),                   //   input,    width = 1,          .endofpacket
		.sink1_ready         (cmd_demux_001_src2_ready),                     //  output,    width = 1,     sink1.ready
		.sink1_valid         (cmd_demux_001_src2_valid),                     //   input,    width = 1,          .valid
		.sink1_channel       (cmd_demux_001_src2_channel),                   //   input,    width = 6,          .channel
		.sink1_data          (cmd_demux_001_src2_data),                      //   input,  width = 122,          .data
		.sink1_startofpacket (cmd_demux_001_src2_startofpacket),             //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src2_endofpacket)                //   input,    width = 1,          .endofpacket
	);

	hil_sys_altera_merlin_multiplexer_1921_ydc5ava cmd_mux_003 (
		.clk                 (clock_in_out_clk_clk),                         //   input,    width = 1,       clk.clk
		.reset               (sink_dma_reset_n_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                        //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_003_src_valid),                        //  output,    width = 1,          .valid
		.src_data            (cmd_mux_003_src_data),                         //  output,  width = 122,          .data
		.src_channel         (cmd_mux_003_src_channel),                      //  output,    width = 6,          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                  //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                         //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                         //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src3_channel),                       //   input,    width = 6,          .channel
		.sink0_data          (cmd_demux_src3_data),                          //   input,  width = 122,          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),                 //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket),                   //   input,    width = 1,          .endofpacket
		.sink1_ready         (cmd_demux_001_src3_ready),                     //  output,    width = 1,     sink1.ready
		.sink1_valid         (cmd_demux_001_src3_valid),                     //   input,    width = 1,          .valid
		.sink1_channel       (cmd_demux_001_src3_channel),                   //   input,    width = 6,          .channel
		.sink1_data          (cmd_demux_001_src3_data),                      //   input,  width = 122,          .data
		.sink1_startofpacket (cmd_demux_001_src3_startofpacket),             //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src3_endofpacket)                //   input,    width = 1,          .endofpacket
	);

	hil_sys_altera_merlin_multiplexer_1921_m4jncoa cmd_mux_004 (
		.clk                 (clock_in_out_clk_clk),                         //   input,    width = 1,       clk.clk
		.reset               (sink_dma_reset_n_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                        //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_004_src_valid),                        //  output,    width = 1,          .valid
		.src_data            (cmd_mux_004_src_data),                         //  output,  width = 122,          .data
		.src_channel         (cmd_mux_004_src_channel),                      //  output,    width = 6,          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                  //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                         //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                         //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src4_channel),                       //   input,    width = 6,          .channel
		.sink0_data          (cmd_demux_src4_data),                          //   input,  width = 122,          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),                 //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket),                   //   input,    width = 1,          .endofpacket
		.sink1_ready         (cmd_demux_001_src4_ready),                     //  output,    width = 1,     sink1.ready
		.sink1_valid         (cmd_demux_001_src4_valid),                     //   input,    width = 1,          .valid
		.sink1_channel       (cmd_demux_001_src4_channel),                   //   input,    width = 6,          .channel
		.sink1_data          (cmd_demux_001_src4_data),                      //   input,  width = 122,          .data
		.sink1_startofpacket (cmd_demux_001_src4_startofpacket),             //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src4_endofpacket),               //   input,    width = 1,          .endofpacket
		.sink2_ready         (cmd_demux_003_src0_ready),                     //  output,    width = 1,     sink2.ready
		.sink2_valid         (cmd_demux_003_src0_valid),                     //   input,    width = 1,          .valid
		.sink2_channel       (cmd_demux_003_src0_channel),                   //   input,    width = 6,          .channel
		.sink2_data          (cmd_demux_003_src0_data),                      //   input,  width = 122,          .data
		.sink2_startofpacket (cmd_demux_003_src0_startofpacket),             //   input,    width = 1,          .startofpacket
		.sink2_endofpacket   (cmd_demux_003_src0_endofpacket)                //   input,    width = 1,          .endofpacket
	);

	hil_sys_altera_merlin_multiplexer_1921_m4jncoa cmd_mux_005 (
		.clk                 (clock_in_out_clk_clk),                         //   input,    width = 1,       clk.clk
		.reset               (sink_dma_reset_n_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                        //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_005_src_valid),                        //  output,    width = 1,          .valid
		.src_data            (cmd_mux_005_src_data),                         //  output,  width = 122,          .data
		.src_channel         (cmd_mux_005_src_channel),                      //  output,    width = 6,          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                  //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src5_ready),                         //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src5_valid),                         //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src5_channel),                       //   input,    width = 6,          .channel
		.sink0_data          (cmd_demux_src5_data),                          //   input,  width = 122,          .data
		.sink0_startofpacket (cmd_demux_src5_startofpacket),                 //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src5_endofpacket),                   //   input,    width = 1,          .endofpacket
		.sink1_ready         (cmd_demux_001_src5_ready),                     //  output,    width = 1,     sink1.ready
		.sink1_valid         (cmd_demux_001_src5_valid),                     //   input,    width = 1,          .valid
		.sink1_channel       (cmd_demux_001_src5_channel),                   //   input,    width = 6,          .channel
		.sink1_data          (cmd_demux_001_src5_data),                      //   input,  width = 122,          .data
		.sink1_startofpacket (cmd_demux_001_src5_startofpacket),             //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src5_endofpacket),               //   input,    width = 1,          .endofpacket
		.sink2_ready         (cmd_demux_002_src0_ready),                     //  output,    width = 1,     sink2.ready
		.sink2_valid         (cmd_demux_002_src0_valid),                     //   input,    width = 1,          .valid
		.sink2_channel       (cmd_demux_002_src0_channel),                   //   input,    width = 6,          .channel
		.sink2_data          (cmd_demux_002_src0_data),                      //   input,  width = 122,          .data
		.sink2_startofpacket (cmd_demux_002_src0_startofpacket),             //   input,    width = 1,          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src0_endofpacket)                //   input,    width = 1,          .endofpacket
	);

	hil_sys_altera_merlin_demultiplexer_1921_riikcjy rsp_demux (
		.clk                (clock_in_out_clk_clk),                         //   input,    width = 1,       clk.clk
		.reset              (sink_dma_reset_n_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_004_src_ready),                         //  output,    width = 1,      sink.ready
		.sink_channel       (router_004_src_channel),                       //   input,    width = 6,          .channel
		.sink_data          (router_004_src_data),                          //   input,  width = 122,          .data
		.sink_startofpacket (router_004_src_startofpacket),                 //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                   //   input,    width = 1,          .endofpacket
		.sink_valid         (router_004_src_valid),                         //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_src0_ready),                         //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                         //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_src0_data),                          //  output,  width = 122,          .data
		.src0_channel       (rsp_demux_src0_channel),                       //  output,    width = 6,          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                 //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                   //  output,    width = 1,          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                         //   input,    width = 1,      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                         //  output,    width = 1,          .valid
		.src1_data          (rsp_demux_src1_data),                          //  output,  width = 122,          .data
		.src1_channel       (rsp_demux_src1_channel),                       //  output,    width = 6,          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                 //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket)                    //  output,    width = 1,          .endofpacket
	);

	hil_sys_altera_merlin_demultiplexer_1921_riikcjy rsp_demux_001 (
		.clk                (clock_in_out_clk_clk),                         //   input,    width = 1,       clk.clk
		.reset              (sink_dma_reset_n_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_005_src_ready),                         //  output,    width = 1,      sink.ready
		.sink_channel       (router_005_src_channel),                       //   input,    width = 6,          .channel
		.sink_data          (router_005_src_data),                          //   input,  width = 122,          .data
		.sink_startofpacket (router_005_src_startofpacket),                 //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                   //   input,    width = 1,          .endofpacket
		.sink_valid         (router_005_src_valid),                         //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                     //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                     //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_001_src0_data),                      //  output,  width = 122,          .data
		.src0_channel       (rsp_demux_001_src0_channel),                   //  output,    width = 6,          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),             //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),               //  output,    width = 1,          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),                     //   input,    width = 1,      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),                     //  output,    width = 1,          .valid
		.src1_data          (rsp_demux_001_src1_data),                      //  output,  width = 122,          .data
		.src1_channel       (rsp_demux_001_src1_channel),                   //  output,    width = 6,          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),             //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket)                //  output,    width = 1,          .endofpacket
	);

	hil_sys_altera_merlin_demultiplexer_1921_riikcjy rsp_demux_002 (
		.clk                (clock_in_out_clk_clk),                                            //   input,    width = 1,       clk.clk
		.reset              (sink_dma_reset_n_reset_bridge_in_reset_reset),                    //   input,    width = 1, clk_reset.reset
		.sink_ready         (source_dma_descriptor_slave_rsp_width_adapter_src_ready),         //  output,    width = 1,      sink.ready
		.sink_channel       (source_dma_descriptor_slave_rsp_width_adapter_src_channel),       //   input,    width = 6,          .channel
		.sink_data          (source_dma_descriptor_slave_rsp_width_adapter_src_data),          //   input,  width = 122,          .data
		.sink_startofpacket (source_dma_descriptor_slave_rsp_width_adapter_src_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (source_dma_descriptor_slave_rsp_width_adapter_src_endofpacket),   //   input,    width = 1,          .endofpacket
		.sink_valid         (source_dma_descriptor_slave_rsp_width_adapter_src_valid),         //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                                        //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                                        //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_002_src0_data),                                         //  output,  width = 122,          .data
		.src0_channel       (rsp_demux_002_src0_channel),                                      //  output,    width = 6,          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                                //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket),                                  //  output,    width = 1,          .endofpacket
		.src1_ready         (rsp_demux_002_src1_ready),                                        //   input,    width = 1,      src1.ready
		.src1_valid         (rsp_demux_002_src1_valid),                                        //  output,    width = 1,          .valid
		.src1_data          (rsp_demux_002_src1_data),                                         //  output,  width = 122,          .data
		.src1_channel       (rsp_demux_002_src1_channel),                                      //  output,    width = 6,          .channel
		.src1_startofpacket (rsp_demux_002_src1_startofpacket),                                //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (rsp_demux_002_src1_endofpacket)                                   //  output,    width = 1,          .endofpacket
	);

	hil_sys_altera_merlin_demultiplexer_1921_riikcjy rsp_demux_003 (
		.clk                (clock_in_out_clk_clk),                                          //   input,    width = 1,       clk.clk
		.reset              (sink_dma_reset_n_reset_bridge_in_reset_reset),                  //   input,    width = 1, clk_reset.reset
		.sink_ready         (sink_dma_descriptor_slave_rsp_width_adapter_src_ready),         //  output,    width = 1,      sink.ready
		.sink_channel       (sink_dma_descriptor_slave_rsp_width_adapter_src_channel),       //   input,    width = 6,          .channel
		.sink_data          (sink_dma_descriptor_slave_rsp_width_adapter_src_data),          //   input,  width = 122,          .data
		.sink_startofpacket (sink_dma_descriptor_slave_rsp_width_adapter_src_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (sink_dma_descriptor_slave_rsp_width_adapter_src_endofpacket),   //   input,    width = 1,          .endofpacket
		.sink_valid         (sink_dma_descriptor_slave_rsp_width_adapter_src_valid),         //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                                      //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                                      //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_003_src0_data),                                       //  output,  width = 122,          .data
		.src0_channel       (rsp_demux_003_src0_channel),                                    //  output,    width = 6,          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                              //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket),                                //  output,    width = 1,          .endofpacket
		.src1_ready         (rsp_demux_003_src1_ready),                                      //   input,    width = 1,      src1.ready
		.src1_valid         (rsp_demux_003_src1_valid),                                      //  output,    width = 1,          .valid
		.src1_data          (rsp_demux_003_src1_data),                                       //  output,  width = 122,          .data
		.src1_channel       (rsp_demux_003_src1_channel),                                    //  output,    width = 6,          .channel
		.src1_startofpacket (rsp_demux_003_src1_startofpacket),                              //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (rsp_demux_003_src1_endofpacket)                                 //  output,    width = 1,          .endofpacket
	);

	hil_sys_altera_merlin_demultiplexer_1921_el3rhji rsp_demux_004 (
		.clk                (clock_in_out_clk_clk),                         //   input,    width = 1,       clk.clk
		.reset              (sink_dma_reset_n_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_008_src_ready),                         //  output,    width = 1,      sink.ready
		.sink_channel       (router_008_src_channel),                       //   input,    width = 6,          .channel
		.sink_data          (router_008_src_data),                          //   input,  width = 122,          .data
		.sink_startofpacket (router_008_src_startofpacket),                 //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                   //   input,    width = 1,          .endofpacket
		.sink_valid         (router_008_src_valid),                         //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                     //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                     //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_004_src0_data),                      //  output,  width = 122,          .data
		.src0_channel       (rsp_demux_004_src0_channel),                   //  output,    width = 6,          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),             //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket),               //  output,    width = 1,          .endofpacket
		.src1_ready         (rsp_demux_004_src1_ready),                     //   input,    width = 1,      src1.ready
		.src1_valid         (rsp_demux_004_src1_valid),                     //  output,    width = 1,          .valid
		.src1_data          (rsp_demux_004_src1_data),                      //  output,  width = 122,          .data
		.src1_channel       (rsp_demux_004_src1_channel),                   //  output,    width = 6,          .channel
		.src1_startofpacket (rsp_demux_004_src1_startofpacket),             //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (rsp_demux_004_src1_endofpacket),               //  output,    width = 1,          .endofpacket
		.src2_ready         (rsp_demux_004_src2_ready),                     //   input,    width = 1,      src2.ready
		.src2_valid         (rsp_demux_004_src2_valid),                     //  output,    width = 1,          .valid
		.src2_data          (rsp_demux_004_src2_data),                      //  output,  width = 122,          .data
		.src2_channel       (rsp_demux_004_src2_channel),                   //  output,    width = 6,          .channel
		.src2_startofpacket (rsp_demux_004_src2_startofpacket),             //  output,    width = 1,          .startofpacket
		.src2_endofpacket   (rsp_demux_004_src2_endofpacket)                //  output,    width = 1,          .endofpacket
	);

	hil_sys_altera_merlin_demultiplexer_1921_el3rhji rsp_demux_005 (
		.clk                (clock_in_out_clk_clk),                         //   input,    width = 1,       clk.clk
		.reset              (sink_dma_reset_n_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_009_src_ready),                         //  output,    width = 1,      sink.ready
		.sink_channel       (router_009_src_channel),                       //   input,    width = 6,          .channel
		.sink_data          (router_009_src_data),                          //   input,  width = 122,          .data
		.sink_startofpacket (router_009_src_startofpacket),                 //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                   //   input,    width = 1,          .endofpacket
		.sink_valid         (router_009_src_valid),                         //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                     //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                     //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_005_src0_data),                      //  output,  width = 122,          .data
		.src0_channel       (rsp_demux_005_src0_channel),                   //  output,    width = 6,          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),             //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket),               //  output,    width = 1,          .endofpacket
		.src1_ready         (rsp_demux_005_src1_ready),                     //   input,    width = 1,      src1.ready
		.src1_valid         (rsp_demux_005_src1_valid),                     //  output,    width = 1,          .valid
		.src1_data          (rsp_demux_005_src1_data),                      //  output,  width = 122,          .data
		.src1_channel       (rsp_demux_005_src1_channel),                   //  output,    width = 6,          .channel
		.src1_startofpacket (rsp_demux_005_src1_startofpacket),             //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (rsp_demux_005_src1_endofpacket),               //  output,    width = 1,          .endofpacket
		.src2_ready         (rsp_demux_005_src2_ready),                     //   input,    width = 1,      src2.ready
		.src2_valid         (rsp_demux_005_src2_valid),                     //  output,    width = 1,          .valid
		.src2_data          (rsp_demux_005_src2_data),                      //  output,  width = 122,          .data
		.src2_channel       (rsp_demux_005_src2_channel),                   //  output,    width = 6,          .channel
		.src2_startofpacket (rsp_demux_005_src2_startofpacket),             //  output,    width = 1,          .startofpacket
		.src2_endofpacket   (rsp_demux_005_src2_endofpacket)                //  output,    width = 1,          .endofpacket
	);

	hil_sys_altera_merlin_multiplexer_1921_hgtp4my rsp_mux (
		.clk                 (clock_in_out_clk_clk),                                            //   input,    width = 1,       clk.clk
		.reset               (mm_master_bfm_0_m0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                               //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_src_valid),                                               //  output,    width = 1,          .valid
		.src_data            (rsp_mux_src_data),                                                //  output,  width = 122,          .data
		.src_channel         (rsp_mux_src_channel),                                             //  output,    width = 6,          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                       //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                         //  output,    width = 1,          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                                            //  output,    width = 1,     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                                            //   input,    width = 1,          .valid
		.sink0_channel       (rsp_demux_src0_channel),                                          //   input,    width = 6,          .channel
		.sink0_data          (rsp_demux_src0_data),                                             //   input,  width = 122,          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                                    //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),                                      //   input,    width = 1,          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                                        //  output,    width = 1,     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                                        //   input,    width = 1,          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),                                      //   input,    width = 6,          .channel
		.sink1_data          (rsp_demux_001_src0_data),                                         //   input,  width = 122,          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket),                                  //   input,    width = 1,          .endofpacket
		.sink2_ready         (rsp_demux_002_src0_ready),                                        //  output,    width = 1,     sink2.ready
		.sink2_valid         (rsp_demux_002_src0_valid),                                        //   input,    width = 1,          .valid
		.sink2_channel       (rsp_demux_002_src0_channel),                                      //   input,    width = 6,          .channel
		.sink2_data          (rsp_demux_002_src0_data),                                         //   input,  width = 122,          .data
		.sink2_startofpacket (rsp_demux_002_src0_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src0_endofpacket),                                  //   input,    width = 1,          .endofpacket
		.sink3_ready         (rsp_demux_003_src0_ready),                                        //  output,    width = 1,     sink3.ready
		.sink3_valid         (rsp_demux_003_src0_valid),                                        //   input,    width = 1,          .valid
		.sink3_channel       (rsp_demux_003_src0_channel),                                      //   input,    width = 6,          .channel
		.sink3_data          (rsp_demux_003_src0_data),                                         //   input,  width = 122,          .data
		.sink3_startofpacket (rsp_demux_003_src0_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink3_endofpacket   (rsp_demux_003_src0_endofpacket),                                  //   input,    width = 1,          .endofpacket
		.sink4_ready         (rsp_demux_004_src0_ready),                                        //  output,    width = 1,     sink4.ready
		.sink4_valid         (rsp_demux_004_src0_valid),                                        //   input,    width = 1,          .valid
		.sink4_channel       (rsp_demux_004_src0_channel),                                      //   input,    width = 6,          .channel
		.sink4_data          (rsp_demux_004_src0_data),                                         //   input,  width = 122,          .data
		.sink4_startofpacket (rsp_demux_004_src0_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink4_endofpacket   (rsp_demux_004_src0_endofpacket),                                  //   input,    width = 1,          .endofpacket
		.sink5_ready         (rsp_demux_005_src0_ready),                                        //  output,    width = 1,     sink5.ready
		.sink5_valid         (rsp_demux_005_src0_valid),                                        //   input,    width = 1,          .valid
		.sink5_channel       (rsp_demux_005_src0_channel),                                      //   input,    width = 6,          .channel
		.sink5_data          (rsp_demux_005_src0_data),                                         //   input,  width = 122,          .data
		.sink5_startofpacket (rsp_demux_005_src0_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink5_endofpacket   (rsp_demux_005_src0_endofpacket)                                   //   input,    width = 1,          .endofpacket
	);

	hil_sys_altera_merlin_multiplexer_1921_hgtp4my rsp_mux_001 (
		.clk                 (clock_in_out_clk_clk),                                            //   input,    width = 1,       clk.clk
		.reset               (jtag_master_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                                           //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_001_src_valid),                                           //  output,    width = 1,          .valid
		.src_data            (rsp_mux_001_src_data),                                            //  output,  width = 122,          .data
		.src_channel         (rsp_mux_001_src_channel),                                         //  output,    width = 6,          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                                   //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                                     //  output,    width = 1,          .endofpacket
		.sink0_ready         (rsp_demux_src1_ready),                                            //  output,    width = 1,     sink0.ready
		.sink0_valid         (rsp_demux_src1_valid),                                            //   input,    width = 1,          .valid
		.sink0_channel       (rsp_demux_src1_channel),                                          //   input,    width = 6,          .channel
		.sink0_data          (rsp_demux_src1_data),                                             //   input,  width = 122,          .data
		.sink0_startofpacket (rsp_demux_src1_startofpacket),                                    //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (rsp_demux_src1_endofpacket),                                      //   input,    width = 1,          .endofpacket
		.sink1_ready         (rsp_demux_001_src1_ready),                                        //  output,    width = 1,     sink1.ready
		.sink1_valid         (rsp_demux_001_src1_valid),                                        //   input,    width = 1,          .valid
		.sink1_channel       (rsp_demux_001_src1_channel),                                      //   input,    width = 6,          .channel
		.sink1_data          (rsp_demux_001_src1_data),                                         //   input,  width = 122,          .data
		.sink1_startofpacket (rsp_demux_001_src1_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src1_endofpacket),                                  //   input,    width = 1,          .endofpacket
		.sink2_ready         (rsp_demux_002_src1_ready),                                        //  output,    width = 1,     sink2.ready
		.sink2_valid         (rsp_demux_002_src1_valid),                                        //   input,    width = 1,          .valid
		.sink2_channel       (rsp_demux_002_src1_channel),                                      //   input,    width = 6,          .channel
		.sink2_data          (rsp_demux_002_src1_data),                                         //   input,  width = 122,          .data
		.sink2_startofpacket (rsp_demux_002_src1_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src1_endofpacket),                                  //   input,    width = 1,          .endofpacket
		.sink3_ready         (rsp_demux_003_src1_ready),                                        //  output,    width = 1,     sink3.ready
		.sink3_valid         (rsp_demux_003_src1_valid),                                        //   input,    width = 1,          .valid
		.sink3_channel       (rsp_demux_003_src1_channel),                                      //   input,    width = 6,          .channel
		.sink3_data          (rsp_demux_003_src1_data),                                         //   input,  width = 122,          .data
		.sink3_startofpacket (rsp_demux_003_src1_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink3_endofpacket   (rsp_demux_003_src1_endofpacket),                                  //   input,    width = 1,          .endofpacket
		.sink4_ready         (rsp_demux_004_src1_ready),                                        //  output,    width = 1,     sink4.ready
		.sink4_valid         (rsp_demux_004_src1_valid),                                        //   input,    width = 1,          .valid
		.sink4_channel       (rsp_demux_004_src1_channel),                                      //   input,    width = 6,          .channel
		.sink4_data          (rsp_demux_004_src1_data),                                         //   input,  width = 122,          .data
		.sink4_startofpacket (rsp_demux_004_src1_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink4_endofpacket   (rsp_demux_004_src1_endofpacket),                                  //   input,    width = 1,          .endofpacket
		.sink5_ready         (rsp_demux_005_src1_ready),                                        //  output,    width = 1,     sink5.ready
		.sink5_valid         (rsp_demux_005_src1_valid),                                        //   input,    width = 1,          .valid
		.sink5_channel       (rsp_demux_005_src1_channel),                                      //   input,    width = 6,          .channel
		.sink5_data          (rsp_demux_005_src1_data),                                         //   input,  width = 122,          .data
		.sink5_startofpacket (rsp_demux_005_src1_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink5_endofpacket   (rsp_demux_005_src1_endofpacket)                                   //   input,    width = 1,          .endofpacket
	);

	hil_sys_altera_merlin_multiplexer_1921_izhbrhq rsp_mux_002 (
		.clk                 (clock_in_out_clk_clk),                         //   input,    width = 1,       clk.clk
		.reset               (sink_dma_reset_n_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_002_src_ready),                        //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_002_src_valid),                        //  output,    width = 1,          .valid
		.src_data            (rsp_mux_002_src_data),                         //  output,  width = 122,          .data
		.src_channel         (rsp_mux_002_src_channel),                      //  output,    width = 6,          .channel
		.src_startofpacket   (rsp_mux_002_src_startofpacket),                //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_002_src_endofpacket),                  //  output,    width = 1,          .endofpacket
		.sink0_ready         (rsp_demux_005_src2_ready),                     //  output,    width = 1,     sink0.ready
		.sink0_valid         (rsp_demux_005_src2_valid),                     //   input,    width = 1,          .valid
		.sink0_channel       (rsp_demux_005_src2_channel),                   //   input,    width = 6,          .channel
		.sink0_data          (rsp_demux_005_src2_data),                      //   input,  width = 122,          .data
		.sink0_startofpacket (rsp_demux_005_src2_startofpacket),             //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (rsp_demux_005_src2_endofpacket)                //   input,    width = 1,          .endofpacket
	);

	hil_sys_altera_merlin_multiplexer_1921_izhbrhq rsp_mux_003 (
		.clk                 (clock_in_out_clk_clk),                         //   input,    width = 1,       clk.clk
		.reset               (sink_dma_reset_n_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_003_src_ready),                        //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_003_src_valid),                        //  output,    width = 1,          .valid
		.src_data            (rsp_mux_003_src_data),                         //  output,  width = 122,          .data
		.src_channel         (rsp_mux_003_src_channel),                      //  output,    width = 6,          .channel
		.src_startofpacket   (rsp_mux_003_src_startofpacket),                //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_003_src_endofpacket),                  //  output,    width = 1,          .endofpacket
		.sink0_ready         (rsp_demux_004_src2_ready),                     //  output,    width = 1,     sink0.ready
		.sink0_valid         (rsp_demux_004_src2_valid),                     //   input,    width = 1,          .valid
		.sink0_channel       (rsp_demux_004_src2_channel),                   //   input,    width = 6,          .channel
		.sink0_data          (rsp_demux_004_src2_data),                      //   input,  width = 122,          .data
		.sink0_startofpacket (rsp_demux_004_src2_startofpacket),             //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (rsp_demux_004_src2_endofpacket)                //   input,    width = 1,          .endofpacket
	);

	hil_sys_altera_merlin_width_adapter_1920_jip2oaa #(
		.IN_PKT_ADDR_H                 (175),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (187),
		.IN_PKT_BYTE_CNT_L             (182),
		.IN_PKT_TRANS_COMPRESSED_READ  (176),
		.IN_PKT_TRANS_WRITE            (178),
		.IN_PKT_BURSTWRAP_H            (192),
		.IN_PKT_BURSTWRAP_L            (188),
		.IN_PKT_BURST_SIZE_H           (195),
		.IN_PKT_BURST_SIZE_L           (193),
		.IN_PKT_RESPONSE_STATUS_H      (217),
		.IN_PKT_RESPONSE_STATUS_L      (216),
		.IN_PKT_TRANS_EXCLUSIVE        (181),
		.IN_PKT_BURST_TYPE_H           (197),
		.IN_PKT_BURST_TYPE_L           (196),
		.IN_PKT_ORI_BURST_SIZE_L       (218),
		.IN_PKT_ORI_BURST_SIZE_H       (220),
		.IN_ST_DATA_W                  (230),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (79),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (87),
		.OUT_PKT_BURST_SIZE_L          (85),
		.OUT_PKT_RESPONSE_STATUS_H     (109),
		.OUT_PKT_RESPONSE_STATUS_L     (108),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (89),
		.OUT_PKT_BURST_TYPE_L          (88),
		.OUT_PKT_ORI_BURST_SIZE_L      (110),
		.OUT_PKT_ORI_BURST_SIZE_H      (112),
		.OUT_ST_DATA_W                 (122),
		.ST_CHANNEL_W                  (6),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (1)
	) source_dma_descriptor_slave_rsp_width_adapter (
		.clk                  (clock_in_out_clk_clk),                                            //   input,    width = 1,       clk.clk
		.reset                (sink_dma_reset_n_reset_bridge_in_reset_reset),                    //   input,    width = 1, clk_reset.reset
		.in_valid             (router_006_src_valid),                                            //   input,    width = 1,      sink.valid
		.in_channel           (router_006_src_channel),                                          //   input,    width = 6,          .channel
		.in_startofpacket     (router_006_src_startofpacket),                                    //   input,    width = 1,          .startofpacket
		.in_endofpacket       (router_006_src_endofpacket),                                      //   input,    width = 1,          .endofpacket
		.in_ready             (router_006_src_ready),                                            //  output,    width = 1,          .ready
		.in_data              (router_006_src_data),                                             //   input,  width = 230,          .data
		.out_endofpacket      (source_dma_descriptor_slave_rsp_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (source_dma_descriptor_slave_rsp_width_adapter_src_data),          //  output,  width = 122,          .data
		.out_channel          (source_dma_descriptor_slave_rsp_width_adapter_src_channel),       //  output,    width = 6,          .channel
		.out_valid            (source_dma_descriptor_slave_rsp_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (source_dma_descriptor_slave_rsp_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (source_dma_descriptor_slave_rsp_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                           // (terminated),                         
	);

	hil_sys_altera_merlin_width_adapter_1920_jip2oaa #(
		.IN_PKT_ADDR_H                 (175),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (187),
		.IN_PKT_BYTE_CNT_L             (182),
		.IN_PKT_TRANS_COMPRESSED_READ  (176),
		.IN_PKT_TRANS_WRITE            (178),
		.IN_PKT_BURSTWRAP_H            (192),
		.IN_PKT_BURSTWRAP_L            (188),
		.IN_PKT_BURST_SIZE_H           (195),
		.IN_PKT_BURST_SIZE_L           (193),
		.IN_PKT_RESPONSE_STATUS_H      (217),
		.IN_PKT_RESPONSE_STATUS_L      (216),
		.IN_PKT_TRANS_EXCLUSIVE        (181),
		.IN_PKT_BURST_TYPE_H           (197),
		.IN_PKT_BURST_TYPE_L           (196),
		.IN_PKT_ORI_BURST_SIZE_L       (218),
		.IN_PKT_ORI_BURST_SIZE_H       (220),
		.IN_ST_DATA_W                  (230),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (79),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (87),
		.OUT_PKT_BURST_SIZE_L          (85),
		.OUT_PKT_RESPONSE_STATUS_H     (109),
		.OUT_PKT_RESPONSE_STATUS_L     (108),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (89),
		.OUT_PKT_BURST_TYPE_L          (88),
		.OUT_PKT_ORI_BURST_SIZE_L      (110),
		.OUT_PKT_ORI_BURST_SIZE_H      (112),
		.OUT_ST_DATA_W                 (122),
		.ST_CHANNEL_W                  (6),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (1)
	) sink_dma_descriptor_slave_rsp_width_adapter (
		.clk                  (clock_in_out_clk_clk),                                          //   input,    width = 1,       clk.clk
		.reset                (sink_dma_reset_n_reset_bridge_in_reset_reset),                  //   input,    width = 1, clk_reset.reset
		.in_valid             (router_007_src_valid),                                          //   input,    width = 1,      sink.valid
		.in_channel           (router_007_src_channel),                                        //   input,    width = 6,          .channel
		.in_startofpacket     (router_007_src_startofpacket),                                  //   input,    width = 1,          .startofpacket
		.in_endofpacket       (router_007_src_endofpacket),                                    //   input,    width = 1,          .endofpacket
		.in_ready             (router_007_src_ready),                                          //  output,    width = 1,          .ready
		.in_data              (router_007_src_data),                                           //   input,  width = 230,          .data
		.out_endofpacket      (sink_dma_descriptor_slave_rsp_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (sink_dma_descriptor_slave_rsp_width_adapter_src_data),          //  output,  width = 122,          .data
		.out_channel          (sink_dma_descriptor_slave_rsp_width_adapter_src_channel),       //  output,    width = 6,          .channel
		.out_valid            (sink_dma_descriptor_slave_rsp_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (sink_dma_descriptor_slave_rsp_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (sink_dma_descriptor_slave_rsp_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                         // (terminated),                         
	);

	hil_sys_altera_merlin_width_adapter_1920_mct5dja #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (79),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (84),
		.IN_PKT_BURSTWRAP_L            (80),
		.IN_PKT_BURST_SIZE_H           (87),
		.IN_PKT_BURST_SIZE_L           (85),
		.IN_PKT_RESPONSE_STATUS_H      (109),
		.IN_PKT_RESPONSE_STATUS_L      (108),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (89),
		.IN_PKT_BURST_TYPE_L           (88),
		.IN_PKT_ORI_BURST_SIZE_L       (110),
		.IN_PKT_ORI_BURST_SIZE_H       (112),
		.IN_ST_DATA_W                  (122),
		.OUT_PKT_ADDR_H                (175),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (187),
		.OUT_PKT_BYTE_CNT_L            (182),
		.OUT_PKT_TRANS_COMPRESSED_READ (176),
		.OUT_PKT_BURST_SIZE_H          (195),
		.OUT_PKT_BURST_SIZE_L          (193),
		.OUT_PKT_RESPONSE_STATUS_H     (217),
		.OUT_PKT_RESPONSE_STATUS_L     (216),
		.OUT_PKT_TRANS_EXCLUSIVE       (181),
		.OUT_PKT_BURST_TYPE_H          (197),
		.OUT_PKT_BURST_TYPE_L          (196),
		.OUT_PKT_ORI_BURST_SIZE_L      (218),
		.OUT_PKT_ORI_BURST_SIZE_H      (220),
		.OUT_ST_DATA_W                 (230),
		.ST_CHANNEL_W                  (6),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (1)
	) source_dma_descriptor_slave_cmd_width_adapter (
		.clk                  (clock_in_out_clk_clk),                                            //   input,    width = 1,       clk.clk
		.reset                (sink_dma_reset_n_reset_bridge_in_reset_reset),                    //   input,    width = 1, clk_reset.reset
		.in_valid             (cmd_mux_002_src_valid),                                           //   input,    width = 1,      sink.valid
		.in_channel           (cmd_mux_002_src_channel),                                         //   input,    width = 6,          .channel
		.in_startofpacket     (cmd_mux_002_src_startofpacket),                                   //   input,    width = 1,          .startofpacket
		.in_endofpacket       (cmd_mux_002_src_endofpacket),                                     //   input,    width = 1,          .endofpacket
		.in_ready             (cmd_mux_002_src_ready),                                           //  output,    width = 1,          .ready
		.in_data              (cmd_mux_002_src_data),                                            //   input,  width = 122,          .data
		.out_endofpacket      (source_dma_descriptor_slave_cmd_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (source_dma_descriptor_slave_cmd_width_adapter_src_data),          //  output,  width = 230,          .data
		.out_channel          (source_dma_descriptor_slave_cmd_width_adapter_src_channel),       //  output,    width = 6,          .channel
		.out_valid            (source_dma_descriptor_slave_cmd_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (source_dma_descriptor_slave_cmd_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (source_dma_descriptor_slave_cmd_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                           // (terminated),                         
	);

	hil_sys_altera_merlin_width_adapter_1920_mct5dja #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (79),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (84),
		.IN_PKT_BURSTWRAP_L            (80),
		.IN_PKT_BURST_SIZE_H           (87),
		.IN_PKT_BURST_SIZE_L           (85),
		.IN_PKT_RESPONSE_STATUS_H      (109),
		.IN_PKT_RESPONSE_STATUS_L      (108),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (89),
		.IN_PKT_BURST_TYPE_L           (88),
		.IN_PKT_ORI_BURST_SIZE_L       (110),
		.IN_PKT_ORI_BURST_SIZE_H       (112),
		.IN_ST_DATA_W                  (122),
		.OUT_PKT_ADDR_H                (175),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (187),
		.OUT_PKT_BYTE_CNT_L            (182),
		.OUT_PKT_TRANS_COMPRESSED_READ (176),
		.OUT_PKT_BURST_SIZE_H          (195),
		.OUT_PKT_BURST_SIZE_L          (193),
		.OUT_PKT_RESPONSE_STATUS_H     (217),
		.OUT_PKT_RESPONSE_STATUS_L     (216),
		.OUT_PKT_TRANS_EXCLUSIVE       (181),
		.OUT_PKT_BURST_TYPE_H          (197),
		.OUT_PKT_BURST_TYPE_L          (196),
		.OUT_PKT_ORI_BURST_SIZE_L      (218),
		.OUT_PKT_ORI_BURST_SIZE_H      (220),
		.OUT_ST_DATA_W                 (230),
		.ST_CHANNEL_W                  (6),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (1)
	) sink_dma_descriptor_slave_cmd_width_adapter (
		.clk                  (clock_in_out_clk_clk),                                          //   input,    width = 1,       clk.clk
		.reset                (sink_dma_reset_n_reset_bridge_in_reset_reset),                  //   input,    width = 1, clk_reset.reset
		.in_valid             (cmd_mux_003_src_valid),                                         //   input,    width = 1,      sink.valid
		.in_channel           (cmd_mux_003_src_channel),                                       //   input,    width = 6,          .channel
		.in_startofpacket     (cmd_mux_003_src_startofpacket),                                 //   input,    width = 1,          .startofpacket
		.in_endofpacket       (cmd_mux_003_src_endofpacket),                                   //   input,    width = 1,          .endofpacket
		.in_ready             (cmd_mux_003_src_ready),                                         //  output,    width = 1,          .ready
		.in_data              (cmd_mux_003_src_data),                                          //   input,  width = 122,          .data
		.out_endofpacket      (sink_dma_descriptor_slave_cmd_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (sink_dma_descriptor_slave_cmd_width_adapter_src_data),          //  output,  width = 230,          .data
		.out_channel          (sink_dma_descriptor_slave_cmd_width_adapter_src_channel),       //  output,    width = 6,          .channel
		.out_valid            (sink_dma_descriptor_slave_cmd_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (sink_dma_descriptor_slave_cmd_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (sink_dma_descriptor_slave_cmd_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                         // (terminated),                         
	);

endmodule
